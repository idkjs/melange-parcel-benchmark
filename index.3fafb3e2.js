// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function(modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x) {
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function(id, exports) {
    modules[id] = [
      function(require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function() {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function() {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"1j6wU":[function(require,module,exports) {

var Refresh = require('react-refresh/runtime');

Refresh.injectIntoGlobalHook(window);
window.$RefreshReg$ = function() {};
window.$RefreshSig$ = function() {
  return function(type) {
    return type;
  };
};
},{"react-refresh/runtime":"592mh"}],"592mh":[function(require,module,exports) {
"use strict";
if ("development" === 'production') {
  module.exports = require('./cjs/react-refresh-runtime.production.min.js');
} else {
  module.exports = require('./cjs/react-refresh-runtime.development.js');
}

},{"./cjs/react-refresh-runtime.development.js":"2rNh6"}],"2rNh6":[function(require,module,exports) {
/** @license React v0.9.0
* react-refresh-runtime.development.js
*
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*/
"use strict";
if ("development" !== "production") {
  (function () {
    "use strict";
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 0xeac7;
    var REACT_PORTAL_TYPE = 0xeaca;
    var REACT_FRAGMENT_TYPE = 0xeacb;
    var REACT_STRICT_MODE_TYPE = 0xeacc;
    var REACT_PROFILER_TYPE = 0xead2;
    var REACT_PROVIDER_TYPE = 0xeacd;
    var REACT_CONTEXT_TYPE = 0xeace;
    var REACT_FORWARD_REF_TYPE = 0xead0;
    var REACT_SUSPENSE_TYPE = 0xead1;
    var REACT_SUSPENSE_LIST_TYPE = 0xead8;
    var REACT_MEMO_TYPE = 0xead3;
    var REACT_LAZY_TYPE = 0xead4;
    var REACT_BLOCK_TYPE = 0xead9;
    var REACT_SERVER_BLOCK_TYPE = 0xeada;
    var REACT_FUNDAMENTAL_TYPE = 0xead5;
    var REACT_SCOPE_TYPE = 0xead7;
    var REACT_OPAQUE_ID_TYPE = 0xeae0;
    var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
    var REACT_OFFSCREEN_TYPE = 0xeae2;
    var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;
    if (typeof Symbol === 'function' && Symbol.for) {
      var symbolFor = Symbol.for;
      REACT_ELEMENT_TYPE = symbolFor('react.element');
      REACT_PORTAL_TYPE = symbolFor('react.portal');
      REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
      REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
      REACT_PROFILER_TYPE = symbolFor('react.profiler');
      REACT_PROVIDER_TYPE = symbolFor('react.provider');
      REACT_CONTEXT_TYPE = symbolFor('react.context');
      REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
      REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
      REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
      REACT_MEMO_TYPE = symbolFor('react.memo');
      REACT_LAZY_TYPE = symbolFor('react.lazy');
      REACT_BLOCK_TYPE = symbolFor('react.block');
      REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
      REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
      REACT_SCOPE_TYPE = symbolFor('react.scope');
      REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
      REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
      REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
      REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    // We never remove these associations.
    // It's OK to reference families, but use WeakMap/Set for types.
    var allFamiliesByID = new Map();
    var allFamiliesByType = new PossiblyWeakMap();
    var allSignaturesByType = new PossiblyWeakMap();
    // This WeakMap is read by React, so we only put families
    // that have actually been edited here. This keeps checks fast.
    // $FlowIssue
    var updatedFamiliesByType = new PossiblyWeakMap();
    // This is cleared on every performReactRefresh() call.
    // It is an array of [Family, NextType] tuples.
    var pendingUpdates = [];
    // This is injected by the renderer via DevTools global hook.
    var helpersByRendererID = new Map();
    var helpersByRoot = new Map();
    // We keep track of mounted roots so we can schedule updates.
    var mountedRoots = new Set();
    // If a root captures an error, we remember it so we can retry on edit.
    var failedRoots = new Set();
    // In environments that support WeakMap, we also remember the last element for every root.
    // It needs to be weak because we do this even for roots that failed to mount.
    // If there is no WeakMap, we won't attempt to do retrying.
    // $FlowIssue
    var rootElements = // $FlowIssue
    typeof WeakMap === 'function' ? new WeakMap() : null;
    var isPerformingRefresh = false;
    function computeFullKey(signature) {
      if (signature.fullKey !== null) {
        return signature.fullKey;
      }
      var fullKey = signature.ownKey;
      var hooks;
      try {
        hooks = signature.getCustomHooks();
      } catch (err) {
        // This can happen in an edge case, e.g. if expression like Foo.useSomething
        // depends on Foo which is lazily initialized during rendering.
        // In that case just assume we'll have to remount.
        signature.forceReset = true;
        signature.fullKey = fullKey;
        return fullKey;
      }
      for (var i = 0; i < hooks.length; i++) {
        var hook = hooks[i];
        if (typeof hook !== 'function') {
          // Something's wrong. Assume we need to remount.
          signature.forceReset = true;
          signature.fullKey = fullKey;
          return fullKey;
        }
        var nestedHookSignature = allSignaturesByType.get(hook);
        if (nestedHookSignature === undefined) {
          // No signature means Hook wasn't in the source code, e.g. in a library.
          // We'll skip it because we can assume it won't change during this session.
          continue;
        }
        var nestedHookKey = computeFullKey(nestedHookSignature);
        if (nestedHookSignature.forceReset) {
          signature.forceReset = true;
        }
        fullKey += '\n---\n' + nestedHookKey;
      }
      signature.fullKey = fullKey;
      return fullKey;
    }
    function haveEqualSignatures(prevType, nextType) {
      var prevSignature = allSignaturesByType.get(prevType);
      var nextSignature = allSignaturesByType.get(nextType);
      if (prevSignature === undefined && nextSignature === undefined) {
        return true;
      }
      if (prevSignature === undefined || nextSignature === undefined) {
        return false;
      }
      if (computeFullKey(prevSignature) !== computeFullKey(nextSignature)) {
        return false;
      }
      if (nextSignature.forceReset) {
        return false;
      }
      return true;
    }
    function isReactClass(type) {
      return type.prototype && type.prototype.isReactComponent;
    }
    function canPreserveStateBetween(prevType, nextType) {
      if (isReactClass(prevType) || isReactClass(nextType)) {
        return false;
      }
      if (haveEqualSignatures(prevType, nextType)) {
        return true;
      }
      return false;
    }
    function resolveFamily(type) {
      // Only check updated types to keep lookups fast.
      return updatedFamiliesByType.get(type);
    }
    // If we didn't care about IE11, we could use new Map/Set(iterable).
    function cloneMap(map) {
      var clone = new Map();
      map.forEach(function (value, key) {
        clone.set(key, value);
      });
      return clone;
    }
    function cloneSet(set) {
      var clone = new Set();
      set.forEach(function (value) {
        clone.add(value);
      });
      return clone;
    }
    function performReactRefresh() {
      if (pendingUpdates.length === 0) {
        return null;
      }
      if (isPerformingRefresh) {
        return null;
      }
      isPerformingRefresh = true;
      try {
        var staleFamilies = new Set();
        var updatedFamilies = new Set();
        var updates = pendingUpdates;
        pendingUpdates = [];
        updates.forEach(function (_ref) {
          var family = _ref[0], nextType = _ref[1];
          // Now that we got a real edit, we can create associations
          // that will be read by the React reconciler.
          var prevType = family.current;
          updatedFamiliesByType.set(prevType, family);
          updatedFamiliesByType.set(nextType, family);
          family.current = nextType;
          // Determine whether this should be a re-render or a re-mount.
          if (canPreserveStateBetween(prevType, nextType)) {
            updatedFamilies.add(family);
          } else {
            staleFamilies.add(family);
          }
        });
        // TODO: rename these fields to something more meaningful.
        var update = {
          updatedFamilies: updatedFamilies,
          // Families that will re-render preserving state
          staleFamilies: staleFamilies
        };
        helpersByRendererID.forEach(function (helpers) {
          // Even if there are no roots, set the handler on first update.
          // This ensures that if *new* roots are mounted, they'll use the resolve handler.
          helpers.setRefreshHandler(resolveFamily);
        });
        var didError = false;
        var firstError = null;
        // We snapshot maps and sets that are mutated during commits.
        // If we don't do this, there is a risk they will be mutated while
        // we iterate over them. For example, trying to recover a failed root
        // may cause another root to be added to the failed list -- an infinite loop.
        var failedRootsSnapshot = cloneSet(failedRoots);
        var mountedRootsSnapshot = cloneSet(mountedRoots);
        var helpersByRootSnapshot = cloneMap(helpersByRoot);
        failedRootsSnapshot.forEach(function (root) {
          var helpers = helpersByRootSnapshot.get(root);
          if (helpers === undefined) {
            throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
          }
          if (!failedRoots.has(root)) {}
          if (rootElements === null) {
            return;
          }
          if (!rootElements.has(root)) {
            return;
          }
          var element = rootElements.get(root);
          try {
            helpers.scheduleRoot(root, element);
          } catch (err) {
            if (!didError) {
              didError = true;
              firstError = err;
            }
          }
        });
        mountedRootsSnapshot.forEach(function (root) {
          var helpers = helpersByRootSnapshot.get(root);
          if (helpers === undefined) {
            throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
          }
          if (!mountedRoots.has(root)) {}
          try {
            helpers.scheduleRefresh(root, update);
          } catch (err) {
            if (!didError) {
              didError = true;
              firstError = err;
            }
          }
        });
        if (didError) {
          throw firstError;
        }
        return update;
      } finally {
        isPerformingRefresh = false;
      }
    }
    function register(type, id) {
      {
        if (type === null) {
          return;
        }
        if (typeof type !== 'function' && typeof type !== 'object') {
          return;
        }
        // This can happen in an edge case, e.g. if we register
        // return value of a HOC but it returns a cached component.
        // Ignore anything but the first registration for each type.
        if (allFamiliesByType.has(type)) {
          return;
        }
        // Create family or remember to update it.
        // None of this bookkeeping affects reconciliation
        // until the first performReactRefresh() call above.
        var family = allFamiliesByID.get(id);
        if (family === undefined) {
          family = {
            current: type
          };
          allFamiliesByID.set(id, family);
        } else {
          pendingUpdates.push([family, type]);
        }
        allFamiliesByType.set(type, family);
        // Visit inner types because we might not have registered them.
        if (typeof type === 'object' && type !== null) {
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              register(type.render, id + '$render');
              break;
            case REACT_MEMO_TYPE:
              register(type.type, id + '$type');
              break;
          }
        }
      }
    }
    function setSignature(type, key) {
      var forceReset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var getCustomHooks = arguments.length > 3 ? arguments[3] : undefined;
      {
        allSignaturesByType.set(type, {
          forceReset: forceReset,
          ownKey: key,
          fullKey: null,
          getCustomHooks: getCustomHooks || (function () {
            return [];
          })
        });
      }
    }
    // This is lazily called during first render for a type.
    // It captures Hook list at that time so inline requires don't break comparisons.
    function collectCustomHooksForSignature(type) {
      {
        var signature = allSignaturesByType.get(type);
        if (signature !== undefined) {
          computeFullKey(signature);
        }
      }
    }
    function getFamilyByID(id) {
      {
        return allFamiliesByID.get(id);
      }
    }
    function getFamilyByType(type) {
      {
        return allFamiliesByType.get(type);
      }
    }
    function findAffectedHostInstances(families) {
      {
        var affectedInstances = new Set();
        mountedRoots.forEach(function (root) {
          var helpers = helpersByRoot.get(root);
          if (helpers === undefined) {
            throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
          }
          var instancesForRoot = helpers.findHostInstancesForRefresh(root, families);
          instancesForRoot.forEach(function (inst) {
            affectedInstances.add(inst);
          });
        });
        return affectedInstances;
      }
    }
    function injectIntoGlobalHook(globalObject) {
      {
        // For React Native, the global hook will be set up by require('react-devtools-core').
        // That code will run before us. So we need to monkeypatch functions on existing hook.
        // For React Web, the global hook will be set up by the extension.
        // This will also run before us.
        var hook = globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook === undefined) {
          // However, if there is no DevTools extension, we'll need to set up the global hook ourselves.
          // Note that in this case it's important that renderer code runs *after* this method call.
          // Otherwise, the renderer will think that there is no global hook, and won't do the injection.
          var nextID = 0;
          globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__ = hook = {
            renderers: new Map(),
            supportsFiber: true,
            inject: function (injected) {
              return nextID++;
            },
            onScheduleFiberRoot: function (id, root, children) {},
            onCommitFiberRoot: function (id, root, maybePriorityLevel, didError) {},
            onCommitFiberUnmount: function () {}
          };
        }
        // Here, we just want to get a reference to scheduleRefresh.
        var oldInject = hook.inject;
        hook.inject = function (injected) {
          var id = oldInject.apply(this, arguments);
          if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') {
            // This version supports React Refresh.
            helpersByRendererID.set(id, injected);
          }
          return id;
        };
        // Do the same for any already injected roots.
        // This is useful if ReactDOM has already been initialized.
        // https://github.com/facebook/react/issues/17626
        hook.renderers.forEach(function (injected, id) {
          if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') {
            // This version supports React Refresh.
            helpersByRendererID.set(id, injected);
          }
        });
        // We also want to track currently mounted roots.
        var oldOnCommitFiberRoot = hook.onCommitFiberRoot;
        var oldOnScheduleFiberRoot = hook.onScheduleFiberRoot || (function () {});
        hook.onScheduleFiberRoot = function (id, root, children) {
          if (!isPerformingRefresh) {
            // If it was intentionally scheduled, don't attempt to restore.
            // This includes intentionally scheduled unmounts.
            failedRoots.delete(root);
            if (rootElements !== null) {
              rootElements.set(root, children);
            }
          }
          return oldOnScheduleFiberRoot.apply(this, arguments);
        };
        hook.onCommitFiberRoot = function (id, root, maybePriorityLevel, didError) {
          var helpers = helpersByRendererID.get(id);
          if (helpers === undefined) {
            return;
          }
          helpersByRoot.set(root, helpers);
          var current = root.current;
          var alternate = current.alternate;
          // We need to determine whether this root has just (un)mounted.
          // This logic is copy-pasted from similar logic in the DevTools backend.
          // If this breaks with some refactoring, you'll want to update DevTools too.
          if (alternate !== null) {
            var wasMounted = alternate.memoizedState != null && alternate.memoizedState.element != null;
            var isMounted = current.memoizedState != null && current.memoizedState.element != null;
            if (!wasMounted && isMounted) {
              // Mount a new root.
              mountedRoots.add(root);
              failedRoots.delete(root);
            } else if (wasMounted && isMounted) ; else if (wasMounted && !isMounted) {
              // Unmount an existing root.
              mountedRoots.delete(root);
              if (didError) {
                // We'll remount it on future edits.
                failedRoots.add(root);
              } else {
                helpersByRoot.delete(root);
              }
            } else if (!wasMounted && !isMounted) {
              if (didError) {
                // We'll remount it on future edits.
                failedRoots.add(root);
              }
            }
          } else {
            // Mount a new root.
            mountedRoots.add(root);
          }
          return oldOnCommitFiberRoot.apply(this, arguments);
        };
      }
    }
    function hasUnrecoverableErrors() {
      // TODO: delete this after removing dependency in RN.
      return false;
    }
    // Exposed for testing.
    function _getMountedRootCount() {
      {
        return mountedRoots.size;
      }
    }
    // This is a wrapper over more primitive functions for setting signature.
    // Signatures let us decide whether the Hook order has changed on refresh.
    // 
    // This function is intended to be used as a transform target, e.g.:
    // var _s = createSignatureFunctionForTransform()
    // 
    // function Hello() {
    // const [foo, setFoo] = useState(0);
    // const value = useCustomHook();
    // _s(); /* Second call triggers collecting the custom Hook list.
    // * This doesn't happen during the module evaluation because we
    // * don't want to change the module order with inline requires.
    // * Next calls are noops. */
    // return <h1>Hi</h1>;
    // }
    // 
    // /* First call specifies the signature: */
    // _s(
    // Hello,
    // 'useState{[foo, setFoo]}(0)',
    // () => [useCustomHook], /* Lazy to avoid triggering inline requires */
    // );
    function createSignatureFunctionForTransform() {
      {
        // We'll fill in the signature in two steps.
        // First, we'll know the signature itself. This happens outside the component.
        // Then, we'll know the references to custom Hooks. This happens inside the component.
        // After that, the returned function will be a fast path no-op.
        var status = 'needsSignature';
        var savedType;
        var hasCustomHooks;
        return function (type, key, forceReset, getCustomHooks) {
          switch (status) {
            case 'needsSignature':
              if (type !== undefined) {
                // If we received an argument, this is the initial registration call.
                savedType = type;
                hasCustomHooks = typeof getCustomHooks === 'function';
                setSignature(type, key, forceReset, getCustomHooks);
                // The next call we expect is from inside a function, to fill in the custom Hooks.
                status = 'needsCustomHooks';
              }
              break;
            case 'needsCustomHooks':
              if (hasCustomHooks) {
                collectCustomHooksForSignature(savedType);
              }
              status = 'resolved';
              break;
          }
          return type;
        };
      }
    }
    function isLikelyComponentType(type) {
      {
        switch (typeof type) {
          case 'function':
            {
              // First, deal with classes.
              if (type.prototype != null) {
                if (type.prototype.isReactComponent) {
                  // React class.
                  return true;
                }
                var ownNames = Object.getOwnPropertyNames(type.prototype);
                if (ownNames.length > 1 || ownNames[0] !== 'constructor') {
                  // This looks like a class.
                  return false;
                }
                // eslint-disable-next-line no-proto
                if (type.prototype.__proto__ !== Object.prototype) {
                  // It has a superclass.
                  return false;
                }
              }
              // For plain functions and arrows, use name as a heuristic.
              var name = type.name || type.displayName;
              return typeof name === 'string' && (/^[A-Z]/).test(name);
            }
          case 'object':
            {
              if (type != null) {
                switch (type.$$typeof) {
                  case REACT_FORWARD_REF_TYPE:
                  case REACT_MEMO_TYPE:
                    // Definitely React components.
                    return true;
                  default:
                    return false;
                }
              }
              return false;
            }
          default:
            {
              return false;
            }
        }
      }
    }
    exports._getMountedRootCount = _getMountedRootCount;
    exports.collectCustomHooksForSignature = collectCustomHooksForSignature;
    exports.createSignatureFunctionForTransform = createSignatureFunctionForTransform;
    exports.findAffectedHostInstances = findAffectedHostInstances;
    exports.getFamilyByID = getFamilyByID;
    exports.getFamilyByType = getFamilyByType;
    exports.hasUnrecoverableErrors = hasUnrecoverableErrors;
    exports.injectIntoGlobalHook = injectIntoGlobalHook;
    exports.isLikelyComponentType = isLikelyComponentType;
    exports.performReactRefresh = performReactRefresh;
    exports.register = register;
    exports.setSignature = setSignature;
  })();
}

},{}],"3Imd1":[function(require,module,exports) {
var HMR_HOST = null;
var HMR_PORT = 1234;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d751713988987e9331980363e24189ce";
module.bundle.HMR_BUNDLE_ID = "0fa2489aa94c8731ee2aee9f3fafb3e2";
// @flow
/*global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE*/
/*::
import type {
HMRAsset,
HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
(string): mixed;
cache: {|[string]: ParcelModule|};
hotData: mixed;
Module: any;
parent: ?ParcelRequire;
isParcelRequire: true;
modules: {|[string]: [Function, {|[string]: string|}]|};
HMR_BUNDLE_ID: string;
root: ParcelRequire;
}
interface ParcelModule {
hot: {|
data: mixed,
accept(cb: (Function) => void): void,
dispose(cb: (mixed) => void): void,
// accept(deps: Array<string> | string, cb: (Function) => void): void,
// decline(): void,
_acceptCallbacks: Array<(Function) => void>,
_disposeCallbacks: Array<(mixed) => void>,
|};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
*/
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || (function () {}));
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, /*: {|[string]: boolean|}*/
acceptedAssets, /*: {|[string]: boolean|}*/
/*: {|[string]: boolean|}*/
assetsToAccept;
function getHostname() {
  return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
  return HMR_PORT || location.port;
}
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = getHostname();
  var port = getPort();
  var protocol = HMR_SECURE || location.protocol == 'https:' && !(/localhost|127.0.0.1|0.0.0.0/).test(hostname) ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');
  // $FlowFixMe
  ws.onmessage = function (event) /*: {data: string, ...}*/
  {
    checkedAssets = {
      /*: {|[string]: boolean|}*/
    };
    acceptedAssets = {
      /*: {|[string]: boolean|}*/
    };
    assetsToAccept = [];
    var data = /*: HMRMessage*/
    JSON.parse(event.data);
    if (data.type === 'update') {
      // Remove error overlay if there is one
      removeErrorOverlay();
      let assets = data.assets.filter(asset => asset.envHash === HMR_ENV_HASH);
      // Handle HMR Update
      var handled = false;
      assets.forEach(asset => {
        var didAccept = asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
        if (didAccept) {
          handled = true;
        }
      });
      if (handled) {
        console.clear();
        assets.forEach(function (asset) {
          hmrApply(module.bundle.root, asset);
        });
        for (var i = 0; i < assetsToAccept.length; i++) {
          var id = assetsToAccept[i][1];
          if (!acceptedAssets[id]) {
            hmrAcceptRun(assetsToAccept[i][0], id);
          }
        }
      } else {
        window.location.reload();
      }
    }
    if (data.type === 'error') {
      // Log parcel errors to console
      for (let ansiDiagnostic of data.diagnostics.ansi) {
        let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
        console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
      }
      // Render the fancy html overlay
      removeErrorOverlay();
      var overlay = createErrorOverlay(data.diagnostics.html);
      // $FlowFixMe
      document.body.appendChild(overlay);
    }
  };
  ws.onerror = function (e) {
    console.error(e.message);
  };
  ws.onclose = function (e) {
    if (undefined !== 'test') {
      console.warn('[parcel] 🚨 Connection to the HMR server was lost');
    }
  };
}
function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);
  if (overlay) {
    overlay.remove();
    console.log('[parcel] ✨ Error resolved');
  }
}
function createErrorOverlay(diagnostics) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID;
  let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
  for (let diagnostic of diagnostics) {
    let stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;
    errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          🚨 ${diagnostic.message}
        </div>
        <pre>
          ${stack}
        </pre>
        <div>
          ${diagnostic.hints.map(hint => '<div>' + hint + '</div>').join('')}
        </div>
      </div>
    `;
  }
  errorHTML += '</div>';
  overlay.innerHTML = errorHTML;
  return overlay;
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]>*/
{
  var modules = bundle.modules;
  if (!modules) {
    return [];
  }
  var parents = [];
  var k, d, dep;
  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];
      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push([bundle, k]);
      }
    }
  }
  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }
  return parents;
}
function updateLink(link) {
  var newLink = link.cloneNode();
  newLink.onload = function () {
    if (link.parentNode !== null) {
      // $FlowFixMe
      link.parentNode.removeChild(link);
    }
  };
  newLink.setAttribute('href', // $FlowFixMe
  link.getAttribute('href').split('?')[0] + '?' + Date.now());
  // $FlowFixMe
  link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
  if (cssTimeout) {
    return;
  }
  cssTimeout = setTimeout(function () {
    var links = document.querySelectorAll('link[rel="stylesheet"]');
    for (var i = 0; i < links.length; i++) {
      // $FlowFixMe[incompatible-type]
      var href = /*: string*/
      links[i].getAttribute('href');
      var hostname = getHostname();
      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
      var absolute = (/^https?:\/\//i).test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;
      if (!absolute) {
        updateLink(links[i]);
      }
    }
    cssTimeout = null;
  }, 50);
}
function hmrApply(bundle, /*: ParcelRequire*/
asset) /*:  HMRAsset*/
{
  var modules = bundle.modules;
  if (!modules) {
    return;
  }
  if (asset.type === 'css') {
    reloadCSS();
    return;
  }
  let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
  if (deps) {
    var fn = new Function('require', 'module', 'exports', asset.output);
    modules[asset.id] = [fn, deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}
function hmrAcceptCheck(bundle, /*: ParcelRequire*/
id, /*: ParcelRequire*/
/*: string*/
depsByBundle) /*: ?{ [string]: { [string]: string } }*/
{
  var modules = bundle.modules;
  if (!modules) {
    return;
  }
  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
    // If we reached the root bundle without finding where the asset should go,
    // there's nothing to do. Mark as "accepted" so we don't reload the page.
    if (!bundle.parent) {
      return true;
    }
    return hmrAcceptCheck(bundle.parent, id, depsByBundle);
  }
  if (checkedAssets[id]) {
    return;
  }
  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);
  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }
  return getParents(module.bundle.root, id).some(function (v) {
    return hmrAcceptCheck(v[0], v[1], null);
  });
}
function hmrAcceptRun(bundle, /*: ParcelRequire*/
id) /*: string*/
{
  var cached = bundle.cache[id];
  bundle.hotData = {};
  if (cached && cached.hot) {
    cached.hot.data = bundle.hotData;
  }
  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }
  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];
  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      var assetsToAlsoAccept = cb(function () {
        return getParents(module.bundle.root, id);
      });
      if (assetsToAlsoAccept && assetsToAccept.length) {
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
      }
    });
  }
  acceptedAssets[id] = true;
}

},{}],"5rkFb":[function(require,module,exports) {
var process = require("process");
var global = arguments[3];
var define;
(() => {
  var __commonJS = (cb, mod) => () => (mod || cb((mod = {
    exports: {}
  }).exports, mod), mod.exports);
  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS((exports, module) => {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        ("abcdefghijklmnopqrst").split("").forEach(function (letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function (target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  });
  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS(exports => {
    "use strict";
    if (true) {
      (function () {
        "use strict";
        var _s3 = $RefreshSig$(), _s4 = $RefreshSig$(), _s5 = $RefreshSig$(), _s6 = $RefreshSig$(), _s7 = $RefreshSig$(), _s8 = $RefreshSig$(), _s9 = $RefreshSig$(), _s10 = $RefreshSig$(), _s11 = $RefreshSig$(), _s12 = $RefreshSig$();
        var _assign = require_object_assign();
        var ReactVersion = "17.0.1";
        var REACT_ELEMENT_TYPE = 60103;
        var REACT_PORTAL_TYPE = 60106;
        exports.Fragment = 60107;
        exports.StrictMode = 60108;
        exports.Profiler = 60114;
        var REACT_PROVIDER_TYPE = 60109;
        var REACT_CONTEXT_TYPE = 60110;
        var REACT_FORWARD_REF_TYPE = 60112;
        exports.Suspense = 60113;
        var REACT_SUSPENSE_LIST_TYPE = 60120;
        var REACT_MEMO_TYPE = 60115;
        var REACT_LAZY_TYPE = 60116;
        var REACT_BLOCK_TYPE = 60121;
        var REACT_SERVER_BLOCK_TYPE = 60122;
        var REACT_FUNDAMENTAL_TYPE = 60117;
        var REACT_SCOPE_TYPE = 60119;
        var REACT_OPAQUE_ID_TYPE = 60128;
        var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
        var REACT_OFFSCREEN_TYPE = 60130;
        var REACT_LEGACY_HIDDEN_TYPE = 60131;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          REACT_ELEMENT_TYPE = symbolFor("react.element");
          REACT_PORTAL_TYPE = symbolFor("react.portal");
          exports.Fragment = symbolFor("react.fragment");
          exports.StrictMode = symbolFor("react.strict_mode");
          exports.Profiler = symbolFor("react.profiler");
          REACT_PROVIDER_TYPE = symbolFor("react.provider");
          REACT_CONTEXT_TYPE = symbolFor("react.context");
          REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
          exports.Suspense = symbolFor("react.suspense");
          REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
          REACT_MEMO_TYPE = symbolFor("react.memo");
          REACT_LAZY_TYPE = symbolFor("react.lazy");
          REACT_BLOCK_TYPE = symbolFor("react.block");
          REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
          REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
          REACT_SCOPE_TYPE = symbolFor("react.scope");
          REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
          REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
          REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
          REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
        }
        var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactCurrentDispatcher = {
          current: null
        };
        var ReactCurrentBatchConfig = {
          transition: 0
        };
        var ReactCurrentOwner = {
          current: null
        };
        var ReactDebugCurrentFrame = {};
        var currentExtraStackFrame = null;
        function setExtraStackFrame(stack) {
          {
            currentExtraStackFrame = stack;
          }
        }
        {
          ReactDebugCurrentFrame.setExtraStackFrame = function (stack) {
            {
              currentExtraStackFrame = stack;
            }
          };
          ReactDebugCurrentFrame.getCurrentStack = null;
          ReactDebugCurrentFrame.getStackAddendum = function () {
            var stack = "";
            if (currentExtraStackFrame) {
              stack += currentExtraStackFrame;
            }
            var impl = ReactDebugCurrentFrame.getCurrentStack;
            if (impl) {
              stack += impl() || "";
            }
            return stack;
          };
        }
        var IsSomeRendererActing = {
          current: false
        };
        var ReactSharedInternals = {
          ReactCurrentDispatcher,
          ReactCurrentBatchConfig,
          ReactCurrentOwner,
          IsSomeRendererActing,
          assign: _assign
        };
        {
          ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
        }
        function warn(format) {
          {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            printWarning("warn", format, args);
          }
        }
        function error(format) {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format, args);
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function (item) {
              return "" + item;
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var didWarnStateUpdateForUnmountedComponent = {};
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
              return;
            }
            error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
            didWarnStateUpdateForUnmountedComponent[warningKey] = true;
          }
        }
        var ReactNoopUpdateQueue = {
          isMounted: function (publicInstance) {
            return false;
          },
          enqueueForceUpdate: function (publicInstance, callback, callerName) {
            warnNoop(publicInstance, "forceUpdate");
          },
          enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, "replaceState");
          },
          enqueueSetState: function (publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, "setState");
          }
        };
        var emptyObject = {};
        {
          Object.freeze(emptyObject);
        }
        function Component(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        Component.prototype.isReactComponent = {};
        Component.prototype.setState = function (partialState, callback) {
          if (!(typeof partialState === "object" || typeof partialState === "function" || partialState == null)) {
            {
              throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
          }
          this.updater.enqueueSetState(this, partialState, callback, "setState");
        };
        Component.prototype.forceUpdate = function (callback) {
          this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
        };
        {
          var deprecatedAPIs = {
            isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
            replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
          };
          var defineDeprecationWarning = function (methodName, info) {
            Object.defineProperty(Component.prototype, methodName, {
              get: function () {
                warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                return void 0;
              }
            });
          };
          for (var fnName in deprecatedAPIs) {
            if (deprecatedAPIs.hasOwnProperty(fnName)) {
              defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
            }
          }
        }
        function ComponentDummy() {}
        ComponentDummy.prototype = Component.prototype;
        function PureComponent(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
        pureComponentPrototype.constructor = PureComponent;
        _assign(pureComponentPrototype, Component.prototype);
        pureComponentPrototype.isPureReactComponent = true;
        function createRef() {
          var refObject = {
            current: null
          };
          {
            Object.seal(refObject);
          }
          return refObject;
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentName(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case exports.Fragment:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case exports.Profiler:
              return "Profiler";
            case exports.StrictMode:
              return "StrictMode";
            case exports.Suspense:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                return getComponentName(type.type);
              case REACT_BLOCK_TYPE:
                return getComponentName(type._render);
              case REACT_LAZY_TYPE:
                {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentName(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
            }
          }
          return null;
        }
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config) {
          {
            if (hasOwnProperty.call(config, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.ref !== void 0;
        }
        function hasValidKey(config) {
          {
            if (hasOwnProperty.call(config, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.key !== void 0;
        }
        function defineKeyPropWarningGetter(props, displayName) {
          var warnAboutAccessingKey = function () {
            {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
        function defineRefPropWarningGetter(props, displayName) {
          var warnAboutAccessingRef = function () {
            {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
        function warnIfStringRefCannotBeAutoConverted(config) {
          {
            if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
              var componentName = getComponentName(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        var ReactElement = function (type, key, ref, self2, source, owner, props) {
          var element = {
            $$typeof: REACT_ELEMENT_TYPE,
            type,
            key,
            ref,
            props,
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self2
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function createElement(type, config, children) {
          var propName;
          var props = {};
          var key = null;
          var ref = null;
          var self2 = null;
          var source = null;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              {
                warnIfStringRefCannotBeAutoConverted(config);
              }
            }
            if (hasValidKey(config)) {
              key = "" + config.key;
            }
            self2 = config.__self === void 0 ? null : config.__self;
            source = config.__source === void 0 ? null : config.__source;
            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config[propName];
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }
            {
              if (Object.freeze) {
                Object.freeze(childArray);
              }
            }
            props.children = childArray;
          }
          if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for (propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
          }
          {
            if (key || ref) {
              var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
          }
          return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
        }
        function cloneAndReplaceKey(oldElement, newKey) {
          var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
          return newElement;
        }
        function cloneElement(element, config, children) {
          if (!!(element === null || element === void 0)) {
            {
              throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
          }
          var propName;
          var props = _assign({}, element.props);
          var key = element.key;
          var ref = element.ref;
          var self2 = element._self;
          var source = element._source;
          var owner = element._owner;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) {
              key = "" + config.key;
            }
            var defaultProps;
            if (element.type && element.type.defaultProps) {
              defaultProps = element.type.defaultProps;
            }
            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === void 0 && defaultProps !== void 0) {
                  props[propName] = defaultProps[propName];
                } else {
                  props[propName] = config[propName];
                }
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }
            props.children = childArray;
          }
          return ReactElement(element.type, key, ref, self2, source, owner, props);
        }
        function isValidElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        var SEPARATOR = ".";
        var SUBSEPARATOR = ":";
        function escape(key) {
          var escapeRegex = /[=:]/g;
          var escaperLookup = {
            "=": "=0",
            ":": "=2"
          };
          var escapedString = key.replace(escapeRegex, function (match) {
            return escaperLookup[match];
          });
          return "$" + escapedString;
        }
        var didWarnAboutMaps = false;
        var userProvidedKeyEscapeRegex = /\/+/g;
        function escapeUserProvidedKey(text) {
          return text.replace(userProvidedKeyEscapeRegex, "$&/");
        }
        function getElementKey(element, index) {
          if (typeof element === "object" && element !== null && element.key != null) {
            return escape("" + element.key);
          }
          return index.toString(36);
        }
        function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
          var type = typeof children;
          if (type === "undefined" || type === "boolean") {
            children = null;
          }
          var invokeCallback = false;
          if (children === null) {
            invokeCallback = true;
          } else {
            switch (type) {
              case "string":
              case "number":
                invokeCallback = true;
                break;
              case "object":
                switch (children.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    invokeCallback = true;
                }
            }
          }
          if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child);
            var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (Array.isArray(mappedChild)) {
              var escapedChildKey = "";
              if (childKey != null) {
                escapedChildKey = escapeUserProvidedKey(childKey) + "/";
              }
              mapIntoArray(mappedChild, array, escapedChildKey, "", function (c) {
                return c;
              });
            } else if (mappedChild != null) {
              if (isValidElement(mappedChild)) {
                mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
              }
              array.push(mappedChild);
            }
            return 1;
          }
          var child;
          var nextName;
          var subtreeCount = 0;
          var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
          if (Array.isArray(children)) {
            for (var i = 0; i < children.length; i++) {
              child = children[i];
              nextName = nextNamePrefix + getElementKey(child, i);
              subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
            }
          } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === "function") {
              var iterableChildren = children;
              {
                if (iteratorFn === iterableChildren.entries) {
                  if (!didWarnAboutMaps) {
                    warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
              }
              var iterator = iteratorFn.call(iterableChildren);
              var step;
              var ii = 0;
              while (!(step = iterator.next()).done) {
                child = step.value;
                nextName = nextNamePrefix + getElementKey(child, ii++);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else if (type === "object") {
              var childrenString = "" + children;
              {
                {
                  throw Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
                }
              }
            }
          }
          return subtreeCount;
        }
        function mapChildren(children, func, context) {
          if (children == null) {
            return children;
          }
          var result = [];
          var count = 0;
          mapIntoArray(children, result, "", "", function (child) {
            return func.call(context, child, count++);
          });
          return result;
        }
        function countChildren(children) {
          var n = 0;
          mapChildren(children, function () {
            n++;
          });
          return n;
        }
        function forEachChildren(children, forEachFunc, forEachContext) {
          mapChildren(children, function () {
            forEachFunc.apply(this, arguments);
          }, forEachContext);
        }
        function toArray(children) {
          return mapChildren(children, function (child) {
            return child;
          }) || [];
        }
        function onlyChild(children) {
          if (!isValidElement(children)) {
            {
              throw Error("React.Children.only expected to receive a single React element child.");
            }
          }
          return children;
        }
        function createContext(defaultValue, calculateChangedBits) {
          if (calculateChangedBits === void 0) {
            calculateChangedBits = null;
          } else {
            {
              if (calculateChangedBits !== null && typeof calculateChangedBits !== "function") {
                error("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
              }
            }
          }
          var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            _calculateChangedBits: calculateChangedBits,
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            _threadCount: 0,
            Provider: null,
            Consumer: null
          };
          context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
          };
          var hasWarnedAboutUsingNestedContextConsumers = false;
          var hasWarnedAboutUsingConsumerProvider = false;
          var hasWarnedAboutDisplayNameOnConsumer = false;
          {
            var Consumer = {
              $$typeof: REACT_CONTEXT_TYPE,
              _context: context,
              _calculateChangedBits: context._calculateChangedBits
            };
            Object.defineProperties(Consumer, {
              Provider: {
                get: function () {
                  if (!hasWarnedAboutUsingConsumerProvider) {
                    hasWarnedAboutUsingConsumerProvider = true;
                    error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                  }
                  return context.Provider;
                },
                set: function (_Provider) {
                  context.Provider = _Provider;
                }
              },
              _currentValue: {
                get: function () {
                  return context._currentValue;
                },
                set: function (_currentValue) {
                  context._currentValue = _currentValue;
                }
              },
              _currentValue2: {
                get: function () {
                  return context._currentValue2;
                },
                set: function (_currentValue2) {
                  context._currentValue2 = _currentValue2;
                }
              },
              _threadCount: {
                get: function () {
                  return context._threadCount;
                },
                set: function (_threadCount) {
                  context._threadCount = _threadCount;
                }
              },
              Consumer: {
                get: function () {
                  if (!hasWarnedAboutUsingNestedContextConsumers) {
                    hasWarnedAboutUsingNestedContextConsumers = true;
                    error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                  return context.Consumer;
                }
              },
              displayName: {
                get: function () {
                  return context.displayName;
                },
                set: function (displayName) {
                  if (!hasWarnedAboutDisplayNameOnConsumer) {
                    warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                    hasWarnedAboutDisplayNameOnConsumer = true;
                  }
                }
              }
            });
            context.Consumer = Consumer;
          }
          {
            context._currentRenderer = null;
            context._currentRenderer2 = null;
          }
          return context;
        }
        var Uninitialized = -1;
        var Pending = 0;
        var Resolved = 1;
        var Rejected = 2;
        function lazyInitializer(payload) {
          if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor();
            var pending = payload;
            pending._status = Pending;
            pending._result = thenable;
            thenable.then(function (moduleObject) {
              if (payload._status === Pending) {
                var defaultExport = moduleObject.default;
                {
                  if (defaultExport === void 0) {
                    error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                  }
                }
                var resolved = payload;
                resolved._status = Resolved;
                resolved._result = defaultExport;
              }
            }, function (error2) {
              if (payload._status === Pending) {
                var rejected = payload;
                rejected._status = Rejected;
                rejected._result = error2;
              }
            });
          }
          if (payload._status === Resolved) {
            return payload._result;
          } else {
            throw payload._result;
          }
        }
        function lazy(ctor) {
          var payload = {
            _status: -1,
            _result: ctor
          };
          var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
          };
          {
            var defaultProps;
            var propTypes;
            Object.defineProperties(lazyType, {
              defaultProps: {
                configurable: true,
                get: function () {
                  return defaultProps;
                },
                set: function (newDefaultProps) {
                  error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  defaultProps = newDefaultProps;
                  Object.defineProperty(lazyType, "defaultProps", {
                    enumerable: true
                  });
                }
              },
              propTypes: {
                configurable: true,
                get: function () {
                  return propTypes;
                },
                set: function (newPropTypes) {
                  error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  propTypes = newPropTypes;
                  Object.defineProperty(lazyType, "propTypes", {
                    enumerable: true
                  });
                }
              }
            });
          }
          return lazyType;
        }
        function forwardRef(render) {
          {
            if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
              error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
            } else if (typeof render !== "function") {
              error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
            } else {
              if (render.length !== 0 && render.length !== 2) {
                error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
              }
            }
            if (render != null) {
              if (render.defaultProps != null || render.propTypes != null) {
                error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
              }
            }
          }
          var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function () {
                return ownName;
              },
              set: function (name) {
                ownName = name;
                if (render.displayName == null) {
                  render.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        var enableScopeAPI = false;
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
              return true;
            }
          }
          return false;
        }
        function memo(type, compare) {
          {
            if (!isValidElementType(type)) {
              error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
            }
          }
          var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type,
            compare: compare === void 0 ? null : compare
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function () {
                return ownName;
              },
              set: function (name) {
                ownName = name;
                if (type.displayName == null) {
                  type.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        function resolveDispatcher() {
          var dispatcher = ReactCurrentDispatcher.current;
          if (!(dispatcher !== null)) {
            {
              throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
          return dispatcher;
        }
        function useContext(Context, unstable_observedBits) {
          _s3();
          var dispatcher = resolveDispatcher();
          {
            if (unstable_observedBits !== void 0) {
              error("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === "number" && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks" : "");
            }
            if (Context._context !== void 0) {
              var realContext = Context._context;
              if (realContext.Consumer === Context) {
                error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
              } else if (realContext.Provider === Context) {
                error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
              }
            }
          }
          return dispatcher.useContext(Context, unstable_observedBits);
        }
        _s3(useContext, "gDsCjeeItUuvgOWf1v4qoK9RF6k=");
        function useState(initialState) {
          _s4();
          var dispatcher = resolveDispatcher();
          return dispatcher.useState(initialState);
        }
        _s4(useState, "ivzlgorP4GeLgLCP2g2oo8lrHBQ=");
        function useReducer(reducer, initialArg, init) {
          _s5();
          var dispatcher = resolveDispatcher();
          return dispatcher.useReducer(reducer, initialArg, init);
        }
        _s5(useReducer, "UB8b1SLMookzcOV5tTvlJ/kwReQ=");
        function useRef(initialValue) {
          _s6();
          var dispatcher = resolveDispatcher();
          return dispatcher.useRef(initialValue);
        }
        _s6(useRef, "J9pzIsEOVEZ74gjFtMkCj+5Po7s=");
        function useEffect(create, deps) {
          _s7();
          var dispatcher = resolveDispatcher();
          return dispatcher.useEffect(create, deps);
        }
        _s7(useEffect, "OD7bBpZva5O2jO+Puf00hKivP7c=");
        function useLayoutEffect(create, deps) {
          _s8();
          var dispatcher = resolveDispatcher();
          return dispatcher.useLayoutEffect(create, deps);
        }
        _s8(useLayoutEffect, "n7/vCynhJvM+pLkyL2DMQUF0odM=");
        function useCallback(callback, deps) {
          _s9();
          var dispatcher = resolveDispatcher();
          return dispatcher.useCallback(callback, deps);
        }
        _s9(useCallback, "epj4qY15NHsef74wNqHIp5fdZmg=");
        function useMemo(create, deps) {
          _s10();
          var dispatcher = resolveDispatcher();
          return dispatcher.useMemo(create, deps);
        }
        _s10(useMemo, "nwk+m61qLgjDVUp4IGV/072DDN4=");
        function useImperativeHandle(ref, create, deps) {
          _s11();
          var dispatcher = resolveDispatcher();
          return dispatcher.useImperativeHandle(ref, create, deps);
        }
        _s11(useImperativeHandle, "PYzlZ2AGFM0KxtNOGoZVRb5EOEw=", false, function () {
          return [dispatcher.useImperativeHandle];
        });
        function useDebugValue(value, formatterFn) {
          _s12();
          {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDebugValue(value, formatterFn);
          }
        }
        _s12(useDebugValue, "GhvPrRYADeIBc0kER6M56ZZ9cIU=");
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {}
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: _assign({}, props, {
                  value: prevLog
                }),
                info: _assign({}, props, {
                  value: prevInfo
                }),
                warn: _assign({}, props, {
                  value: prevWarn
                }),
                error: _assign({}, props, {
                  value: prevError
                }),
                group: _assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: _assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: _assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function () {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function () {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                c--;
              }
              for (; s >= 1 && c >= 0; (s--, c--)) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher$1.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component2) {
          var prototype = Component2.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case exports.Suspense:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);
              case REACT_LAZY_TYPE:
                {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {}
                }
            }
          }
          return "";
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has = Function.call.bind(Object.prototype.hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !((error$1.message in loggedTypeFailures))) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              setExtraStackFrame(stack);
            } else {
              setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function getDeclarationErrorAddendum() {
          if (ReactCurrentOwner.current) {
            var name = getComponentName(ReactCurrentOwner.current.type);
            if (name) {
              return "\n\nCheck the render method of `" + name + "`.";
            }
          }
          return "";
        }
        function getSourceInfoErrorAddendum(source) {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
        function getSourceInfoErrorAddendumForProps(elementProps) {
          if (elementProps !== null && elementProps !== void 0) {
            return getSourceInfoErrorAddendum(elementProps.__source);
          }
          return "";
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
          }
          return info;
        }
        function validateExplicitKey(element, parentType) {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
            childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
          }
          {
            setCurrentlyValidatingElement$1(element);
            error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement$1(null);
          }
        }
        function validateChildKeys(node, parentType) {
          if (typeof node !== "object") {
            return;
          }
          if (Array.isArray(node)) {
            for (var i = 0; i < node.length; i++) {
              var child = node[i];
              if (isValidElement(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement(node)) {
            if (node._store) {
              node._store.validated = true;
            }
          } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node.entries) {
                var iterator = iteratorFn.call(node);
                var step;
                while (!(step = iterator.next()).done) {
                  if (isValidElement(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type = element.type;
            if (type === null || type === void 0 || typeof type === "string") {
              return;
            }
            var propTypes;
            if (typeof type === "function") {
              propTypes = type.propTypes;
            } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              var name = getComponentName(type);
              checkPropTypes(propTypes, element.props, "prop", name, element);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentName(type);
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys = Object.keys(fragment.props);
            for (var i = 0; i < keys.length; i++) {
              var key = keys[i];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement$1(null);
            }
          }
        }
        function createElementWithValidation(type, props, children) {
          var validType = isValidElementType(type);
          if (!validType) {
            var info = "";
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) {
              info += sourceInfo;
            } else {
              info += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type === null) {
              typeString = "null";
            } else if (Array.isArray(type)) {
              typeString = "array";
            } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentName(type.type) || "Unknown") + " />";
              info = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type;
            }
            {
              error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
          }
          var element = createElement.apply(this, arguments);
          if (element == null) {
            return element;
          }
          if (validType) {
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], type);
            }
          }
          if (type === exports.Fragment) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
        var didWarnAboutDeprecatedCreateFactory = false;
        function createFactoryWithValidation(type) {
          var validatedFactory = createElementWithValidation.bind(null, type);
          validatedFactory.type = type;
          {
            if (!didWarnAboutDeprecatedCreateFactory) {
              didWarnAboutDeprecatedCreateFactory = true;
              warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
            }
            Object.defineProperty(validatedFactory, "type", {
              enumerable: false,
              get: function () {
                warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, "type", {
                  value: type
                });
                return type;
              }
            });
          }
          return validatedFactory;
        }
        function cloneElementWithValidation(element, props, children) {
          var newElement = cloneElement.apply(this, arguments);
          for (var i = 2; i < arguments.length; i++) {
            validateChildKeys(arguments[i], newElement.type);
          }
          validatePropTypes(newElement);
          return newElement;
        }
        {
          try {
            var frozenObject = Object.freeze({});
            new Map([[frozenObject, null]]);
            new Set([frozenObject]);
          } catch (e) {}
        }
        var createElement$1 = createElementWithValidation;
        var cloneElement$1 = cloneElementWithValidation;
        var createFactory = createFactoryWithValidation;
        var Children = {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray,
          only: onlyChild
        };
        exports.Children = Children;
        exports.Component = Component;
        exports.PureComponent = PureComponent;
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
        exports.cloneElement = cloneElement$1;
        exports.createContext = createContext;
        exports.createElement = createElement$1;
        exports.createFactory = createFactory;
        exports.createRef = createRef;
        exports.forwardRef = forwardRef;
        exports.isValidElement = isValidElement;
        exports.lazy = lazy;
        exports.memo = memo;
        exports.useCallback = useCallback;
        exports.useContext = useContext;
        exports.useDebugValue = useDebugValue;
        exports.useEffect = useEffect;
        exports.useImperativeHandle = useImperativeHandle;
        exports.useLayoutEffect = useLayoutEffect;
        exports.useMemo = useMemo;
        exports.useReducer = useReducer;
        exports.useRef = useRef;
        exports.useState = useState;
        exports.version = ReactVersion;
      })();
    }
  });
  // node_modules/react/index.js
  var require_react = __commonJS((exports, module) => {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_development();
    }
  });
  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS(exports => {
    "use strict";
    if (true) {
      (function () {
        "use strict";
        var enableSchedulerDebugging = false;
        var enableProfiling = true;
        var requestHostCallback;
        var requestHostTimeout;
        var cancelHostTimeout;
        var requestPaint;
        var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
        if (hasPerformanceNow) {
          var localPerformance = performance;
          exports.unstable_now = function () {
            return localPerformance.now();
          };
        } else {
          var localDate = Date;
          var initialTime = localDate.now();
          exports.unstable_now = function () {
            return localDate.now() - initialTime;
          };
        }
        if (typeof window === "undefined" || typeof MessageChannel !== "function") {
          var _callback = null;
          var _timeoutID = null;
          var _flushCallback = function () {
            if (_callback !== null) {
              try {
                var currentTime = exports.unstable_now();
                var hasRemainingTime = true;
                _callback(hasRemainingTime, currentTime);
                _callback = null;
              } catch (e) {
                setTimeout(_flushCallback, 0);
                throw e;
              }
            }
          };
          requestHostCallback = function (cb) {
            if (_callback !== null) {
              setTimeout(requestHostCallback, 0, cb);
            } else {
              _callback = cb;
              setTimeout(_flushCallback, 0);
            }
          };
          requestHostTimeout = function (cb, ms) {
            _timeoutID = setTimeout(cb, ms);
          };
          cancelHostTimeout = function () {
            clearTimeout(_timeoutID);
          };
          exports.unstable_shouldYield = function () {
            return false;
          };
          requestPaint = exports.unstable_forceFrameRate = function () {};
        } else {
          var _setTimeout = window.setTimeout;
          var _clearTimeout = window.clearTimeout;
          if (typeof console !== "undefined") {
            var requestAnimationFrame = window.requestAnimationFrame;
            var cancelAnimationFrame = window.cancelAnimationFrame;
            if (typeof requestAnimationFrame !== "function") {
              console["error"]("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
            if (typeof cancelAnimationFrame !== "function") {
              console["error"]("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var yieldInterval = 5;
          var deadline = 0;
          {
            exports.unstable_shouldYield = function () {
              return exports.unstable_now() >= deadline;
            };
            requestPaint = function () {};
          }
          exports.unstable_forceFrameRate = function (fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              yieldInterval = Math.floor(1e3 / fps);
            } else {
              yieldInterval = 5;
            }
          };
          var performWorkUntilDeadline = function () {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now();
              deadline = currentTime + yieldInterval;
              var hasTimeRemaining = true;
              try {
                var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                if (!hasMoreWork) {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                } else {
                  port.postMessage(null);
                }
              } catch (error) {
                port.postMessage(null);
                throw error;
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var channel = new MessageChannel();
          var port = channel.port2;
          channel.port1.onmessage = performWorkUntilDeadline;
          requestHostCallback = function (callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              port.postMessage(null);
            }
          };
          requestHostTimeout = function (callback, ms) {
            taskTimeoutID = _setTimeout(function () {
              callback(exports.unstable_now());
            }, ms);
          };
          cancelHostTimeout = function () {
            _clearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          };
        }
        function push(heap, node) {
          var index = heap.length;
          heap.push(node);
          siftUp(heap, node, index);
        }
        function peek(heap) {
          var first = heap[0];
          return first === void 0 ? null : first;
        }
        function pop(heap) {
          var first = heap[0];
          if (first !== void 0) {
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          } else {
            return null;
          }
        }
        function siftUp(heap, node, i) {
          var index = i;
          while (true) {
            var parentIndex = index - 1 >>> 1;
            var parent = heap[parentIndex];
            if (parent !== void 0 && compare(parent, node) > 0) {
              heap[parentIndex] = node;
              heap[index] = parent;
              index = parentIndex;
            } else {
              return;
            }
          }
        }
        function siftDown(heap, node, i) {
          var index = i;
          var length = heap.length;
          while (index < length) {
            var leftIndex = (index + 1) * 2 - 1;
            var left = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right = heap[rightIndex];
            if (left !== void 0 && compare(left, node) < 0) {
              if (right !== void 0 && compare(right, left) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                heap[index] = left;
                heap[leftIndex] = node;
                index = leftIndex;
              }
            } else if (right !== void 0 && compare(right, node) < 0) {
              heap[index] = right;
              heap[rightIndex] = node;
              index = rightIndex;
            } else {
              return;
            }
          }
        }
        function compare(a, b) {
          var diff = a.sortIndex - b.sortIndex;
          return diff !== 0 ? diff : a.id - b.id;
        }
        var NoPriority = 0;
        var ImmediatePriority = 1;
        var UserBlockingPriority = 2;
        var NormalPriority = 3;
        var LowPriority = 4;
        var IdlePriority = 5;
        var runIdCounter = 0;
        var mainThreadIdCounter = 0;
        var profilingStateSize = 4;
        var sharedProfilingBuffer = typeof SharedArrayBuffer === "function" ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : typeof ArrayBuffer === "function" ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null;
        var profilingState = sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : [];
        var PRIORITY = 0;
        var CURRENT_TASK_ID = 1;
        var CURRENT_RUN_ID = 2;
        var QUEUE_SIZE = 3;
        {
          profilingState[PRIORITY] = NoPriority;
          profilingState[QUEUE_SIZE] = 0;
          profilingState[CURRENT_TASK_ID] = 0;
        }
        var INITIAL_EVENT_LOG_SIZE = 131072;
        var MAX_EVENT_LOG_SIZE = 524288;
        var eventLogSize = 0;
        var eventLogBuffer = null;
        var eventLog = null;
        var eventLogIndex = 0;
        var TaskStartEvent = 1;
        var TaskCompleteEvent = 2;
        var TaskErrorEvent = 3;
        var TaskCancelEvent = 4;
        var TaskRunEvent = 5;
        var TaskYieldEvent = 6;
        var SchedulerSuspendEvent = 7;
        var SchedulerResumeEvent = 8;
        function logEvent(entries) {
          if (eventLog !== null) {
            var offset = eventLogIndex;
            eventLogIndex += entries.length;
            if (eventLogIndex + 1 > eventLogSize) {
              eventLogSize *= 2;
              if (eventLogSize > MAX_EVENT_LOG_SIZE) {
                console["error"]("Scheduler Profiling: Event log exceeded maximum size. Don't forget to call `stopLoggingProfilingEvents()`.");
                stopLoggingProfilingEvents();
                return;
              }
              var newEventLog = new Int32Array(eventLogSize * 4);
              newEventLog.set(eventLog);
              eventLogBuffer = newEventLog.buffer;
              eventLog = newEventLog;
            }
            eventLog.set(entries, offset);
          }
        }
        function startLoggingProfilingEvents() {
          eventLogSize = INITIAL_EVENT_LOG_SIZE;
          eventLogBuffer = new ArrayBuffer(eventLogSize * 4);
          eventLog = new Int32Array(eventLogBuffer);
          eventLogIndex = 0;
        }
        function stopLoggingProfilingEvents() {
          var buffer = eventLogBuffer;
          eventLogSize = 0;
          eventLogBuffer = null;
          eventLog = null;
          eventLogIndex = 0;
          return buffer;
        }
        function markTaskStart(task, ms) {
          {
            profilingState[QUEUE_SIZE]++;
            if (eventLog !== null) {
              logEvent([TaskStartEvent, ms * 1e3, task.id, task.priorityLevel]);
            }
          }
        }
        function markTaskCompleted(task, ms) {
          {
            profilingState[PRIORITY] = NoPriority;
            profilingState[CURRENT_TASK_ID] = 0;
            profilingState[QUEUE_SIZE]--;
            if (eventLog !== null) {
              logEvent([TaskCompleteEvent, ms * 1e3, task.id]);
            }
          }
        }
        function markTaskCanceled(task, ms) {
          {
            profilingState[QUEUE_SIZE]--;
            if (eventLog !== null) {
              logEvent([TaskCancelEvent, ms * 1e3, task.id]);
            }
          }
        }
        function markTaskErrored(task, ms) {
          {
            profilingState[PRIORITY] = NoPriority;
            profilingState[CURRENT_TASK_ID] = 0;
            profilingState[QUEUE_SIZE]--;
            if (eventLog !== null) {
              logEvent([TaskErrorEvent, ms * 1e3, task.id]);
            }
          }
        }
        function markTaskRun(task, ms) {
          {
            runIdCounter++;
            profilingState[PRIORITY] = task.priorityLevel;
            profilingState[CURRENT_TASK_ID] = task.id;
            profilingState[CURRENT_RUN_ID] = runIdCounter;
            if (eventLog !== null) {
              logEvent([TaskRunEvent, ms * 1e3, task.id, runIdCounter]);
            }
          }
        }
        function markTaskYield(task, ms) {
          {
            profilingState[PRIORITY] = NoPriority;
            profilingState[CURRENT_TASK_ID] = 0;
            profilingState[CURRENT_RUN_ID] = 0;
            if (eventLog !== null) {
              logEvent([TaskYieldEvent, ms * 1e3, task.id, runIdCounter]);
            }
          }
        }
        function markSchedulerSuspended(ms) {
          {
            mainThreadIdCounter++;
            if (eventLog !== null) {
              logEvent([SchedulerSuspendEvent, ms * 1e3, mainThreadIdCounter]);
            }
          }
        }
        function markSchedulerUnsuspended(ms) {
          {
            if (eventLog !== null) {
              logEvent([SchedulerResumeEvent, ms * 1e3, mainThreadIdCounter]);
            }
          }
        }
        var maxSigned31BitInt = 1073741823;
        var IMMEDIATE_PRIORITY_TIMEOUT = -1;
        var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
        var NORMAL_PRIORITY_TIMEOUT = 5e3;
        var LOW_PRIORITY_TIMEOUT = 1e4;
        var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
        var taskQueue = [];
        var timerQueue = [];
        var taskIdCounter = 1;
        var currentTask = null;
        var currentPriorityLevel = NormalPriority;
        var isPerformingWork = false;
        var isHostCallbackScheduled = false;
        var isHostTimeoutScheduled = false;
        function advanceTimers(currentTime) {
          var timer = peek(timerQueue);
          while (timer !== null) {
            if (timer.callback === null) {
              pop(timerQueue);
            } else if (timer.startTime <= currentTime) {
              pop(timerQueue);
              timer.sortIndex = timer.expirationTime;
              push(taskQueue, timer);
              {
                markTaskStart(timer, currentTime);
                timer.isQueued = true;
              }
            } else {
              return;
            }
            timer = peek(timerQueue);
          }
        }
        function handleTimeout(currentTime) {
          isHostTimeoutScheduled = false;
          advanceTimers(currentTime);
          if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
            }
          }
        }
        function flushWork(hasTimeRemaining, initialTime2) {
          {
            markSchedulerUnsuspended(initialTime2);
          }
          isHostCallbackScheduled = false;
          if (isHostTimeoutScheduled) {
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
          }
          isPerformingWork = true;
          var previousPriorityLevel = currentPriorityLevel;
          try {
            if (enableProfiling) {
              try {
                return workLoop(hasTimeRemaining, initialTime2);
              } catch (error) {
                if (currentTask !== null) {
                  var currentTime = exports.unstable_now();
                  markTaskErrored(currentTask, currentTime);
                  currentTask.isQueued = false;
                }
                throw error;
              }
            } else {
              return workLoop(hasTimeRemaining, initialTime2);
            }
          } finally {
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
            {
              var _currentTime = exports.unstable_now();
              markSchedulerSuspended(_currentTime);
            }
          }
        }
        function workLoop(hasTimeRemaining, initialTime2) {
          var currentTime = initialTime2;
          advanceTimers(currentTime);
          currentTask = peek(taskQueue);
          while (currentTask !== null && !enableSchedulerDebugging) {
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) {
              break;
            }
            var callback = currentTask.callback;
            if (typeof callback === "function") {
              currentTask.callback = null;
              currentPriorityLevel = currentTask.priorityLevel;
              var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
              markTaskRun(currentTask, currentTime);
              var continuationCallback = callback(didUserCallbackTimeout);
              currentTime = exports.unstable_now();
              if (typeof continuationCallback === "function") {
                currentTask.callback = continuationCallback;
                markTaskYield(currentTask, currentTime);
              } else {
                {
                  markTaskCompleted(currentTask, currentTime);
                  currentTask.isQueued = false;
                }
                if (currentTask === peek(taskQueue)) {
                  pop(taskQueue);
                }
              }
              advanceTimers(currentTime);
            } else {
              pop(taskQueue);
            }
            currentTask = peek(taskQueue);
          }
          if (currentTask !== null) {
            return true;
          } else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
            return false;
          }
        }
        function unstable_runWithPriority(priorityLevel, eventHandler) {
          switch (priorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
              break;
            default:
              priorityLevel = NormalPriority;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_next(eventHandler) {
          var priorityLevel;
          switch (currentPriorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
              priorityLevel = NormalPriority;
              break;
            default:
              priorityLevel = currentPriorityLevel;
              break;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_wrapCallback(callback) {
          var parentPriorityLevel = currentPriorityLevel;
          return function () {
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
              return callback.apply(this, arguments);
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          };
        }
        function unstable_scheduleCallback(priorityLevel, callback, options) {
          var currentTime = exports.unstable_now();
          var startTime;
          if (typeof options === "object" && options !== null) {
            var delay = options.delay;
            if (typeof delay === "number" && delay > 0) {
              startTime = currentTime + delay;
            } else {
              startTime = currentTime;
            }
          } else {
            startTime = currentTime;
          }
          var timeout;
          switch (priorityLevel) {
            case ImmediatePriority:
              timeout = IMMEDIATE_PRIORITY_TIMEOUT;
              break;
            case UserBlockingPriority:
              timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
              break;
            case IdlePriority:
              timeout = IDLE_PRIORITY_TIMEOUT;
              break;
            case LowPriority:
              timeout = LOW_PRIORITY_TIMEOUT;
              break;
            case NormalPriority:
            default:
              timeout = NORMAL_PRIORITY_TIMEOUT;
              break;
          }
          var expirationTime = startTime + timeout;
          var newTask = {
            id: taskIdCounter++,
            callback,
            priorityLevel,
            startTime,
            expirationTime,
            sortIndex: -1
          };
          {
            newTask.isQueued = false;
          }
          if (startTime > currentTime) {
            newTask.sortIndex = startTime;
            push(timerQueue, newTask);
            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
              if (isHostTimeoutScheduled) {
                cancelHostTimeout();
              } else {
                isHostTimeoutScheduled = true;
              }
              requestHostTimeout(handleTimeout, startTime - currentTime);
            }
          } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            {
              markTaskStart(newTask, currentTime);
              newTask.isQueued = true;
            }
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          return newTask;
        }
        function unstable_pauseExecution() {}
        function unstable_continueExecution() {
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }
        function unstable_getFirstCallbackNode() {
          return peek(taskQueue);
        }
        function unstable_cancelCallback(task) {
          {
            if (task.isQueued) {
              var currentTime = exports.unstable_now();
              markTaskCanceled(task, currentTime);
              task.isQueued = false;
            }
          }
          task.callback = null;
        }
        function unstable_getCurrentPriorityLevel() {
          return currentPriorityLevel;
        }
        var unstable_requestPaint = requestPaint;
        var unstable_Profiling = {
          startLoggingProfilingEvents,
          stopLoggingProfilingEvents,
          sharedProfilingBuffer
        };
        exports.unstable_IdlePriority = IdlePriority;
        exports.unstable_ImmediatePriority = ImmediatePriority;
        exports.unstable_LowPriority = LowPriority;
        exports.unstable_NormalPriority = NormalPriority;
        exports.unstable_Profiling = unstable_Profiling;
        exports.unstable_UserBlockingPriority = UserBlockingPriority;
        exports.unstable_cancelCallback = unstable_cancelCallback;
        exports.unstable_continueExecution = unstable_continueExecution;
        exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
        exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
        exports.unstable_next = unstable_next;
        exports.unstable_pauseExecution = unstable_pauseExecution;
        exports.unstable_requestPaint = unstable_requestPaint;
        exports.unstable_runWithPriority = unstable_runWithPriority;
        exports.unstable_scheduleCallback = unstable_scheduleCallback;
        exports.unstable_wrapCallback = unstable_wrapCallback;
      })();
    }
  });
  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS((exports, module) => {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_scheduler_development();
    }
  });
  // node_modules/scheduler/cjs/scheduler-tracing.development.js
  var require_scheduler_tracing_development = __commonJS(exports => {
    "use strict";
    if (true) {
      (function () {
        "use strict";
        var DEFAULT_THREAD_ID = 0;
        var interactionIDCounter = 0;
        var threadIDCounter = 0;
        exports.__interactionsRef = null;
        exports.__subscriberRef = null;
        {
          exports.__interactionsRef = {
            current: new Set()
          };
          exports.__subscriberRef = {
            current: null
          };
        }
        function unstable_clear(callback) {
          var prevInteractions = exports.__interactionsRef.current;
          exports.__interactionsRef.current = new Set();
          try {
            return callback();
          } finally {
            exports.__interactionsRef.current = prevInteractions;
          }
        }
        function unstable_getCurrent() {
          {
            return exports.__interactionsRef.current;
          }
        }
        function unstable_getThreadID() {
          return ++threadIDCounter;
        }
        function unstable_trace(name, timestamp, callback) {
          var threadID = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : DEFAULT_THREAD_ID;
          var interaction = {
            __count: 1,
            id: interactionIDCounter++,
            name,
            timestamp
          };
          var prevInteractions = exports.__interactionsRef.current;
          var interactions = new Set(prevInteractions);
          interactions.add(interaction);
          exports.__interactionsRef.current = interactions;
          var subscriber = exports.__subscriberRef.current;
          var returnValue;
          try {
            if (subscriber !== null) {
              subscriber.onInteractionTraced(interaction);
            }
          } finally {
            try {
              if (subscriber !== null) {
                subscriber.onWorkStarted(interactions, threadID);
              }
            } finally {
              try {
                returnValue = callback();
              } finally {
                exports.__interactionsRef.current = prevInteractions;
                try {
                  if (subscriber !== null) {
                    subscriber.onWorkStopped(interactions, threadID);
                  }
                } finally {
                  interaction.__count--;
                  if (subscriber !== null && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  }
                }
              }
            }
          }
          return returnValue;
        }
        function unstable_wrap(callback) {
          var threadID = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_THREAD_ID;
          var wrappedInteractions = exports.__interactionsRef.current;
          var subscriber = exports.__subscriberRef.current;
          if (subscriber !== null) {
            subscriber.onWorkScheduled(wrappedInteractions, threadID);
          }
          wrappedInteractions.forEach(function (interaction) {
            interaction.__count++;
          });
          var hasRun = false;
          function wrapped() {
            var prevInteractions = exports.__interactionsRef.current;
            exports.__interactionsRef.current = wrappedInteractions;
            subscriber = exports.__subscriberRef.current;
            try {
              var returnValue;
              try {
                if (subscriber !== null) {
                  subscriber.onWorkStarted(wrappedInteractions, threadID);
                }
              } finally {
                try {
                  returnValue = callback.apply(void 0, arguments);
                } finally {
                  exports.__interactionsRef.current = prevInteractions;
                  if (subscriber !== null) {
                    subscriber.onWorkStopped(wrappedInteractions, threadID);
                  }
                }
              }
              return returnValue;
            } finally {
              if (!hasRun) {
                hasRun = true;
                wrappedInteractions.forEach(function (interaction) {
                  interaction.__count--;
                  if (subscriber !== null && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  }
                });
              }
            }
          }
          wrapped.cancel = function cancel() {
            subscriber = exports.__subscriberRef.current;
            try {
              if (subscriber !== null) {
                subscriber.onWorkCanceled(wrappedInteractions, threadID);
              }
            } finally {
              wrappedInteractions.forEach(function (interaction) {
                interaction.__count--;
                if (subscriber && interaction.__count === 0) {
                  subscriber.onInteractionScheduledWorkCompleted(interaction);
                }
              });
            }
          };
          return wrapped;
        }
        var subscribers = null;
        {
          subscribers = new Set();
        }
        function unstable_subscribe(subscriber) {
          {
            subscribers.add(subscriber);
            if (subscribers.size === 1) {
              exports.__subscriberRef.current = {
                onInteractionScheduledWorkCompleted,
                onInteractionTraced,
                onWorkCanceled,
                onWorkScheduled,
                onWorkStarted,
                onWorkStopped
              };
            }
          }
        }
        function unstable_unsubscribe(subscriber) {
          {
            subscribers.delete(subscriber);
            if (subscribers.size === 0) {
              exports.__subscriberRef.current = null;
            }
          }
        }
        function onInteractionTraced(interaction) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function (subscriber) {
            try {
              subscriber.onInteractionTraced(interaction);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onInteractionScheduledWorkCompleted(interaction) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function (subscriber) {
            try {
              subscriber.onInteractionScheduledWorkCompleted(interaction);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onWorkScheduled(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function (subscriber) {
            try {
              subscriber.onWorkScheduled(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onWorkStarted(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function (subscriber) {
            try {
              subscriber.onWorkStarted(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onWorkStopped(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function (subscriber) {
            try {
              subscriber.onWorkStopped(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onWorkCanceled(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function (subscriber) {
            try {
              subscriber.onWorkCanceled(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        exports.unstable_clear = unstable_clear;
        exports.unstable_getCurrent = unstable_getCurrent;
        exports.unstable_getThreadID = unstable_getThreadID;
        exports.unstable_subscribe = unstable_subscribe;
        exports.unstable_trace = unstable_trace;
        exports.unstable_unsubscribe = unstable_unsubscribe;
        exports.unstable_wrap = unstable_wrap;
      })();
    }
  });
  // node_modules/scheduler/tracing.js
  var require_tracing = __commonJS((exports, module) => {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_scheduler_tracing_development();
    }
  });
  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS(exports => {
    "use strict";
    if (true) {
      (function () {
        "use strict";
        var _s20 = $RefreshSig$(), _s21 = $RefreshSig$(), _s22 = $RefreshSig$();
        var React2 = require_react();
        var _assign = require_object_assign();
        var Scheduler = require_scheduler();
        var tracing = require_tracing();
        var ReactSharedInternals = React2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function warn(format) {
          {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            printWarning("warn", format, args);
          }
        }
        function error(format) {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format, args);
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function (item) {
              return "" + item;
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        if (!React2) {
          {
            throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
          }
        }
        var FunctionComponent = 0;
        var ClassComponent = 1;
        var IndeterminateComponent = 2;
        var HostRoot = 3;
        var HostPortal = 4;
        var HostComponent = 5;
        var HostText = 6;
        var Fragment = 7;
        var Mode = 8;
        var ContextConsumer = 9;
        var ContextProvider = 10;
        var ForwardRef = 11;
        var Profiler = 12;
        var SuspenseComponent = 13;
        var MemoComponent = 14;
        var SimpleMemoComponent = 15;
        var LazyComponent = 16;
        var IncompleteClassComponent = 17;
        var DehydratedFragment = 18;
        var SuspenseListComponent = 19;
        var FundamentalComponent = 20;
        var ScopeComponent = 21;
        var Block = 22;
        var OffscreenComponent = 23;
        var LegacyHiddenComponent = 24;
        var enableProfilerTimer = true;
        var enableFundamentalAPI = false;
        var enableNewReconciler = false;
        var warnAboutStringRefs = false;
        var allNativeEvents = new Set();
        var registrationNameDependencies = {};
        var possibleRegistrationNames = {};
        function registerTwoPhaseEvent(registrationName, dependencies) {
          registerDirectEvent(registrationName, dependencies);
          registerDirectEvent(registrationName + "Capture", dependencies);
        }
        function registerDirectEvent(registrationName, dependencies) {
          {
            if (registrationNameDependencies[registrationName]) {
              error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
            }
          }
          registrationNameDependencies[registrationName] = dependencies;
          {
            var lowerCasedName = registrationName.toLowerCase();
            possibleRegistrationNames[lowerCasedName] = registrationName;
            if (registrationName === "onDoubleClick") {
              possibleRegistrationNames.ondblclick = registrationName;
            }
          }
          for (var i = 0; i < dependencies.length; i++) {
            allNativeEvents.add(dependencies[i]);
          }
        }
        var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
        var RESERVED = 0;
        var STRING = 1;
        var BOOLEANISH_STRING = 2;
        var BOOLEAN = 3;
        var OVERLOADED_BOOLEAN = 4;
        var NUMERIC = 5;
        var POSITIVE_NUMERIC = 6;
        var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
        var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
        var ROOT_ATTRIBUTE_NAME = "data-reactroot";
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
            return true;
          }
          if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
            return false;
          }
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }
          illegalAttributeNameCache[attributeName] = true;
          {
            error("Invalid attribute name: `%s`", attributeName);
          }
          return false;
        }
        function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null) {
            return propertyInfo.type === RESERVED;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
            return true;
          }
          return false;
        }
        function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null && propertyInfo.type === RESERVED) {
            return false;
          }
          switch (typeof value) {
            case "function":
            case "symbol":
              return true;
            case "boolean":
              {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix2 = name.toLowerCase().slice(0, 5);
                  return prefix2 !== "data-" && prefix2 !== "aria-";
                }
              }
            default:
              return false;
          }
        }
        function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
          if (value === null || typeof value === "undefined") {
            return true;
          }
          if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
            return true;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (propertyInfo !== null) {
            switch (propertyInfo.type) {
              case BOOLEAN:
                return !value;
              case OVERLOADED_BOOLEAN:
                return value === false;
              case NUMERIC:
                return isNaN(value);
              case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
            }
          }
          return false;
        }
        function getPropertyInfo(name) {
          return properties.hasOwnProperty(name) ? properties[name] : null;
        }
        function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
          this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
          this.attributeName = attributeName;
          this.attributeNamespace = attributeNamespace;
          this.mustUseProperty = mustUseProperty;
          this.propertyName = name;
          this.type = type;
          this.sanitizeURL = sanitizeURL2;
          this.removeEmptyString = removeEmptyString;
        }
        var properties = {};
        var reservedProps = ["children", "dangerouslySetInnerHTML", "defaultValue", "defaultChecked", "innerHTML", "suppressContentEditableWarning", "suppressHydrationWarning", "style"];
        reservedProps.forEach(function (name) {
          properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
        });
        [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function (_ref) {
          var name = _ref[0], attributeName = _ref[1];
          properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
        });
        ["contentEditable", "draggable", "spellCheck", "value"].forEach(function (name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
        });
        ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function (name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
        });
        ["allowFullScreen", "async", "autoFocus", "autoPlay", "controls", "default", "defer", "disabled", "disablePictureInPicture", "disableRemotePlayback", "formNoValidate", "hidden", "loop", "noModule", "noValidate", "open", "playsInline", "readOnly", "required", "reversed", "scoped", "seamless", "itemScope"].forEach(function (name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
        });
        ["checked", "multiple", "muted", "selected"].forEach(function (name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
        });
        ["capture", "download"].forEach(function (name) {
          properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
        });
        ["cols", "rows", "size", "span"].forEach(function (name) {
          properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
        });
        ["rowSpan", "start"].forEach(function (name) {
          properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
        });
        var CAMELIZE = /[\-\:]([a-z])/g;
        var capitalize = function (token) {
          return token[1].toUpperCase();
        };
        ["accent-height", "alignment-baseline", "arabic-form", "baseline-shift", "cap-height", "clip-path", "clip-rule", "color-interpolation", "color-interpolation-filters", "color-profile", "color-rendering", "dominant-baseline", "enable-background", "fill-opacity", "fill-rule", "flood-color", "flood-opacity", "font-family", "font-size", "font-size-adjust", "font-stretch", "font-style", "font-variant", "font-weight", "glyph-name", "glyph-orientation-horizontal", "glyph-orientation-vertical", "horiz-adv-x", "horiz-origin-x", "image-rendering", "letter-spacing", "lighting-color", "marker-end", "marker-mid", "marker-start", "overline-position", "overline-thickness", "paint-order", "panose-1", "pointer-events", "rendering-intent", "shape-rendering", "stop-color", "stop-opacity", "strikethrough-position", "strikethrough-thickness", "stroke-dasharray", "stroke-dashoffset", "stroke-linecap", "stroke-linejoin", "stroke-miterlimit", "stroke-opacity", "stroke-width", "text-anchor", "text-decoration", "text-rendering", "underline-position", "underline-thickness", "unicode-bidi", "unicode-range", "units-per-em", "v-alphabetic", "v-hanging", "v-ideographic", "v-mathematical", "vector-effect", "vert-adv-y", "vert-origin-x", "vert-origin-y", "word-spacing", "writing-mode", "xmlns:xlink", "x-height"].forEach(function (attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
        });
        ["xlink:actuate", "xlink:arcrole", "xlink:role", "xlink:show", "xlink:title", "xlink:type"].forEach(function (attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
        });
        ["xml:base", "xml:lang", "xml:space"].forEach(function (attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
        });
        ["tabIndex", "crossOrigin"].forEach(function (attributeName) {
          properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
        });
        var xlinkHref = "xlinkHref";
        properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
        ["src", "href", "action", "formAction"].forEach(function (attributeName) {
          properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
        });
        var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
        var didWarn = false;
        function sanitizeURL(url) {
          {
            if (!didWarn && isJavaScriptProtocol.test(url)) {
              didWarn = true;
              error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
            }
          }
        }
        function getValueForProperty(node, name, expected, propertyInfo) {
          {
            if (propertyInfo.mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              return node[propertyName];
            } else {
              if (propertyInfo.sanitizeURL) {
                sanitizeURL("" + expected);
              }
              var attributeName = propertyInfo.attributeName;
              var stringValue = null;
              if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node.hasAttribute(attributeName)) {
                  var value = node.getAttribute(attributeName);
                  if (value === "") {
                    return true;
                  }
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return value;
                  }
                  if (value === "" + expected) {
                    return expected;
                  }
                  return value;
                }
              } else if (node.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return node.getAttribute(attributeName);
                }
                if (propertyInfo.type === BOOLEAN) {
                  return expected;
                }
                stringValue = node.getAttribute(attributeName);
              }
              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                return stringValue === null ? expected : stringValue;
              } else if (stringValue === "" + expected) {
                return expected;
              } else {
                return stringValue;
              }
            }
          }
        }
        function getValueForAttribute(node, name, expected) {
          {
            if (!isAttributeNameSafe(name)) {
              return;
            }
            if (isOpaqueHydratingObject(expected)) {
              return expected;
            }
            if (!node.hasAttribute(name)) {
              return expected === void 0 ? void 0 : null;
            }
            var value = node.getAttribute(name);
            if (value === "" + expected) {
              return expected;
            }
            return value;
          }
        }
        function setValueForProperty(node, name, value, isCustomComponentTag) {
          var propertyInfo = getPropertyInfo(name);
          if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
            return;
          }
          if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
            value = null;
          }
          if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
              var _attributeName = name;
              if (value === null) {
                node.removeAttribute(_attributeName);
              } else {
                node.setAttribute(_attributeName, "" + value);
              }
            }
            return;
          }
          var mustUseProperty = propertyInfo.mustUseProperty;
          if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
              var type = propertyInfo.type;
              node[propertyName] = type === BOOLEAN ? false : "";
            } else {
              node[propertyName] = value;
            }
            return;
          }
          var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
          if (value === null) {
            node.removeAttribute(attributeName);
          } else {
            var _type = propertyInfo.type;
            var attributeValue;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
              attributeValue = "";
            } else {
              {
                attributeValue = "" + value;
              }
              if (propertyInfo.sanitizeURL) {
                sanitizeURL(attributeValue.toString());
              }
            }
            if (attributeNamespace) {
              node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            } else {
              node.setAttribute(attributeName, attributeValue);
            }
          }
        }
        var REACT_ELEMENT_TYPE = 60103;
        var REACT_PORTAL_TYPE = 60106;
        var REACT_FRAGMENT_TYPE = 60107;
        var REACT_STRICT_MODE_TYPE = 60108;
        var REACT_PROFILER_TYPE = 60114;
        var REACT_PROVIDER_TYPE = 60109;
        var REACT_CONTEXT_TYPE = 60110;
        var REACT_FORWARD_REF_TYPE = 60112;
        var REACT_SUSPENSE_TYPE = 60113;
        var REACT_SUSPENSE_LIST_TYPE = 60120;
        var REACT_MEMO_TYPE = 60115;
        var REACT_LAZY_TYPE = 60116;
        var REACT_BLOCK_TYPE = 60121;
        var REACT_SERVER_BLOCK_TYPE = 60122;
        var REACT_FUNDAMENTAL_TYPE = 60117;
        var REACT_SCOPE_TYPE = 60119;
        var REACT_OPAQUE_ID_TYPE = 60128;
        var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
        var REACT_OFFSCREEN_TYPE = 60130;
        var REACT_LEGACY_HIDDEN_TYPE = 60131;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          REACT_ELEMENT_TYPE = symbolFor("react.element");
          REACT_PORTAL_TYPE = symbolFor("react.portal");
          REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
          REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
          REACT_PROFILER_TYPE = symbolFor("react.profiler");
          REACT_PROVIDER_TYPE = symbolFor("react.provider");
          REACT_CONTEXT_TYPE = symbolFor("react.context");
          REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
          REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
          REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
          REACT_MEMO_TYPE = symbolFor("react.memo");
          REACT_LAZY_TYPE = symbolFor("react.lazy");
          REACT_BLOCK_TYPE = symbolFor("react.block");
          REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
          REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
          REACT_SCOPE_TYPE = symbolFor("react.scope");
          REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
          REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
          REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
          REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
        }
        var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {}
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: _assign({}, props, {
                  value: prevLog
                }),
                info: _assign({}, props, {
                  value: prevInfo
                }),
                warn: _assign({}, props, {
                  value: prevWarn
                }),
                error: _assign({}, props, {
                  value: prevError
                }),
                group: _assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: _assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: _assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function () {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function () {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                c--;
              }
              for (; s >= 1 && c >= 0; (s--, c--)) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeClassComponentFrame(ctor, source, ownerFn) {
          {
            return describeNativeComponentFrame(ctor, true);
          }
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);
              case REACT_LAZY_TYPE:
                {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {}
                }
            }
          }
          return "";
        }
        function describeFiber(fiber) {
          var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
          var source = fiber._debugSource;
          switch (fiber.tag) {
            case HostComponent:
              return describeBuiltInComponentFrame(fiber.type);
            case LazyComponent:
              return describeBuiltInComponentFrame("Lazy");
            case SuspenseComponent:
              return describeBuiltInComponentFrame("Suspense");
            case SuspenseListComponent:
              return describeBuiltInComponentFrame("SuspenseList");
            case FunctionComponent:
            case IndeterminateComponent:
            case SimpleMemoComponent:
              return describeFunctionComponentFrame(fiber.type);
            case ForwardRef:
              return describeFunctionComponentFrame(fiber.type.render);
            case Block:
              return describeFunctionComponentFrame(fiber.type._render);
            case ClassComponent:
              return describeClassComponentFrame(fiber.type);
            default:
              return "";
          }
        }
        function getStackByFiberInDevAndProd(workInProgress2) {
          try {
            var info = "";
            var node = workInProgress2;
            do {
              info += describeFiber(node);
              node = node.return;
            } while (node);
            return info;
          } catch (x) {
            return "\nError generating stack: " + x.message + "\n" + x.stack;
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentName(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                return getComponentName(type.type);
              case REACT_BLOCK_TYPE:
                return getComponentName(type._render);
              case REACT_LAZY_TYPE:
                {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentName(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
            }
          }
          return null;
        }
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var current = null;
        var isRendering = false;
        function getCurrentFiberOwnerNameInDevOrNull() {
          {
            if (current === null) {
              return null;
            }
            var owner = current._debugOwner;
            if (owner !== null && typeof owner !== "undefined") {
              return getComponentName(owner.type);
            }
          }
          return null;
        }
        function getCurrentFiberStackInDev() {
          {
            if (current === null) {
              return "";
            }
            return getStackByFiberInDevAndProd(current);
          }
        }
        function resetCurrentFiber() {
          {
            ReactDebugCurrentFrame.getCurrentStack = null;
            current = null;
            isRendering = false;
          }
        }
        function setCurrentFiber(fiber) {
          {
            ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
            current = fiber;
            isRendering = false;
          }
        }
        function setIsRendering(rendering) {
          {
            isRendering = rendering;
          }
        }
        function getIsRendering() {
          {
            return isRendering;
          }
        }
        function toString(value) {
          return "" + value;
        }
        function getToStringValue(value) {
          switch (typeof value) {
            case "boolean":
            case "number":
            case "object":
            case "string":
            case "undefined":
              return value;
            default:
              return "";
          }
        }
        var hasReadOnlyValue = {
          button: true,
          checkbox: true,
          image: true,
          hidden: true,
          radio: true,
          reset: true,
          submit: true
        };
        function checkControlledValueProps(tagName, props) {
          {
            if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
              error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
            }
            if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
              error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
            }
          }
        }
        function isCheckable(elem) {
          var type = elem.type;
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
        }
        function getTracker(node) {
          return node._valueTracker;
        }
        function detachTracker(node) {
          node._valueTracker = null;
        }
        function getValueFromNode(node) {
          var value = "";
          if (!node) {
            return value;
          }
          if (isCheckable(node)) {
            value = node.checked ? "true" : "false";
          } else {
            value = node.value;
          }
          return value;
        }
        function trackValueOnNode(node) {
          var valueField = isCheckable(node) ? "checked" : "value";
          var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
          var currentValue = "" + node[valueField];
          if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
            return;
          }
          var get2 = descriptor.get, set2 = descriptor.set;
          Object.defineProperty(node, valueField, {
            configurable: true,
            get: function () {
              return get2.call(this);
            },
            set: function (value) {
              currentValue = "" + value;
              set2.call(this, value);
            }
          });
          Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
          });
          var tracker = {
            getValue: function () {
              return currentValue;
            },
            setValue: function (value) {
              currentValue = "" + value;
            },
            stopTracking: function () {
              detachTracker(node);
              delete node[valueField];
            }
          };
          return tracker;
        }
        function track(node) {
          if (getTracker(node)) {
            return;
          }
          node._valueTracker = trackValueOnNode(node);
        }
        function updateValueIfChanged(node) {
          if (!node) {
            return false;
          }
          var tracker = getTracker(node);
          if (!tracker) {
            return true;
          }
          var lastValue = tracker.getValue();
          var nextValue = getValueFromNode(node);
          if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
          }
          return false;
        }
        function getActiveElement(doc) {
          doc = doc || (typeof document !== "undefined" ? document : void 0);
          if (typeof doc === "undefined") {
            return null;
          }
          try {
            return doc.activeElement || doc.body;
          } catch (e) {
            return doc.body;
          }
        }
        var didWarnValueDefaultValue = false;
        var didWarnCheckedDefaultChecked = false;
        var didWarnControlledToUncontrolled = false;
        var didWarnUncontrolledToControlled = false;
        function isControlled(props) {
          var usesChecked = props.type === "checkbox" || props.type === "radio";
          return usesChecked ? props.checked != null : props.value != null;
        }
        function getHostProps(element, props) {
          var node = element;
          var checked = props.checked;
          var hostProps = _assign({}, props, {
            defaultChecked: void 0,
            defaultValue: void 0,
            value: void 0,
            checked: checked != null ? checked : node._wrapperState.initialChecked
          });
          return hostProps;
        }
        function initWrapperState(element, props) {
          {
            checkControlledValueProps("input", props);
            if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
              error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnCheckedDefaultChecked = true;
            }
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
              error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnValueDefaultValue = true;
            }
          }
          var node = element;
          var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
          node._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props)
          };
        }
        function updateChecked(element, props) {
          var node = element;
          var checked = props.checked;
          if (checked != null) {
            setValueForProperty(node, "checked", checked, false);
          }
        }
        function updateWrapper(element, props) {
          var node = element;
          {
            var controlled = isControlled(props);
            if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
              error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
              didWarnUncontrolledToControlled = true;
            }
            if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
              error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
              didWarnControlledToUncontrolled = true;
            }
          }
          updateChecked(element, props);
          var value = getToStringValue(props.value);
          var type = props.type;
          if (value != null) {
            if (type === "number") {
              if (value === 0 && node.value === "" || node.value != value) {
                node.value = toString(value);
              }
            } else if (node.value !== toString(value)) {
              node.value = toString(value);
            }
          } else if (type === "submit" || type === "reset") {
            node.removeAttribute("value");
            return;
          }
          {
            if (props.hasOwnProperty("value")) {
              setDefaultValue(node, props.type, value);
            } else if (props.hasOwnProperty("defaultValue")) {
              setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
            }
          }
          {
            if (props.checked == null && props.defaultChecked != null) {
              node.defaultChecked = !!props.defaultChecked;
            }
          }
        }
        function postMountWrapper(element, props, isHydrating2) {
          var node = element;
          if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
            var type = props.type;
            var isButton = type === "submit" || type === "reset";
            if (isButton && (props.value === void 0 || props.value === null)) {
              return;
            }
            var initialValue = toString(node._wrapperState.initialValue);
            if (!isHydrating2) {
              {
                if (initialValue !== node.value) {
                  node.value = initialValue;
                }
              }
            }
            {
              node.defaultValue = initialValue;
            }
          }
          var name = node.name;
          if (name !== "") {
            node.name = "";
          }
          {
            node.defaultChecked = !node.defaultChecked;
            node.defaultChecked = !!node._wrapperState.initialChecked;
          }
          if (name !== "") {
            node.name = name;
          }
        }
        function restoreControlledState(element, props) {
          var node = element;
          updateWrapper(node, props);
          updateNamedCousins(node, props);
        }
        function updateNamedCousins(rootNode, props) {
          var name = props.name;
          if (props.type === "radio" && name != null) {
            var queryRoot = rootNode;
            while (queryRoot.parentNode) {
              queryRoot = queryRoot.parentNode;
            }
            var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
            for (var i = 0; i < group.length; i++) {
              var otherNode = group[i];
              if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                continue;
              }
              var otherProps = getFiberCurrentPropsFromNode(otherNode);
              if (!otherProps) {
                {
                  throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
              }
              updateValueIfChanged(otherNode);
              updateWrapper(otherNode, otherProps);
            }
          }
        }
        function setDefaultValue(node, type, value) {
          if (type !== "number" || getActiveElement(node.ownerDocument) !== node) {
            if (value == null) {
              node.defaultValue = toString(node._wrapperState.initialValue);
            } else if (node.defaultValue !== toString(value)) {
              node.defaultValue = toString(value);
            }
          }
        }
        var didWarnSelectedSetOnOption = false;
        var didWarnInvalidChild = false;
        function flattenChildren(children) {
          var content = "";
          React2.Children.forEach(children, function (child) {
            if (child == null) {
              return;
            }
            content += child;
          });
          return content;
        }
        function validateProps(element, props) {
          {
            if (typeof props.children === "object" && props.children !== null) {
              React2.Children.forEach(props.children, function (child) {
                if (child == null) {
                  return;
                }
                if (typeof child === "string" || typeof child === "number") {
                  return;
                }
                if (typeof child.type !== "string") {
                  return;
                }
                if (!didWarnInvalidChild) {
                  didWarnInvalidChild = true;
                  error("Only strings and numbers are supported as <option> children.");
                }
              });
            }
            if (props.selected != null && !didWarnSelectedSetOnOption) {
              error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
              didWarnSelectedSetOnOption = true;
            }
          }
        }
        function postMountWrapper$1(element, props) {
          if (props.value != null) {
            element.setAttribute("value", toString(getToStringValue(props.value)));
          }
        }
        function getHostProps$1(element, props) {
          var hostProps = _assign({
            children: void 0
          }, props);
          var content = flattenChildren(props.children);
          if (content) {
            hostProps.children = content;
          }
          return hostProps;
        }
        var didWarnValueDefaultValue$1;
        {
          didWarnValueDefaultValue$1 = false;
        }
        function getDeclarationErrorAddendum() {
          var ownerName = getCurrentFiberOwnerNameInDevOrNull();
          if (ownerName) {
            return "\n\nCheck the render method of `" + ownerName + "`.";
          }
          return "";
        }
        var valuePropNames = ["value", "defaultValue"];
        function checkSelectPropTypes(props) {
          {
            checkControlledValueProps("select", props);
            for (var i = 0; i < valuePropNames.length; i++) {
              var propName = valuePropNames[i];
              if (props[propName] == null) {
                continue;
              }
              var isArray2 = Array.isArray(props[propName]);
              if (props.multiple && !isArray2) {
                error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
              } else if (!props.multiple && isArray2) {
                error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
              }
            }
          }
        }
        function updateOptions(node, multiple, propValue, setDefaultSelected) {
          var options2 = node.options;
          if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {};
            for (var i = 0; i < selectedValues.length; i++) {
              selectedValue["$" + selectedValues[i]] = true;
            }
            for (var _i = 0; _i < options2.length; _i++) {
              var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
              if (options2[_i].selected !== selected) {
                options2[_i].selected = selected;
              }
              if (selected && setDefaultSelected) {
                options2[_i].defaultSelected = true;
              }
            }
          } else {
            var _selectedValue = toString(getToStringValue(propValue));
            var defaultSelected = null;
            for (var _i2 = 0; _i2 < options2.length; _i2++) {
              if (options2[_i2].value === _selectedValue) {
                options2[_i2].selected = true;
                if (setDefaultSelected) {
                  options2[_i2].defaultSelected = true;
                }
                return;
              }
              if (defaultSelected === null && !options2[_i2].disabled) {
                defaultSelected = options2[_i2];
              }
            }
            if (defaultSelected !== null) {
              defaultSelected.selected = true;
            }
          }
        }
        function getHostProps$2(element, props) {
          return _assign({}, props, {
            value: void 0
          });
        }
        function initWrapperState$1(element, props) {
          var node = element;
          {
            checkSelectPropTypes(props);
          }
          node._wrapperState = {
            wasMultiple: !!props.multiple
          };
          {
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
              error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnValueDefaultValue$1 = true;
            }
          }
        }
        function postMountWrapper$2(element, props) {
          var node = element;
          node.multiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (props.defaultValue != null) {
            updateOptions(node, !!props.multiple, props.defaultValue, true);
          }
        }
        function postUpdateWrapper(element, props) {
          var node = element;
          var wasMultiple = node._wrapperState.wasMultiple;
          node._wrapperState.wasMultiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (wasMultiple !== !!props.multiple) {
            if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            } else {
              updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
            }
          }
        }
        function restoreControlledState$1(element, props) {
          var node = element;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          }
        }
        var didWarnValDefaultVal = false;
        function getHostProps$3(element, props) {
          var node = element;
          if (!(props.dangerouslySetInnerHTML == null)) {
            {
              throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
          }
          var hostProps = _assign({}, props, {
            value: void 0,
            defaultValue: void 0,
            children: toString(node._wrapperState.initialValue)
          });
          return hostProps;
        }
        function initWrapperState$2(element, props) {
          var node = element;
          {
            checkControlledValueProps("textarea", props);
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
              error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
              didWarnValDefaultVal = true;
            }
          }
          var initialValue = props.value;
          if (initialValue == null) {
            var children = props.children, defaultValue = props.defaultValue;
            if (children != null) {
              {
                error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
              }
              {
                if (!(defaultValue == null)) {
                  {
                    throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                }
                if (Array.isArray(children)) {
                  if (!(children.length <= 1)) {
                    {
                      throw Error("<textarea> can only have at most one child.");
                    }
                  }
                  children = children[0];
                }
                defaultValue = children;
              }
            }
            if (defaultValue == null) {
              defaultValue = "";
            }
            initialValue = defaultValue;
          }
          node._wrapperState = {
            initialValue: getToStringValue(initialValue)
          };
        }
        function updateWrapper$1(element, props) {
          var node = element;
          var value = getToStringValue(props.value);
          var defaultValue = getToStringValue(props.defaultValue);
          if (value != null) {
            var newValue = toString(value);
            if (newValue !== node.value) {
              node.value = newValue;
            }
            if (props.defaultValue == null && node.defaultValue !== newValue) {
              node.defaultValue = newValue;
            }
          }
          if (defaultValue != null) {
            node.defaultValue = toString(defaultValue);
          }
        }
        function postMountWrapper$3(element, props) {
          var node = element;
          var textContent = node.textContent;
          if (textContent === node._wrapperState.initialValue) {
            if (textContent !== "" && textContent !== null) {
              node.value = textContent;
            }
          }
        }
        function restoreControlledState$2(element, props) {
          updateWrapper$1(element, props);
        }
        var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
        var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
        var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
        var Namespaces = {
          html: HTML_NAMESPACE,
          mathml: MATH_NAMESPACE,
          svg: SVG_NAMESPACE
        };
        function getIntrinsicNamespace(type) {
          switch (type) {
            case "svg":
              return SVG_NAMESPACE;
            case "math":
              return MATH_NAMESPACE;
            default:
              return HTML_NAMESPACE;
          }
        }
        function getChildNamespace(parentNamespace, type) {
          if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
            return getIntrinsicNamespace(type);
          }
          if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
            return HTML_NAMESPACE;
          }
          return parentNamespace;
        }
        var createMicrosoftUnsafeLocalFunction = function (func) {
          if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
            return function (arg0, arg1, arg2, arg3) {
              MSApp.execUnsafeLocalFunction(function () {
                return func(arg0, arg1, arg2, arg3);
              });
            };
          } else {
            return func;
          }
        };
        var reusableSVGContainer;
        var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
          if (node.namespaceURI === Namespaces.svg) {
            if (!(("innerHTML" in node))) {
              reusableSVGContainer = reusableSVGContainer || document.createElement("div");
              reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
              var svgNode = reusableSVGContainer.firstChild;
              while (node.firstChild) {
                node.removeChild(node.firstChild);
              }
              while (svgNode.firstChild) {
                node.appendChild(svgNode.firstChild);
              }
              return;
            }
          }
          node.innerHTML = html;
        });
        var ELEMENT_NODE = 1;
        var TEXT_NODE = 3;
        var COMMENT_NODE = 8;
        var DOCUMENT_NODE = 9;
        var DOCUMENT_FRAGMENT_NODE = 11;
        var setTextContent = function (node, text) {
          if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
              firstChild.nodeValue = text;
              return;
            }
          }
          node.textContent = text;
        };
        var shorthandToLonghand = {
          animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
          background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
          backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
          border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
          borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
          borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
          borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
          borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
          borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
          borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
          borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
          borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
          borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
          borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
          borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
          columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
          columns: ["columnCount", "columnWidth"],
          flex: ["flexBasis", "flexGrow", "flexShrink"],
          flexFlow: ["flexDirection", "flexWrap"],
          font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
          fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
          gap: ["columnGap", "rowGap"],
          grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
          gridColumn: ["gridColumnEnd", "gridColumnStart"],
          gridColumnGap: ["columnGap"],
          gridGap: ["columnGap", "rowGap"],
          gridRow: ["gridRowEnd", "gridRowStart"],
          gridRowGap: ["rowGap"],
          gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
          margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
          marker: ["markerEnd", "markerMid", "markerStart"],
          mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
          maskPosition: ["maskPositionX", "maskPositionY"],
          outline: ["outlineColor", "outlineStyle", "outlineWidth"],
          overflow: ["overflowX", "overflowY"],
          padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
          placeContent: ["alignContent", "justifyContent"],
          placeItems: ["alignItems", "justifyItems"],
          placeSelf: ["alignSelf", "justifySelf"],
          textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
          textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
          transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
          wordWrap: ["overflowWrap"]
        };
        var isUnitlessNumber = {
          animationIterationCount: true,
          borderImageOutset: true,
          borderImageSlice: true,
          borderImageWidth: true,
          boxFlex: true,
          boxFlexGroup: true,
          boxOrdinalGroup: true,
          columnCount: true,
          columns: true,
          flex: true,
          flexGrow: true,
          flexPositive: true,
          flexShrink: true,
          flexNegative: true,
          flexOrder: true,
          gridArea: true,
          gridRow: true,
          gridRowEnd: true,
          gridRowSpan: true,
          gridRowStart: true,
          gridColumn: true,
          gridColumnEnd: true,
          gridColumnSpan: true,
          gridColumnStart: true,
          fontWeight: true,
          lineClamp: true,
          lineHeight: true,
          opacity: true,
          order: true,
          orphans: true,
          tabSize: true,
          widows: true,
          zIndex: true,
          zoom: true,
          fillOpacity: true,
          floodOpacity: true,
          stopOpacity: true,
          strokeDasharray: true,
          strokeDashoffset: true,
          strokeMiterlimit: true,
          strokeOpacity: true,
          strokeWidth: true
        };
        function prefixKey(prefix2, key) {
          return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
        }
        var prefixes = ["Webkit", "ms", "Moz", "O"];
        Object.keys(isUnitlessNumber).forEach(function (prop) {
          prefixes.forEach(function (prefix2) {
            isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
          });
        });
        function dangerousStyleValue(name, value, isCustomProperty) {
          var isEmpty = value == null || typeof value === "boolean" || value === "";
          if (isEmpty) {
            return "";
          }
          if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
            return value + "px";
          }
          return ("" + value).trim();
        }
        var uppercasePattern = /([A-Z])/g;
        var msPattern = /^ms-/;
        function hyphenateStyleName(name) {
          return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
        }
        var warnValidStyle = function () {};
        {
          var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
          var msPattern$1 = /^-ms-/;
          var hyphenPattern = /-(.)/g;
          var badStyleValueWithSemicolonPattern = /;\s*$/;
          var warnedStyleNames = {};
          var warnedStyleValues = {};
          var warnedForNaNValue = false;
          var warnedForInfinityValue = false;
          var camelize = function (string) {
            return string.replace(hyphenPattern, function (_, character) {
              return character.toUpperCase();
            });
          };
          var warnHyphenatedStyleName = function (name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported style property %s. Did you mean %s?", name, camelize(name.replace(msPattern$1, "ms-")));
          };
          var warnBadVendoredStyleName = function (name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
          };
          var warnStyleValueWithSemicolon = function (name, value) {
            if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
              return;
            }
            warnedStyleValues[value] = true;
            error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
          };
          var warnStyleValueIsNaN = function (name, value) {
            if (warnedForNaNValue) {
              return;
            }
            warnedForNaNValue = true;
            error("`NaN` is an invalid value for the `%s` css style property.", name);
          };
          var warnStyleValueIsInfinity = function (name, value) {
            if (warnedForInfinityValue) {
              return;
            }
            warnedForInfinityValue = true;
            error("`Infinity` is an invalid value for the `%s` css style property.", name);
          };
          warnValidStyle = function (name, value) {
            if (name.indexOf("-") > -1) {
              warnHyphenatedStyleName(name);
            } else if (badVendoredStyleNamePattern.test(name)) {
              warnBadVendoredStyleName(name);
            } else if (badStyleValueWithSemicolonPattern.test(value)) {
              warnStyleValueWithSemicolon(name, value);
            }
            if (typeof value === "number") {
              if (isNaN(value)) {
                warnStyleValueIsNaN(name, value);
              } else if (!isFinite(value)) {
                warnStyleValueIsInfinity(name, value);
              }
            }
          };
        }
        var warnValidStyle$1 = warnValidStyle;
        function createDangerousStringForStyles(styles) {
          {
            var serialized = "";
            var delimiter = "";
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var styleValue = styles[styleName];
              if (styleValue != null) {
                var isCustomProperty = styleName.indexOf("--") === 0;
                serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                delimiter = ";";
              }
            }
            return serialized || null;
          }
        }
        function setValueForStyles(node, styles) {
          var style2 = node.style;
          for (var styleName in styles) {
            if (!styles.hasOwnProperty(styleName)) {
              continue;
            }
            var isCustomProperty = styleName.indexOf("--") === 0;
            {
              if (!isCustomProperty) {
                warnValidStyle$1(styleName, styles[styleName]);
              }
            }
            var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
            if (styleName === "float") {
              styleName = "cssFloat";
            }
            if (isCustomProperty) {
              style2.setProperty(styleName, styleValue);
            } else {
              style2[styleName] = styleValue;
            }
          }
        }
        function isValueEmpty(value) {
          return value == null || typeof value === "boolean" || value === "";
        }
        function expandShorthandMap(styles) {
          var expanded = {};
          for (var key in styles) {
            var longhands = shorthandToLonghand[key] || [key];
            for (var i = 0; i < longhands.length; i++) {
              expanded[longhands[i]] = key;
            }
          }
          return expanded;
        }
        function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
          {
            if (!nextStyles) {
              return;
            }
            var expandedUpdates = expandShorthandMap(styleUpdates);
            var expandedStyles = expandShorthandMap(nextStyles);
            var warnedAbout = {};
            for (var key in expandedUpdates) {
              var originalKey = expandedUpdates[key];
              var correctOriginalKey = expandedStyles[key];
              if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + "," + correctOriginalKey;
                if (warnedAbout[warningKey]) {
                  continue;
                }
                warnedAbout[warningKey] = true;
                error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
              }
            }
          }
        }
        var omittedCloseTags = {
          area: true,
          base: true,
          br: true,
          col: true,
          embed: true,
          hr: true,
          img: true,
          input: true,
          keygen: true,
          link: true,
          meta: true,
          param: true,
          source: true,
          track: true,
          wbr: true
        };
        var voidElementTags = _assign({
          menuitem: true
        }, omittedCloseTags);
        var HTML = "__html";
        function assertValidProps(tag, props) {
          if (!props) {
            return;
          }
          if (voidElementTags[tag]) {
            if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
              {
                throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
          }
          if (props.dangerouslySetInnerHTML != null) {
            if (!(props.children == null)) {
              {
                throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
            }
            if (!(typeof props.dangerouslySetInnerHTML === "object" && (HTML in props.dangerouslySetInnerHTML))) {
              {
                throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
          }
          {
            if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
              error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
            }
          }
          if (!(props.style == null || typeof props.style === "object")) {
            {
              throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
        }
        function isCustomComponent(tagName, props) {
          if (tagName.indexOf("-") === -1) {
            return typeof props.is === "string";
          }
          switch (tagName) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        var possibleStandardNames = {
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          disableremoteplayback: "disableRemotePlayback",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          enterkeyhint: "enterKeyHint",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        };
        var ariaProperties = {
          "aria-current": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          "aria-hidden": 0,
          "aria-invalid": 0,
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        };
        var warnedProperties = {};
        var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
        function validateProperty(tagName, name) {
          {
            if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
              return true;
            }
            if (rARIACamel.test(name)) {
              var ariaName = "aria-" + name.slice(4).toLowerCase();
              var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
              if (correctName == null) {
                error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                warnedProperties[name] = true;
                return true;
              }
              if (name !== correctName) {
                error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                warnedProperties[name] = true;
                return true;
              }
            }
            if (rARIA.test(name)) {
              var lowerCasedName = name.toLowerCase();
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
              if (standardName == null) {
                warnedProperties[name] = true;
                return false;
              }
              if (name !== standardName) {
                error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties[name] = true;
                return true;
              }
            }
          }
          return true;
        }
        function warnInvalidARIAProps(type, props) {
          {
            var invalidProps = [];
            for (var key in props) {
              var isValid = validateProperty(type, key);
              if (!isValid) {
                invalidProps.push(key);
              }
            }
            var unknownPropString = invalidProps.map(function (prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (invalidProps.length === 1) {
              error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            } else if (invalidProps.length > 1) {
              error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            }
          }
        }
        function validateProperties(type, props) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnInvalidARIAProps(type, props);
        }
        var didWarnValueNull = false;
        function validateProperties$1(type, props) {
          {
            if (type !== "input" && type !== "textarea" && type !== "select") {
              return;
            }
            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;
              if (type === "select" && props.multiple) {
                error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
              } else {
                error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
              }
            }
          }
        }
        var validateProperty$1 = function () {};
        {
          var warnedProperties$1 = {};
          var _hasOwnProperty = Object.prototype.hasOwnProperty;
          var EVENT_NAME_REGEX = /^on./;
          var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
          var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          validateProperty$1 = function (tagName, name, value, eventRegistry) {
            if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
              return true;
            }
            var lowerCasedName = name.toLowerCase();
            if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
              error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (eventRegistry != null) {
              var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
              if (registrationNameDependencies2.hasOwnProperty(name)) {
                return true;
              }
              var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
              if (registrationName != null) {
                error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (EVENT_NAME_REGEX.test(name)) {
                error("Unknown event handler property `%s`. It will be ignored.", name);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name)) {
              if (INVALID_EVENT_NAME_REGEX.test(name)) {
                error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
              return true;
            }
            if (lowerCasedName === "innerhtml") {
              error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "aria") {
              error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
              error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "number" && isNaN(value)) {
              error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
              warnedProperties$1[name] = true;
              return true;
            }
            var propertyInfo = getPropertyInfo(name);
            var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];
              if (standardName !== name) {
                error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (!isReserved && name !== lowerCasedName) {
              error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              if (value) {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
              } else {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (isReserved) {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              warnedProperties$1[name] = true;
              return false;
            }
            if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
              error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
              warnedProperties$1[name] = true;
              return true;
            }
            return true;
          };
        }
        var warnUnknownProperties = function (type, props, eventRegistry) {
          {
            var unknownProps = [];
            for (var key in props) {
              var isValid = validateProperty$1(type, key, props[key], eventRegistry);
              if (!isValid) {
                unknownProps.push(key);
              }
            }
            var unknownPropString = unknownProps.map(function (prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (unknownProps.length === 1) {
              error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            } else if (unknownProps.length > 1) {
              error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            }
          }
        };
        function validateProperties$2(type, props, eventRegistry) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnUnknownProperties(type, props, eventRegistry);
        }
        var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
        var IS_NON_DELEGATED = 1 << 1;
        var IS_CAPTURE_PHASE = 1 << 2;
        var IS_REPLAYED = 1 << 4;
        var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
        function getEventTarget(nativeEvent) {
          var target = nativeEvent.target || nativeEvent.srcElement || window;
          if (target.correspondingUseElement) {
            target = target.correspondingUseElement;
          }
          return target.nodeType === TEXT_NODE ? target.parentNode : target;
        }
        var restoreImpl = null;
        var restoreTarget = null;
        var restoreQueue = null;
        function restoreStateOfTarget(target) {
          var internalInstance = getInstanceFromNode(target);
          if (!internalInstance) {
            return;
          }
          if (!(typeof restoreImpl === "function")) {
            {
              throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var stateNode = internalInstance.stateNode;
          if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
          }
        }
        function setRestoreImplementation(impl) {
          restoreImpl = impl;
        }
        function enqueueStateRestore(target) {
          if (restoreTarget) {
            if (restoreQueue) {
              restoreQueue.push(target);
            } else {
              restoreQueue = [target];
            }
          } else {
            restoreTarget = target;
          }
        }
        function needsStateRestore() {
          return restoreTarget !== null || restoreQueue !== null;
        }
        function restoreStateIfNeeded() {
          if (!restoreTarget) {
            return;
          }
          var target = restoreTarget;
          var queuedTargets = restoreQueue;
          restoreTarget = null;
          restoreQueue = null;
          restoreStateOfTarget(target);
          if (queuedTargets) {
            for (var i = 0; i < queuedTargets.length; i++) {
              restoreStateOfTarget(queuedTargets[i]);
            }
          }
        }
        var batchedUpdatesImpl = function (fn, bookkeeping) {
          return fn(bookkeeping);
        };
        var discreteUpdatesImpl = function (fn, a, b, c, d) {
          return fn(a, b, c, d);
        };
        var flushDiscreteUpdatesImpl = function () {};
        var batchedEventUpdatesImpl = batchedUpdatesImpl;
        var isInsideEventHandler = false;
        var isBatchingEventUpdates = false;
        function finishEventHandler() {
          var controlledComponentsHavePendingUpdates = needsStateRestore();
          if (controlledComponentsHavePendingUpdates) {
            flushDiscreteUpdatesImpl();
            restoreStateIfNeeded();
          }
        }
        function batchedUpdates(fn, bookkeeping) {
          if (isInsideEventHandler) {
            return fn(bookkeeping);
          }
          isInsideEventHandler = true;
          try {
            return batchedUpdatesImpl(fn, bookkeeping);
          } finally {
            isInsideEventHandler = false;
            finishEventHandler();
          }
        }
        function batchedEventUpdates(fn, a, b) {
          if (isBatchingEventUpdates) {
            return fn(a, b);
          }
          isBatchingEventUpdates = true;
          try {
            return batchedEventUpdatesImpl(fn, a, b);
          } finally {
            isBatchingEventUpdates = false;
            finishEventHandler();
          }
        }
        function discreteUpdates(fn, a, b, c, d) {
          var prevIsInsideEventHandler = isInsideEventHandler;
          isInsideEventHandler = true;
          try {
            return discreteUpdatesImpl(fn, a, b, c, d);
          } finally {
            isInsideEventHandler = prevIsInsideEventHandler;
            if (!isInsideEventHandler) {
              finishEventHandler();
            }
          }
        }
        function flushDiscreteUpdatesIfNeeded(timeStamp) {
          {
            if (!isInsideEventHandler) {
              flushDiscreteUpdatesImpl();
            }
          }
        }
        function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
          batchedUpdatesImpl = _batchedUpdatesImpl;
          discreteUpdatesImpl = _discreteUpdatesImpl;
          flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
          batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
        }
        function isInteractive(tag) {
          return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
        }
        function shouldPreventMouseEvent(name, type, props) {
          switch (name) {
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
              return !!(props.disabled && isInteractive(type));
            default:
              return false;
          }
        }
        function getListener(inst, registrationName) {
          var stateNode = inst.stateNode;
          if (stateNode === null) {
            return null;
          }
          var props = getFiberCurrentPropsFromNode(stateNode);
          if (props === null) {
            return null;
          }
          var listener = props[registrationName];
          if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
            return null;
          }
          if (!(!listener || typeof listener === "function")) {
            {
              throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
          }
          return listener;
        }
        var passiveBrowserEventsSupported = false;
        if (canUseDOM) {
          try {
            var options = {};
            Object.defineProperty(options, "passive", {
              get: function () {
                passiveBrowserEventsSupported = true;
              }
            });
            window.addEventListener("test", options, options);
            window.removeEventListener("test", options, options);
          } catch (e) {
            passiveBrowserEventsSupported = false;
          }
        }
        function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          try {
            func.apply(context, funcArgs);
          } catch (error2) {
            this.onError(error2);
          }
        }
        var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
        {
          if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
            var fakeNode = document.createElement("react");
            invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
              if (!(typeof document !== "undefined")) {
                {
                  throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
              }
              var evt = document.createEvent("Event");
              var didCall = false;
              var didError = true;
              var windowEvent = window.event;
              var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
              function restoreAfterDispatch() {
                fakeNode.removeEventListener(evtType, callCallback2, false);
                if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                  window.event = windowEvent;
                }
              }
              var funcArgs = Array.prototype.slice.call(arguments, 3);
              function callCallback2() {
                didCall = true;
                restoreAfterDispatch();
                func.apply(context, funcArgs);
                didError = false;
              }
              var error2;
              var didSetError = false;
              var isCrossOriginError = false;
              function handleWindowError(event) {
                error2 = event.error;
                didSetError = true;
                if (error2 === null && event.colno === 0 && event.lineno === 0) {
                  isCrossOriginError = true;
                }
                if (event.defaultPrevented) {
                  if (error2 != null && typeof error2 === "object") {
                    try {
                      error2._suppressLogging = true;
                    } catch (inner) {}
                  }
                }
              }
              var evtType = "react-" + (name ? name : "invokeguardedcallback");
              window.addEventListener("error", handleWindowError);
              fakeNode.addEventListener(evtType, callCallback2, false);
              evt.initEvent(evtType, false, false);
              fakeNode.dispatchEvent(evt);
              if (windowEventDescriptor) {
                Object.defineProperty(window, "event", windowEventDescriptor);
              }
              if (didCall && didError) {
                if (!didSetError) {
                  error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                } else if (isCrossOriginError) {
                  error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                }
                this.onError(error2);
              }
              window.removeEventListener("error", handleWindowError);
              if (!didCall) {
                restoreAfterDispatch();
                return invokeGuardedCallbackProd.apply(this, arguments);
              }
            };
          }
        }
        var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
        var hasError = false;
        var caughtError = null;
        var hasRethrowError = false;
        var rethrowError = null;
        var reporter = {
          onError: function (error2) {
            hasError = true;
            caughtError = error2;
          }
        };
        function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
          hasError = false;
          caughtError = null;
          invokeGuardedCallbackImpl$1.apply(reporter, arguments);
        }
        function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
          invokeGuardedCallback.apply(this, arguments);
          if (hasError) {
            var error2 = clearCaughtError();
            if (!hasRethrowError) {
              hasRethrowError = true;
              rethrowError = error2;
            }
          }
        }
        function rethrowCaughtError() {
          if (hasRethrowError) {
            var error2 = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error2;
          }
        }
        function hasCaughtError() {
          return hasError;
        }
        function clearCaughtError() {
          if (hasError) {
            var error2 = caughtError;
            hasError = false;
            caughtError = null;
            return error2;
          } else {
            {
              {
                throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
        }
        function get(key) {
          return key._reactInternals;
        }
        function has(key) {
          return key._reactInternals !== void 0;
        }
        function set(key, value) {
          key._reactInternals = value;
        }
        var NoFlags = 0;
        var PerformedWork = 1;
        var Placement = 2;
        var Update = 4;
        var PlacementAndUpdate = 6;
        var Deletion = 8;
        var ContentReset = 16;
        var Callback = 32;
        var DidCapture = 64;
        var Ref = 128;
        var Snapshot = 256;
        var Passive = 512;
        var PassiveUnmountPendingDev = 8192;
        var Hydrating = 1024;
        var HydratingAndUpdate = 1028;
        var LifecycleEffectMask = 932;
        var HostEffectMask = 2047;
        var Incomplete = 2048;
        var ShouldCapture = 4096;
        var ForceUpdateForLegacySuspense = 16384;
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        function getNearestMountedFiber(fiber) {
          var node = fiber;
          var nearestMounted = fiber;
          if (!fiber.alternate) {
            var nextNode = node;
            do {
              node = nextNode;
              if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                nearestMounted = node.return;
              }
              nextNode = node.return;
            } while (nextNode);
          } else {
            while (node.return) {
              node = node.return;
            }
          }
          if (node.tag === HostRoot) {
            return nearestMounted;
          }
          return null;
        }
        function getSuspenseInstanceFromFiber(fiber) {
          if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
              var current2 = fiber.alternate;
              if (current2 !== null) {
                suspenseState = current2.memoizedState;
              }
            }
            if (suspenseState !== null) {
              return suspenseState.dehydrated;
            }
          }
          return null;
        }
        function getContainerFromFiber(fiber) {
          return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
        }
        function isFiberMounted(fiber) {
          return getNearestMountedFiber(fiber) === fiber;
        }
        function isMounted(component) {
          {
            var owner = ReactCurrentOwner.current;
            if (owner !== null && owner.tag === ClassComponent) {
              var ownerFiber = owner;
              var instance = ownerFiber.stateNode;
              if (!instance._warnedAboutRefsInRender) {
                error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || "A component");
              }
              instance._warnedAboutRefsInRender = true;
            }
          }
          var fiber = get(component);
          if (!fiber) {
            return false;
          }
          return getNearestMountedFiber(fiber) === fiber;
        }
        function assertIsMounted(fiber) {
          if (!(getNearestMountedFiber(fiber) === fiber)) {
            {
              throw Error("Unable to find node on an unmounted component.");
            }
          }
        }
        function findCurrentFiberUsingSlowPath(fiber) {
          var alternate = fiber.alternate;
          if (!alternate) {
            var nearestMounted = getNearestMountedFiber(fiber);
            if (!(nearestMounted !== null)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
            if (nearestMounted !== fiber) {
              return null;
            }
            return fiber;
          }
          var a = fiber;
          var b = alternate;
          while (true) {
            var parentA = a.return;
            if (parentA === null) {
              break;
            }
            var parentB = parentA.alternate;
            if (parentB === null) {
              var nextParent = parentA.return;
              if (nextParent !== null) {
                a = b = nextParent;
                continue;
              }
              break;
            }
            if (parentA.child === parentB.child) {
              var child = parentA.child;
              while (child) {
                if (child === a) {
                  assertIsMounted(parentA);
                  return fiber;
                }
                if (child === b) {
                  assertIsMounted(parentA);
                  return alternate;
                }
                child = child.sibling;
              }
              {
                {
                  throw Error("Unable to find node on an unmounted component.");
                }
              }
            }
            if (a.return !== b.return) {
              a = parentA;
              b = parentB;
            } else {
              var didFindChild = false;
              var _child = parentA.child;
              while (_child) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentA;
                  b = parentB;
                  break;
                }
                if (_child === b) {
                  didFindChild = true;
                  b = parentA;
                  a = parentB;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                _child = parentB.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentB;
                    b = parentA;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentB;
                    a = parentA;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  {
                    throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
            }
            if (!(a.alternate === b)) {
              {
                throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          if (!(a.tag === HostRoot)) {
            {
              throw Error("Unable to find node on an unmounted component.");
            }
          }
          if (a.stateNode.current === a) {
            return fiber;
          }
          return alternate;
        }
        function findCurrentHostFiber(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          if (!currentParent) {
            return null;
          }
          var node = currentParent;
          while (true) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            } else if (node.child) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === currentParent) {
              return null;
            }
            while (!node.sibling) {
              if (!node.return || node.return === currentParent) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        function findCurrentHostFiberWithNoPortals(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          if (!currentParent) {
            return null;
          }
          var node = currentParent;
          while (true) {
            if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) {
              return node;
            } else if (node.child && node.tag !== HostPortal) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === currentParent) {
              return null;
            }
            while (!node.sibling) {
              if (!node.return || node.return === currentParent) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        function doesFiberContain(parentFiber, childFiber) {
          var node = childFiber;
          var parentFiberAlternate = parentFiber.alternate;
          while (node !== null) {
            if (node === parentFiber || node === parentFiberAlternate) {
              return true;
            }
            node = node.return;
          }
          return false;
        }
        var attemptUserBlockingHydration;
        function setAttemptUserBlockingHydration(fn) {
          attemptUserBlockingHydration = fn;
        }
        var attemptContinuousHydration;
        function setAttemptContinuousHydration(fn) {
          attemptContinuousHydration = fn;
        }
        var attemptHydrationAtCurrentPriority;
        function setAttemptHydrationAtCurrentPriority(fn) {
          attemptHydrationAtCurrentPriority = fn;
        }
        var attemptHydrationAtPriority;
        function setAttemptHydrationAtPriority(fn) {
          attemptHydrationAtPriority = fn;
        }
        var hasScheduledReplayAttempt = false;
        var queuedDiscreteEvents = [];
        var queuedFocus = null;
        var queuedDrag = null;
        var queuedMouse = null;
        var queuedPointers = new Map();
        var queuedPointerCaptures = new Map();
        var queuedExplicitHydrationTargets = [];
        function hasQueuedDiscreteEvents() {
          return queuedDiscreteEvents.length > 0;
        }
        var discreteReplayableEvents = ["mousedown", "mouseup", "touchcancel", "touchend", "touchstart", "auxclick", "dblclick", "pointercancel", "pointerdown", "pointerup", "dragend", "dragstart", "drop", "compositionend", "compositionstart", "keydown", "keypress", "keyup", "input", "textInput", "copy", "cut", "paste", "click", "change", "contextmenu", "reset", "submit"];
        function isReplayableDiscreteEvent(eventType) {
          return discreteReplayableEvents.indexOf(eventType) > -1;
        }
        function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          return {
            blockedOn,
            domEventName,
            eventSystemFlags: eventSystemFlags | IS_REPLAYED,
            nativeEvent,
            targetContainers: [targetContainer]
          };
        }
        function queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
          queuedDiscreteEvents.push(queuedEvent);
        }
        function clearIfContinuousEvent(domEventName, nativeEvent) {
          switch (domEventName) {
            case "focusin":
            case "focusout":
              queuedFocus = null;
              break;
            case "dragenter":
            case "dragleave":
              queuedDrag = null;
              break;
            case "mouseover":
            case "mouseout":
              queuedMouse = null;
              break;
            case "pointerover":
            case "pointerout":
              {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
            case "gotpointercapture":
            case "lostpointercapture":
              {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
          }
        }
        function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn !== null) {
              var _fiber2 = getInstanceFromNode(blockedOn);
              if (_fiber2 !== null) {
                attemptContinuousHydration(_fiber2);
              }
            }
            return queuedEvent;
          }
          existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
          var targetContainers = existingQueuedEvent.targetContainers;
          if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
            targetContainers.push(targetContainer);
          }
          return existingQueuedEvent;
        }
        function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          switch (domEventName) {
            case "focusin":
              {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
            case "dragenter":
              {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
            case "mouseover":
              {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
            case "pointerover":
              {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
            case "gotpointercapture":
              {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
          }
          return false;
        }
        function attemptExplicitHydrationTarget(queuedTarget) {
          var targetInst = getClosestInstanceFromNode(queuedTarget.target);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  queuedTarget.blockedOn = instance;
                  attemptHydrationAtPriority(queuedTarget.lanePriority, function () {
                    Scheduler.unstable_runWithPriority(queuedTarget.priority, function () {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                  });
                  return;
                }
              } else if (tag === HostRoot) {
                var root2 = nearestMounted.stateNode;
                if (root2.hydrate) {
                  queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                  return;
                }
              }
            }
          }
          queuedTarget.blockedOn = null;
        }
        function attemptReplayContinuousQueuedEvent(queuedEvent) {
          if (queuedEvent.blockedOn !== null) {
            return false;
          }
          var targetContainers = queuedEvent.targetContainers;
          while (targetContainers.length > 0) {
            var targetContainer = targetContainers[0];
            var nextBlockedOn = attemptToDispatchEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
            if (nextBlockedOn !== null) {
              var _fiber3 = getInstanceFromNode(nextBlockedOn);
              if (_fiber3 !== null) {
                attemptContinuousHydration(_fiber3);
              }
              queuedEvent.blockedOn = nextBlockedOn;
              return false;
            }
            targetContainers.shift();
          }
          return true;
        }
        function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
          if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
            map.delete(key);
          }
        }
        function replayUnblockedEvents() {
          hasScheduledReplayAttempt = false;
          while (queuedDiscreteEvents.length > 0) {
            var nextDiscreteEvent = queuedDiscreteEvents[0];
            if (nextDiscreteEvent.blockedOn !== null) {
              var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn);
              if (_fiber4 !== null) {
                attemptUserBlockingHydration(_fiber4);
              }
              break;
            }
            var targetContainers = nextDiscreteEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.domEventName, nextDiscreteEvent.eventSystemFlags, targetContainer, nextDiscreteEvent.nativeEvent);
              if (nextBlockedOn !== null) {
                nextDiscreteEvent.blockedOn = nextBlockedOn;
                break;
              }
              targetContainers.shift();
            }
            if (nextDiscreteEvent.blockedOn === null) {
              queuedDiscreteEvents.shift();
            }
          }
          if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
            queuedFocus = null;
          }
          if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
            queuedDrag = null;
          }
          if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
            queuedMouse = null;
          }
          queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
          queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
        }
        function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
          if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
              hasScheduledReplayAttempt = true;
              Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
          }
        }
        function retryIfBlockedOn(unblocked) {
          if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
            for (var i = 1; i < queuedDiscreteEvents.length; i++) {
              var queuedEvent = queuedDiscreteEvents[i];
              if (queuedEvent.blockedOn === unblocked) {
                queuedEvent.blockedOn = null;
              }
            }
          }
          if (queuedFocus !== null) {
            scheduleCallbackIfUnblocked(queuedFocus, unblocked);
          }
          if (queuedDrag !== null) {
            scheduleCallbackIfUnblocked(queuedDrag, unblocked);
          }
          if (queuedMouse !== null) {
            scheduleCallbackIfUnblocked(queuedMouse, unblocked);
          }
          var unblock = function (queuedEvent2) {
            return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
          };
          queuedPointers.forEach(unblock);
          queuedPointerCaptures.forEach(unblock);
          for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
            var queuedTarget = queuedExplicitHydrationTargets[_i];
            if (queuedTarget.blockedOn === unblocked) {
              queuedTarget.blockedOn = null;
            }
          }
          while (queuedExplicitHydrationTargets.length > 0) {
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) {
              break;
            } else {
              attemptExplicitHydrationTarget(nextExplicitTarget);
              if (nextExplicitTarget.blockedOn === null) {
                queuedExplicitHydrationTargets.shift();
              }
            }
          }
        }
        var DiscreteEvent = 0;
        var UserBlockingEvent = 1;
        var ContinuousEvent = 2;
        function makePrefixMap(styleProp, eventName) {
          var prefixes2 = {};
          prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
          prefixes2["Webkit" + styleProp] = "webkit" + eventName;
          prefixes2["Moz" + styleProp] = "moz" + eventName;
          return prefixes2;
        }
        var vendorPrefixes = {
          animationend: makePrefixMap("Animation", "AnimationEnd"),
          animationiteration: makePrefixMap("Animation", "AnimationIteration"),
          animationstart: makePrefixMap("Animation", "AnimationStart"),
          transitionend: makePrefixMap("Transition", "TransitionEnd")
        };
        var prefixedEventNames = {};
        var style = {};
        if (canUseDOM) {
          style = document.createElement("div").style;
          if (!(("AnimationEvent" in window))) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
          }
          if (!(("TransitionEvent" in window))) {
            delete vendorPrefixes.transitionend.transition;
          }
        }
        function getVendorPrefixedEventName(eventName) {
          if (prefixedEventNames[eventName]) {
            return prefixedEventNames[eventName];
          } else if (!vendorPrefixes[eventName]) {
            return eventName;
          }
          var prefixMap = vendorPrefixes[eventName];
          for (var styleProp in prefixMap) {
            if (prefixMap.hasOwnProperty(styleProp) && (styleProp in style)) {
              return prefixedEventNames[eventName] = prefixMap[styleProp];
            }
          }
          return eventName;
        }
        var ANIMATION_END = getVendorPrefixedEventName("animationend");
        var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
        var ANIMATION_START = getVendorPrefixedEventName("animationstart");
        var TRANSITION_END = getVendorPrefixedEventName("transitionend");
        var topLevelEventsToReactNames = new Map();
        var eventPriorities = new Map();
        var discreteEventPairsForSimpleEventPlugin = ["cancel", "cancel", "click", "click", "close", "close", "contextmenu", "contextMenu", "copy", "copy", "cut", "cut", "auxclick", "auxClick", "dblclick", "doubleClick", "dragend", "dragEnd", "dragstart", "dragStart", "drop", "drop", "focusin", "focus", "focusout", "blur", "input", "input", "invalid", "invalid", "keydown", "keyDown", "keypress", "keyPress", "keyup", "keyUp", "mousedown", "mouseDown", "mouseup", "mouseUp", "paste", "paste", "pause", "pause", "play", "play", "pointercancel", "pointerCancel", "pointerdown", "pointerDown", "pointerup", "pointerUp", "ratechange", "rateChange", "reset", "reset", "seeked", "seeked", "submit", "submit", "touchcancel", "touchCancel", "touchend", "touchEnd", "touchstart", "touchStart", "volumechange", "volumeChange"];
        var otherDiscreteEvents = ["change", "selectionchange", "textInput", "compositionstart", "compositionend", "compositionupdate"];
        var userBlockingPairsForSimpleEventPlugin = ["drag", "drag", "dragenter", "dragEnter", "dragexit", "dragExit", "dragleave", "dragLeave", "dragover", "dragOver", "mousemove", "mouseMove", "mouseout", "mouseOut", "mouseover", "mouseOver", "pointermove", "pointerMove", "pointerout", "pointerOut", "pointerover", "pointerOver", "scroll", "scroll", "toggle", "toggle", "touchmove", "touchMove", "wheel", "wheel"];
        var continuousPairsForSimpleEventPlugin = ["abort", "abort", ANIMATION_END, "animationEnd", ANIMATION_ITERATION, "animationIteration", ANIMATION_START, "animationStart", "canplay", "canPlay", "canplaythrough", "canPlayThrough", "durationchange", "durationChange", "emptied", "emptied", "encrypted", "encrypted", "ended", "ended", "error", "error", "gotpointercapture", "gotPointerCapture", "load", "load", "loadeddata", "loadedData", "loadedmetadata", "loadedMetadata", "loadstart", "loadStart", "lostpointercapture", "lostPointerCapture", "playing", "playing", "progress", "progress", "seeking", "seeking", "stalled", "stalled", "suspend", "suspend", "timeupdate", "timeUpdate", TRANSITION_END, "transitionEnd", "waiting", "waiting"];
        function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority) {
          for (var i = 0; i < eventTypes.length; i += 2) {
            var topEvent = eventTypes[i];
            var event = eventTypes[i + 1];
            var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
            var reactName = "on" + capitalizedEvent;
            eventPriorities.set(topEvent, priority);
            topLevelEventsToReactNames.set(topEvent, reactName);
            registerTwoPhaseEvent(reactName, [topEvent]);
          }
        }
        function setEventPriorities(eventTypes, priority) {
          for (var i = 0; i < eventTypes.length; i++) {
            eventPriorities.set(eventTypes[i], priority);
          }
        }
        function getEventPriorityForPluginSystem(domEventName) {
          var priority = eventPriorities.get(domEventName);
          return priority === void 0 ? ContinuousEvent : priority;
        }
        function registerSimpleEvents() {
          registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
          registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
          registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent);
          setEventPriorities(otherDiscreteEvents, DiscreteEvent);
        }
        var Scheduler_now = Scheduler.unstable_now;
        {
          if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
            {
              throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
            }
          }
        }
        var ImmediatePriority = 99;
        var UserBlockingPriority = 98;
        var NormalPriority = 97;
        var LowPriority = 96;
        var IdlePriority = 95;
        var NoPriority = 90;
        var initialTimeMs = Scheduler_now();
        var SyncLanePriority = 15;
        var SyncBatchedLanePriority = 14;
        var InputDiscreteHydrationLanePriority = 13;
        var InputDiscreteLanePriority = 12;
        var InputContinuousHydrationLanePriority = 11;
        var InputContinuousLanePriority = 10;
        var DefaultHydrationLanePriority = 9;
        var DefaultLanePriority = 8;
        var TransitionHydrationPriority = 7;
        var TransitionPriority = 6;
        var RetryLanePriority = 5;
        var SelectiveHydrationLanePriority = 4;
        var IdleHydrationLanePriority = 3;
        var IdleLanePriority = 2;
        var OffscreenLanePriority = 1;
        var NoLanePriority = 0;
        var TotalLanes = 31;
        var NoLanes = 0;
        var NoLane = 0;
        var SyncLane = 1;
        var SyncBatchedLane = 2;
        var InputDiscreteHydrationLane = 4;
        var InputDiscreteLanes = 24;
        var InputContinuousHydrationLane = 32;
        var InputContinuousLanes = 192;
        var DefaultHydrationLane = 256;
        var DefaultLanes = 3584;
        var TransitionHydrationLane = 4096;
        var TransitionLanes = 4186112;
        var RetryLanes = 62914560;
        var SomeRetryLane = 33554432;
        var SelectiveHydrationLane = 67108864;
        var NonIdleLanes = 134217727;
        var IdleHydrationLane = 134217728;
        var IdleLanes = 805306368;
        var OffscreenLane = 1073741824;
        var NoTimestamp = -1;
        function setCurrentUpdateLanePriority(newLanePriority) {}
        var return_highestLanePriority = DefaultLanePriority;
        function getHighestPriorityLanes(lanes) {
          if ((SyncLane & lanes) !== NoLanes) {
            return_highestLanePriority = SyncLanePriority;
            return SyncLane;
          }
          if ((SyncBatchedLane & lanes) !== NoLanes) {
            return_highestLanePriority = SyncBatchedLanePriority;
            return SyncBatchedLane;
          }
          if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
            return_highestLanePriority = InputDiscreteHydrationLanePriority;
            return InputDiscreteHydrationLane;
          }
          var inputDiscreteLanes = InputDiscreteLanes & lanes;
          if (inputDiscreteLanes !== NoLanes) {
            return_highestLanePriority = InputDiscreteLanePriority;
            return inputDiscreteLanes;
          }
          if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
            return_highestLanePriority = InputContinuousHydrationLanePriority;
            return InputContinuousHydrationLane;
          }
          var inputContinuousLanes = InputContinuousLanes & lanes;
          if (inputContinuousLanes !== NoLanes) {
            return_highestLanePriority = InputContinuousLanePriority;
            return inputContinuousLanes;
          }
          if ((lanes & DefaultHydrationLane) !== NoLanes) {
            return_highestLanePriority = DefaultHydrationLanePriority;
            return DefaultHydrationLane;
          }
          var defaultLanes = DefaultLanes & lanes;
          if (defaultLanes !== NoLanes) {
            return_highestLanePriority = DefaultLanePriority;
            return defaultLanes;
          }
          if ((lanes & TransitionHydrationLane) !== NoLanes) {
            return_highestLanePriority = TransitionHydrationPriority;
            return TransitionHydrationLane;
          }
          var transitionLanes = TransitionLanes & lanes;
          if (transitionLanes !== NoLanes) {
            return_highestLanePriority = TransitionPriority;
            return transitionLanes;
          }
          var retryLanes = RetryLanes & lanes;
          if (retryLanes !== NoLanes) {
            return_highestLanePriority = RetryLanePriority;
            return retryLanes;
          }
          if (lanes & SelectiveHydrationLane) {
            return_highestLanePriority = SelectiveHydrationLanePriority;
            return SelectiveHydrationLane;
          }
          if ((lanes & IdleHydrationLane) !== NoLanes) {
            return_highestLanePriority = IdleHydrationLanePriority;
            return IdleHydrationLane;
          }
          var idleLanes = IdleLanes & lanes;
          if (idleLanes !== NoLanes) {
            return_highestLanePriority = IdleLanePriority;
            return idleLanes;
          }
          if ((OffscreenLane & lanes) !== NoLanes) {
            return_highestLanePriority = OffscreenLanePriority;
            return OffscreenLane;
          }
          {
            error("Should have found matching lanes. This is a bug in React.");
          }
          return_highestLanePriority = DefaultLanePriority;
          return lanes;
        }
        function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
          switch (schedulerPriorityLevel) {
            case ImmediatePriority:
              return SyncLanePriority;
            case UserBlockingPriority:
              return InputContinuousLanePriority;
            case NormalPriority:
            case LowPriority:
              return DefaultLanePriority;
            case IdlePriority:
              return IdleLanePriority;
            default:
              return NoLanePriority;
          }
        }
        function lanePriorityToSchedulerPriority(lanePriority) {
          switch (lanePriority) {
            case SyncLanePriority:
            case SyncBatchedLanePriority:
              return ImmediatePriority;
            case InputDiscreteHydrationLanePriority:
            case InputDiscreteLanePriority:
            case InputContinuousHydrationLanePriority:
            case InputContinuousLanePriority:
              return UserBlockingPriority;
            case DefaultHydrationLanePriority:
            case DefaultLanePriority:
            case TransitionHydrationPriority:
            case TransitionPriority:
            case SelectiveHydrationLanePriority:
            case RetryLanePriority:
              return NormalPriority;
            case IdleHydrationLanePriority:
            case IdleLanePriority:
            case OffscreenLanePriority:
              return IdlePriority;
            case NoLanePriority:
              return NoPriority;
            default:
              {
                {
                  throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
                }
              }
          }
        }
        function getNextLanes(root2, wipLanes) {
          var pendingLanes = root2.pendingLanes;
          if (pendingLanes === NoLanes) {
            return_highestLanePriority = NoLanePriority;
            return NoLanes;
          }
          var nextLanes = NoLanes;
          var nextLanePriority = NoLanePriority;
          var expiredLanes = root2.expiredLanes;
          var suspendedLanes = root2.suspendedLanes;
          var pingedLanes = root2.pingedLanes;
          if (expiredLanes !== NoLanes) {
            nextLanes = expiredLanes;
            nextLanePriority = return_highestLanePriority = SyncLanePriority;
          } else {
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
                nextLanePriority = return_highestLanePriority;
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                  nextLanePriority = return_highestLanePriority;
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
                nextLanePriority = return_highestLanePriority;
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                  nextLanePriority = return_highestLanePriority;
                }
              }
            }
          }
          if (nextLanes === NoLanes) {
            return NoLanes;
          }
          nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes);
          if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
            getHighestPriorityLanes(wipLanes);
            var wipLanePriority = return_highestLanePriority;
            if (nextLanePriority <= wipLanePriority) {
              return wipLanes;
            } else {
              return_highestLanePriority = nextLanePriority;
            }
          }
          var entangledLanes = root2.entangledLanes;
          if (entangledLanes !== NoLanes) {
            var entanglements = root2.entanglements;
            var lanes = nextLanes & entangledLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              nextLanes |= entanglements[index2];
              lanes &= ~lane;
            }
          }
          return nextLanes;
        }
        function getMostRecentEventTime(root2, lanes) {
          var eventTimes = root2.eventTimes;
          var mostRecentEventTime = NoTimestamp;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            var eventTime = eventTimes[index2];
            if (eventTime > mostRecentEventTime) {
              mostRecentEventTime = eventTime;
            }
            lanes &= ~lane;
          }
          return mostRecentEventTime;
        }
        function computeExpirationTime(lane, currentTime) {
          getHighestPriorityLanes(lane);
          var priority = return_highestLanePriority;
          if (priority >= InputContinuousLanePriority) {
            return currentTime + 250;
          } else if (priority >= TransitionPriority) {
            return currentTime + 5e3;
          } else {
            return NoTimestamp;
          }
        }
        function markStarvedLanesAsExpired(root2, currentTime) {
          var pendingLanes = root2.pendingLanes;
          var suspendedLanes = root2.suspendedLanes;
          var pingedLanes = root2.pingedLanes;
          var expirationTimes = root2.expirationTimes;
          var lanes = pendingLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            var expirationTime = expirationTimes[index2];
            if (expirationTime === NoTimestamp) {
              if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                expirationTimes[index2] = computeExpirationTime(lane, currentTime);
              }
            } else if (expirationTime <= currentTime) {
              root2.expiredLanes |= lane;
            }
            lanes &= ~lane;
          }
        }
        function getLanesToRetrySynchronouslyOnError(root2) {
          var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
          if (everythingButOffscreen !== NoLanes) {
            return everythingButOffscreen;
          }
          if (everythingButOffscreen & OffscreenLane) {
            return OffscreenLane;
          }
          return NoLanes;
        }
        function returnNextLanesPriority() {
          return return_highestLanePriority;
        }
        function includesNonIdleWork(lanes) {
          return (lanes & NonIdleLanes) !== NoLanes;
        }
        function includesOnlyRetries(lanes) {
          return (lanes & RetryLanes) === lanes;
        }
        function includesOnlyTransitions(lanes) {
          return (lanes & TransitionLanes) === lanes;
        }
        function findUpdateLane(lanePriority, wipLanes) {
          switch (lanePriority) {
            case NoLanePriority:
              break;
            case SyncLanePriority:
              return SyncLane;
            case SyncBatchedLanePriority:
              return SyncBatchedLane;
            case InputDiscreteLanePriority:
              {
                var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);
                if (_lane === NoLane) {
                  return findUpdateLane(InputContinuousLanePriority, wipLanes);
                }
                return _lane;
              }
            case InputContinuousLanePriority:
              {
                var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);
                if (_lane2 === NoLane) {
                  return findUpdateLane(DefaultLanePriority, wipLanes);
                }
                return _lane2;
              }
            case DefaultLanePriority:
              {
                var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);
                if (_lane3 === NoLane) {
                  _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);
                  if (_lane3 === NoLane) {
                    _lane3 = pickArbitraryLane(DefaultLanes);
                  }
                }
                return _lane3;
              }
            case TransitionPriority:
            case RetryLanePriority:
              break;
            case IdleLanePriority:
              var lane = pickArbitraryLane(IdleLanes & ~wipLanes);
              if (lane === NoLane) {
                lane = pickArbitraryLane(IdleLanes);
              }
              return lane;
          }
          {
            {
              throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
            }
          }
        }
        function findTransitionLane(wipLanes, pendingLanes) {
          var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);
          if (lane === NoLane) {
            lane = pickArbitraryLane(TransitionLanes & ~wipLanes);
            if (lane === NoLane) {
              lane = pickArbitraryLane(TransitionLanes);
            }
          }
          return lane;
        }
        function findRetryLane(wipLanes) {
          var lane = pickArbitraryLane(RetryLanes & ~wipLanes);
          if (lane === NoLane) {
            lane = pickArbitraryLane(RetryLanes);
          }
          return lane;
        }
        function getHighestPriorityLane(lanes) {
          return lanes & -lanes;
        }
        function getLowestPriorityLane(lanes) {
          var index2 = 31 - clz32(lanes);
          return index2 < 0 ? NoLanes : 1 << index2;
        }
        function getEqualOrHigherPriorityLanes(lanes) {
          return (getLowestPriorityLane(lanes) << 1) - 1;
        }
        function pickArbitraryLane(lanes) {
          return getHighestPriorityLane(lanes);
        }
        function pickArbitraryLaneIndex(lanes) {
          return 31 - clz32(lanes);
        }
        function laneToIndex(lane) {
          return pickArbitraryLaneIndex(lane);
        }
        function includesSomeLane(a, b) {
          return (a & b) !== NoLanes;
        }
        function isSubsetOfLanes(set2, subset) {
          return (set2 & subset) === subset;
        }
        function mergeLanes(a, b) {
          return a | b;
        }
        function removeLanes(set2, subset) {
          return set2 & ~subset;
        }
        function laneToLanes(lane) {
          return lane;
        }
        function higherPriorityLane(a, b) {
          return a !== NoLane && a < b ? a : b;
        }
        function createLaneMap(initial) {
          var laneMap = [];
          for (var i = 0; i < TotalLanes; i++) {
            laneMap.push(initial);
          }
          return laneMap;
        }
        function markRootUpdated(root2, updateLane, eventTime) {
          root2.pendingLanes |= updateLane;
          var higherPriorityLanes = updateLane - 1;
          root2.suspendedLanes &= higherPriorityLanes;
          root2.pingedLanes &= higherPriorityLanes;
          var eventTimes = root2.eventTimes;
          var index2 = laneToIndex(updateLane);
          eventTimes[index2] = eventTime;
        }
        function markRootSuspended(root2, suspendedLanes) {
          root2.suspendedLanes |= suspendedLanes;
          root2.pingedLanes &= ~suspendedLanes;
          var expirationTimes = root2.expirationTimes;
          var lanes = suspendedLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            expirationTimes[index2] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootPinged(root2, pingedLanes, eventTime) {
          root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
        }
        function markDiscreteUpdatesExpired(root2) {
          root2.expiredLanes |= InputDiscreteLanes & root2.pendingLanes;
        }
        function hasDiscreteLanes(lanes) {
          return (lanes & InputDiscreteLanes) !== NoLanes;
        }
        function markRootMutableRead(root2, updateLane) {
          root2.mutableReadLanes |= updateLane & root2.pendingLanes;
        }
        function markRootFinished(root2, remainingLanes) {
          var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
          root2.pendingLanes = remainingLanes;
          root2.suspendedLanes = 0;
          root2.pingedLanes = 0;
          root2.expiredLanes &= remainingLanes;
          root2.mutableReadLanes &= remainingLanes;
          root2.entangledLanes &= remainingLanes;
          var entanglements = root2.entanglements;
          var eventTimes = root2.eventTimes;
          var expirationTimes = root2.expirationTimes;
          var lanes = noLongerPendingLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            entanglements[index2] = NoLanes;
            eventTimes[index2] = NoTimestamp;
            expirationTimes[index2] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootEntangled(root2, entangledLanes) {
          root2.entangledLanes |= entangledLanes;
          var entanglements = root2.entanglements;
          var lanes = entangledLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            entanglements[index2] |= entangledLanes;
            lanes &= ~lane;
          }
        }
        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
        var log = Math.log;
        var LN2 = Math.LN2;
        function clz32Fallback(lanes) {
          if (lanes === 0) {
            return 32;
          }
          return 31 - (log(lanes) / LN2 | 0) | 0;
        }
        var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority, runWithPriority = Scheduler.unstable_runWithPriority;
        var _enabled = true;
        function setEnabled(enabled) {
          _enabled = !!enabled;
        }
        function isEnabled() {
          return _enabled;
        }
        function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
          var eventPriority = getEventPriorityForPluginSystem(domEventName);
          var listenerWrapper;
          switch (eventPriority) {
            case DiscreteEvent:
              listenerWrapper = dispatchDiscreteEvent;
              break;
            case UserBlockingEvent:
              listenerWrapper = dispatchUserBlockingUpdate;
              break;
            case ContinuousEvent:
            default:
              listenerWrapper = dispatchEvent;
              break;
          }
          return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
        }
        function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
          {
            flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
          }
          discreteUpdates(dispatchEvent, domEventName, eventSystemFlags, container, nativeEvent);
        }
        function dispatchUserBlockingUpdate(domEventName, eventSystemFlags, container, nativeEvent) {
          {
            runWithPriority(UserBlockingPriority$1, dispatchEvent.bind(null, domEventName, eventSystemFlags, container, nativeEvent));
          }
        }
        function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (!_enabled) {
            return;
          }
          var allowReplay = true;
          {
            allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;
          }
          if (allowReplay && hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(domEventName)) {
            queueDiscreteEvent(null, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            return;
          }
          var blockedOn = attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
          if (blockedOn === null) {
            if (allowReplay) {
              clearIfContinuousEvent(domEventName, nativeEvent);
            }
            return;
          }
          if (allowReplay) {
            if (isReplayableDiscreteEvent(domEventName)) {
              queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
          }
          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
        }
        function attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          var nativeEventTarget = getEventTarget(nativeEvent);
          var targetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) {
              targetInst = null;
            } else {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  return instance;
                }
                targetInst = null;
              } else if (tag === HostRoot) {
                var root2 = nearestMounted.stateNode;
                if (root2.hydrate) {
                  return getContainerFromFiber(nearestMounted);
                }
                targetInst = null;
              } else if (nearestMounted !== targetInst) {
                targetInst = null;
              }
            }
          }
          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer);
          return null;
        }
        function addEventBubbleListener(target, eventType, listener) {
          target.addEventListener(eventType, listener, false);
          return listener;
        }
        function addEventCaptureListener(target, eventType, listener) {
          target.addEventListener(eventType, listener, true);
          return listener;
        }
        function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
          target.addEventListener(eventType, listener, {
            capture: true,
            passive
          });
          return listener;
        }
        function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
          target.addEventListener(eventType, listener, {
            passive
          });
          return listener;
        }
        var root = null;
        var startText = null;
        var fallbackText = null;
        function initialize(nativeEventTarget) {
          root = nativeEventTarget;
          startText = getText();
          return true;
        }
        function reset() {
          root = null;
          startText = null;
          fallbackText = null;
        }
        function getData() {
          if (fallbackText) {
            return fallbackText;
          }
          var start;
          var startValue = startText;
          var startLength = startValue.length;
          var end;
          var endValue = getText();
          var endLength = endValue.length;
          for (start = 0; start < startLength; start++) {
            if (startValue[start] !== endValue[start]) {
              break;
            }
          }
          var minEnd = startLength - start;
          for (end = 1; end <= minEnd; end++) {
            if (startValue[startLength - end] !== endValue[endLength - end]) {
              break;
            }
          }
          var sliceTail = end > 1 ? 1 - end : void 0;
          fallbackText = endValue.slice(start, sliceTail);
          return fallbackText;
        }
        function getText() {
          if (("value" in root)) {
            return root.value;
          }
          return root.textContent;
        }
        function getEventCharCode(nativeEvent) {
          var charCode;
          var keyCode = nativeEvent.keyCode;
          if (("charCode" in nativeEvent)) {
            charCode = nativeEvent.charCode;
            if (charCode === 0 && keyCode === 13) {
              charCode = 13;
            }
          } else {
            charCode = keyCode;
          }
          if (charCode === 10) {
            charCode = 13;
          }
          if (charCode >= 32 || charCode === 13) {
            return charCode;
          }
          return 0;
        }
        function functionThatReturnsTrue() {
          return true;
        }
        function functionThatReturnsFalse() {
          return false;
        }
        function createSyntheticEvent(Interface) {
          function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;
            for (var _propName in Interface) {
              if (!Interface.hasOwnProperty(_propName)) {
                continue;
              }
              var normalize = Interface[_propName];
              if (normalize) {
                this[_propName] = normalize(nativeEvent);
              } else {
                this[_propName] = nativeEvent[_propName];
              }
            }
            var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
            if (defaultPrevented) {
              this.isDefaultPrevented = functionThatReturnsTrue;
            } else {
              this.isDefaultPrevented = functionThatReturnsFalse;
            }
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
          }
          _assign(SyntheticBaseEvent.prototype, {
            preventDefault: function () {
              this.defaultPrevented = true;
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.preventDefault) {
                event.preventDefault();
              } else if (typeof event.returnValue !== "unknown") {
                event.returnValue = false;
              }
              this.isDefaultPrevented = functionThatReturnsTrue;
            },
            stopPropagation: function () {
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.stopPropagation) {
                event.stopPropagation();
              } else if (typeof event.cancelBubble !== "unknown") {
                event.cancelBubble = true;
              }
              this.isPropagationStopped = functionThatReturnsTrue;
            },
            persist: function () {},
            isPersistent: functionThatReturnsTrue
          });
          return SyntheticBaseEvent;
        }
        var EventInterface = {
          eventPhase: 0,
          bubbles: 0,
          cancelable: 0,
          timeStamp: function (event) {
            return event.timeStamp || Date.now();
          },
          defaultPrevented: 0,
          isTrusted: 0
        };
        var SyntheticEvent = createSyntheticEvent(EventInterface);
        var UIEventInterface = _assign({}, EventInterface, {
          view: 0,
          detail: 0
        });
        var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
        var lastMovementX;
        var lastMovementY;
        var lastMouseEvent;
        function updateMouseMovementPolyfillState(event) {
          if (event !== lastMouseEvent) {
            if (lastMouseEvent && event.type === "mousemove") {
              lastMovementX = event.screenX - lastMouseEvent.screenX;
              lastMovementY = event.screenY - lastMouseEvent.screenY;
            } else {
              lastMovementX = 0;
              lastMovementY = 0;
            }
            lastMouseEvent = event;
          }
        }
        var MouseEventInterface = _assign({}, UIEventInterface, {
          screenX: 0,
          screenY: 0,
          clientX: 0,
          clientY: 0,
          pageX: 0,
          pageY: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          getModifierState: getEventModifierState,
          button: 0,
          buttons: 0,
          relatedTarget: function (event) {
            if (event.relatedTarget === void 0) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
            return event.relatedTarget;
          },
          movementX: function (event) {
            if (("movementX" in event)) {
              return event.movementX;
            }
            updateMouseMovementPolyfillState(event);
            return lastMovementX;
          },
          movementY: function (event) {
            if (("movementY" in event)) {
              return event.movementY;
            }
            return lastMovementY;
          }
        });
        var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
        var DragEventInterface = _assign({}, MouseEventInterface, {
          dataTransfer: 0
        });
        var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
        var FocusEventInterface = _assign({}, UIEventInterface, {
          relatedTarget: 0
        });
        var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
        var AnimationEventInterface = _assign({}, EventInterface, {
          animationName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
        var ClipboardEventInterface = _assign({}, EventInterface, {
          clipboardData: function (event) {
            return ("clipboardData" in event) ? event.clipboardData : window.clipboardData;
          }
        });
        var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
        var CompositionEventInterface = _assign({}, EventInterface, {
          data: 0
        });
        var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
        var SyntheticInputEvent = SyntheticCompositionEvent;
        var normalizeKey = {
          Esc: "Escape",
          Spacebar: " ",
          Left: "ArrowLeft",
          Up: "ArrowUp",
          Right: "ArrowRight",
          Down: "ArrowDown",
          Del: "Delete",
          Win: "OS",
          Menu: "ContextMenu",
          Apps: "ContextMenu",
          Scroll: "ScrollLock",
          MozPrintableKey: "Unidentified"
        };
        var translateToKey = {
          "8": "Backspace",
          "9": "Tab",
          "12": "Clear",
          "13": "Enter",
          "16": "Shift",
          "17": "Control",
          "18": "Alt",
          "19": "Pause",
          "20": "CapsLock",
          "27": "Escape",
          "32": " ",
          "33": "PageUp",
          "34": "PageDown",
          "35": "End",
          "36": "Home",
          "37": "ArrowLeft",
          "38": "ArrowUp",
          "39": "ArrowRight",
          "40": "ArrowDown",
          "45": "Insert",
          "46": "Delete",
          "112": "F1",
          "113": "F2",
          "114": "F3",
          "115": "F4",
          "116": "F5",
          "117": "F6",
          "118": "F7",
          "119": "F8",
          "120": "F9",
          "121": "F10",
          "122": "F11",
          "123": "F12",
          "144": "NumLock",
          "145": "ScrollLock",
          "224": "Meta"
        };
        function getEventKey(nativeEvent) {
          if (nativeEvent.key) {
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== "Unidentified") {
              return key;
            }
          }
          if (nativeEvent.type === "keypress") {
            var charCode = getEventCharCode(nativeEvent);
            return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
          }
          if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
            return translateToKey[nativeEvent.keyCode] || "Unidentified";
          }
          return "";
        }
        var modifierKeyToProp = {
          Alt: "altKey",
          Control: "ctrlKey",
          Meta: "metaKey",
          Shift: "shiftKey"
        };
        function modifierStateGetter(keyArg) {
          var syntheticEvent = this;
          var nativeEvent = syntheticEvent.nativeEvent;
          if (nativeEvent.getModifierState) {
            return nativeEvent.getModifierState(keyArg);
          }
          var keyProp = modifierKeyToProp[keyArg];
          return keyProp ? !!nativeEvent[keyProp] : false;
        }
        function getEventModifierState(nativeEvent) {
          return modifierStateGetter;
        }
        var KeyboardEventInterface = _assign({}, UIEventInterface, {
          key: getEventKey,
          code: 0,
          location: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          repeat: 0,
          locale: 0,
          getModifierState: getEventModifierState,
          charCode: function (event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            return 0;
          },
          keyCode: function (event) {
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          },
          which: function (event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          }
        });
        var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
        var PointerEventInterface = _assign({}, MouseEventInterface, {
          pointerId: 0,
          width: 0,
          height: 0,
          pressure: 0,
          tangentialPressure: 0,
          tiltX: 0,
          tiltY: 0,
          twist: 0,
          pointerType: 0,
          isPrimary: 0
        });
        var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
        var TouchEventInterface = _assign({}, UIEventInterface, {
          touches: 0,
          targetTouches: 0,
          changedTouches: 0,
          altKey: 0,
          metaKey: 0,
          ctrlKey: 0,
          shiftKey: 0,
          getModifierState: getEventModifierState
        });
        var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
        var TransitionEventInterface = _assign({}, EventInterface, {
          propertyName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
        var WheelEventInterface = _assign({}, MouseEventInterface, {
          deltaX: function (event) {
            return ("deltaX" in event) ? event.deltaX : ("wheelDeltaX" in event) ? -event.wheelDeltaX : 0;
          },
          deltaY: function (event) {
            return ("deltaY" in event) ? event.deltaY : ("wheelDeltaY" in event) ? -event.wheelDeltaY : ("wheelDelta" in event) ? -event.wheelDelta : 0;
          },
          deltaZ: 0,
          deltaMode: 0
        });
        var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
        var END_KEYCODES = [9, 13, 27, 32];
        var START_KEYCODE = 229;
        var canUseCompositionEvent = canUseDOM && ("CompositionEvent" in window);
        var documentMode = null;
        if (canUseDOM && ("documentMode" in document)) {
          documentMode = document.documentMode;
        }
        var canUseTextInputEvent = canUseDOM && ("TextEvent" in window) && !documentMode;
        var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
        var SPACEBAR_CODE = 32;
        var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
        function registerEvents() {
          registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
          registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
        }
        var hasSpaceKeypress = false;
        function isKeypressCommand(nativeEvent) {
          return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
        }
        function getCompositionEventType(domEventName) {
          switch (domEventName) {
            case "compositionstart":
              return "onCompositionStart";
            case "compositionend":
              return "onCompositionEnd";
            case "compositionupdate":
              return "onCompositionUpdate";
          }
        }
        function isFallbackCompositionStart(domEventName, nativeEvent) {
          return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
        }
        function isFallbackCompositionEnd(domEventName, nativeEvent) {
          switch (domEventName) {
            case "keyup":
              return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case "keydown":
              return nativeEvent.keyCode !== START_KEYCODE;
            case "keypress":
            case "mousedown":
            case "focusout":
              return true;
            default:
              return false;
          }
        }
        function getDataFromCustomEvent(nativeEvent) {
          var detail = nativeEvent.detail;
          if (typeof detail === "object" && ("data" in detail)) {
            return detail.data;
          }
          return null;
        }
        function isUsingKoreanIME(nativeEvent) {
          return nativeEvent.locale === "ko";
        }
        var isComposing = false;
        function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var eventType;
          var fallbackData;
          if (canUseCompositionEvent) {
            eventType = getCompositionEventType(domEventName);
          } else if (!isComposing) {
            if (isFallbackCompositionStart(domEventName, nativeEvent)) {
              eventType = "onCompositionStart";
            }
          } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
            eventType = "onCompositionEnd";
          }
          if (!eventType) {
            return null;
          }
          if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            if (!isComposing && eventType === "onCompositionStart") {
              isComposing = initialize(nativeEventTarget);
            } else if (eventType === "onCompositionEnd") {
              if (isComposing) {
                fallbackData = getData();
              }
            }
          }
          var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
          if (listeners.length > 0) {
            var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            if (fallbackData) {
              event.data = fallbackData;
            } else {
              var customData = getDataFromCustomEvent(nativeEvent);
              if (customData !== null) {
                event.data = customData;
              }
            }
          }
        }
        function getNativeBeforeInputChars(domEventName, nativeEvent) {
          switch (domEventName) {
            case "compositionend":
              return getDataFromCustomEvent(nativeEvent);
            case "keypress":
              var which = nativeEvent.which;
              if (which !== SPACEBAR_CODE) {
                return null;
              }
              hasSpaceKeypress = true;
              return SPACEBAR_CHAR;
            case "textInput":
              var chars = nativeEvent.data;
              if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                return null;
              }
              return chars;
            default:
              return null;
          }
        }
        function getFallbackBeforeInputChars(domEventName, nativeEvent) {
          if (isComposing) {
            if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
              var chars = getData();
              reset();
              isComposing = false;
              return chars;
            }
            return null;
          }
          switch (domEventName) {
            case "paste":
              return null;
            case "keypress":
              if (!isKeypressCommand(nativeEvent)) {
                if (nativeEvent.char && nativeEvent.char.length > 1) {
                  return nativeEvent.char;
                } else if (nativeEvent.which) {
                  return String.fromCharCode(nativeEvent.which);
                }
              }
              return null;
            case "compositionend":
              return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
              return null;
          }
        }
        function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var chars;
          if (canUseTextInputEvent) {
            chars = getNativeBeforeInputChars(domEventName, nativeEvent);
          } else {
            chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
          }
          if (!chars) {
            return null;
          }
          var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
          if (listeners.length > 0) {
            var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            event.data = chars;
          }
        }
        function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
        var supportedInputTypes = {
          color: true,
          date: true,
          datetime: true,
          "datetime-local": true,
          email: true,
          month: true,
          number: true,
          password: true,
          range: true,
          search: true,
          tel: true,
          text: true,
          time: true,
          url: true,
          week: true
        };
        function isTextInputElement(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          if (nodeName === "input") {
            return !!supportedInputTypes[elem.type];
          }
          if (nodeName === "textarea") {
            return true;
          }
          return false;
        }
        function isEventSupported(eventNameSuffix) {
          if (!canUseDOM) {
            return false;
          }
          var eventName = "on" + eventNameSuffix;
          var isSupported = (eventName in document);
          if (!isSupported) {
            var element = document.createElement("div");
            element.setAttribute(eventName, "return;");
            isSupported = typeof element[eventName] === "function";
          }
          return isSupported;
        }
        function registerEvents$1() {
          registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
        }
        function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
          enqueueStateRestore(target);
          var listeners = accumulateTwoPhaseListeners(inst, "onChange");
          if (listeners.length > 0) {
            var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
            dispatchQueue.push({
              event,
              listeners
            });
          }
        }
        var activeElement = null;
        var activeElementInst = null;
        function shouldUseChangeEvent(elem) {
          var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName === "select" || nodeName === "input" && elem.type === "file";
        }
        function manualDispatchChangeEvent(nativeEvent) {
          var dispatchQueue = [];
          createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
          batchedUpdates(runEventInBatch, dispatchQueue);
        }
        function runEventInBatch(dispatchQueue) {
          processDispatchQueue(dispatchQueue, 0);
        }
        function getInstIfValueChanged(targetInst) {
          var targetNode = getNodeFromInstance(targetInst);
          if (updateValueIfChanged(targetNode)) {
            return targetInst;
          }
        }
        function getTargetInstForChangeEvent(domEventName, targetInst) {
          if (domEventName === "change") {
            return targetInst;
          }
        }
        var isInputEventSupported = false;
        if (canUseDOM) {
          isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
        }
        function startWatchingForValueChange(target, targetInst) {
          activeElement = target;
          activeElementInst = targetInst;
          activeElement.attachEvent("onpropertychange", handlePropertyChange);
        }
        function stopWatchingForValueChange() {
          if (!activeElement) {
            return;
          }
          activeElement.detachEvent("onpropertychange", handlePropertyChange);
          activeElement = null;
          activeElementInst = null;
        }
        function handlePropertyChange(nativeEvent) {
          if (nativeEvent.propertyName !== "value") {
            return;
          }
          if (getInstIfValueChanged(activeElementInst)) {
            manualDispatchChangeEvent(nativeEvent);
          }
        }
        function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
          if (domEventName === "focusin") {
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
          } else if (domEventName === "focusout") {
            stopWatchingForValueChange();
          }
        }
        function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
          if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
            return getInstIfValueChanged(activeElementInst);
          }
        }
        function shouldUseClickEvent(elem) {
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
        }
        function getTargetInstForClickEvent(domEventName, targetInst) {
          if (domEventName === "click") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
          if (domEventName === "input" || domEventName === "change") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function handleControlledInputBlur(node) {
          var state = node._wrapperState;
          if (!state || !state.controlled || node.type !== "number") {
            return;
          }
          {
            setDefaultValue(node, "number", node.value);
          }
        }
        function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          var getTargetInstFunc, handleEventFunc;
          if (shouldUseChangeEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForChangeEvent;
          } else if (isTextInputElement(targetNode)) {
            if (isInputEventSupported) {
              getTargetInstFunc = getTargetInstForInputOrChangeEvent;
            } else {
              getTargetInstFunc = getTargetInstForInputEventPolyfill;
              handleEventFunc = handleEventsForInputEventPolyfill;
            }
          } else if (shouldUseClickEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForClickEvent;
          }
          if (getTargetInstFunc) {
            var inst = getTargetInstFunc(domEventName, targetInst);
            if (inst) {
              createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
              return;
            }
          }
          if (handleEventFunc) {
            handleEventFunc(domEventName, targetNode, targetInst);
          }
          if (domEventName === "focusout") {
            handleControlledInputBlur(targetNode);
          }
        }
        function registerEvents$2() {
          registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
          registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
          registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
          registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
        }
        function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
          var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
          if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
            var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
            if (related) {
              if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                return;
              }
            }
          }
          if (!isOutEvent && !isOverEvent) {
            return;
          }
          var win;
          if (nativeEventTarget.window === nativeEventTarget) {
            win = nativeEventTarget;
          } else {
            var doc = nativeEventTarget.ownerDocument;
            if (doc) {
              win = doc.defaultView || doc.parentWindow;
            } else {
              win = window;
            }
          }
          var from;
          var to;
          if (isOutEvent) {
            var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
            from = targetInst;
            to = _related ? getClosestInstanceFromNode(_related) : null;
            if (to !== null) {
              var nearestMounted = getNearestMountedFiber(to);
              if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                to = null;
              }
            }
          } else {
            from = null;
            to = targetInst;
          }
          if (from === to) {
            return;
          }
          var SyntheticEventCtor = SyntheticMouseEvent;
          var leaveEventType = "onMouseLeave";
          var enterEventType = "onMouseEnter";
          var eventTypePrefix = "mouse";
          if (domEventName === "pointerout" || domEventName === "pointerover") {
            SyntheticEventCtor = SyntheticPointerEvent;
            leaveEventType = "onPointerLeave";
            enterEventType = "onPointerEnter";
            eventTypePrefix = "pointer";
          }
          var fromNode = from == null ? win : getNodeFromInstance(from);
          var toNode = to == null ? win : getNodeFromInstance(to);
          var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
          leave.target = fromNode;
          leave.relatedTarget = toNode;
          var enter = null;
          var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (nativeTargetInst === targetInst) {
            var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
            enterEvent.target = toNode;
            enterEvent.relatedTarget = fromNode;
            enter = enterEvent;
          }
          accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
        }
        function is(x, y) {
          return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is;
        var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
        function shallowEqual(objA, objB) {
          if (objectIs(objA, objB)) {
            return true;
          }
          if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
            return false;
          }
          var keysA = Object.keys(objA);
          var keysB = Object.keys(objB);
          if (keysA.length !== keysB.length) {
            return false;
          }
          for (var i = 0; i < keysA.length; i++) {
            if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
              return false;
            }
          }
          return true;
        }
        function getLeafNode(node) {
          while (node && node.firstChild) {
            node = node.firstChild;
          }
          return node;
        }
        function getSiblingNode(node) {
          while (node) {
            if (node.nextSibling) {
              return node.nextSibling;
            }
            node = node.parentNode;
          }
        }
        function getNodeForCharacterOffset(root2, offset) {
          var node = getLeafNode(root2);
          var nodeStart = 0;
          var nodeEnd = 0;
          while (node) {
            if (node.nodeType === TEXT_NODE) {
              nodeEnd = nodeStart + node.textContent.length;
              if (nodeStart <= offset && nodeEnd >= offset) {
                return {
                  node,
                  offset: offset - nodeStart
                };
              }
              nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
          }
        }
        function getOffsets(outerNode) {
          var ownerDocument = outerNode.ownerDocument;
          var win = ownerDocument && ownerDocument.defaultView || window;
          var selection = win.getSelection && win.getSelection();
          if (!selection || selection.rangeCount === 0) {
            return null;
          }
          var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
          try {
            anchorNode.nodeType;
            focusNode.nodeType;
          } catch (e) {
            return null;
          }
          return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
        }
        function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
          var length = 0;
          var start = -1;
          var end = -1;
          var indexWithinAnchor = 0;
          var indexWithinFocus = 0;
          var node = outerNode;
          var parentNode = null;
          outer: while (true) {
            var next = null;
            while (true) {
              if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                start = length + anchorOffset;
              }
              if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                end = length + focusOffset;
              }
              if (node.nodeType === TEXT_NODE) {
                length += node.nodeValue.length;
              }
              if ((next = node.firstChild) === null) {
                break;
              }
              parentNode = node;
              node = next;
            }
            while (true) {
              if (node === outerNode) {
                break outer;
              }
              if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                start = length;
              }
              if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                end = length;
              }
              if ((next = node.nextSibling) !== null) {
                break;
              }
              node = parentNode;
              parentNode = node.parentNode;
            }
            node = next;
          }
          if (start === -1 || end === -1) {
            return null;
          }
          return {
            start,
            end
          };
        }
        function setOffsets(node, offsets) {
          var doc = node.ownerDocument || document;
          var win = doc && doc.defaultView || window;
          if (!win.getSelection) {
            return;
          }
          var selection = win.getSelection();
          var length = node.textContent.length;
          var start = Math.min(offsets.start, length);
          var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
          if (!selection.extend && start > end) {
            var temp = end;
            end = start;
            start = temp;
          }
          var startMarker = getNodeForCharacterOffset(node, start);
          var endMarker = getNodeForCharacterOffset(node, end);
          if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
              return;
            }
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start > end) {
              selection.addRange(range);
              selection.extend(endMarker.node, endMarker.offset);
            } else {
              range.setEnd(endMarker.node, endMarker.offset);
              selection.addRange(range);
            }
          }
        }
        function isTextNode(node) {
          return node && node.nodeType === TEXT_NODE;
        }
        function containsNode(outerNode, innerNode) {
          if (!outerNode || !innerNode) {
            return false;
          } else if (outerNode === innerNode) {
            return true;
          } else if (isTextNode(outerNode)) {
            return false;
          } else if (isTextNode(innerNode)) {
            return containsNode(outerNode, innerNode.parentNode);
          } else if (("contains" in outerNode)) {
            return outerNode.contains(innerNode);
          } else if (outerNode.compareDocumentPosition) {
            return !!(outerNode.compareDocumentPosition(innerNode) & 16);
          } else {
            return false;
          }
        }
        function isInDocument(node) {
          return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
        }
        function isSameOriginFrame(iframe) {
          try {
            return typeof iframe.contentWindow.location.href === "string";
          } catch (err) {
            return false;
          }
        }
        function getActiveElementDeep() {
          var win = window;
          var element = getActiveElement();
          while (element instanceof win.HTMLIFrameElement) {
            if (isSameOriginFrame(element)) {
              win = element.contentWindow;
            } else {
              return element;
            }
            element = getActiveElement(win.document);
          }
          return element;
        }
        function hasSelectionCapabilities(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
        }
        function getSelectionInformation() {
          var focusedElem = getActiveElementDeep();
          return {
            focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
          };
        }
        function restoreSelection(priorSelectionInformation) {
          var curFocusedElem = getActiveElementDeep();
          var priorFocusedElem = priorSelectionInformation.focusedElem;
          var priorSelectionRange = priorSelectionInformation.selectionRange;
          if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
              setSelection(priorFocusedElem, priorSelectionRange);
            }
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while (ancestor = ancestor.parentNode) {
              if (ancestor.nodeType === ELEMENT_NODE) {
                ancestors.push({
                  element: ancestor,
                  left: ancestor.scrollLeft,
                  top: ancestor.scrollTop
                });
              }
            }
            if (typeof priorFocusedElem.focus === "function") {
              priorFocusedElem.focus();
            }
            for (var i = 0; i < ancestors.length; i++) {
              var info = ancestors[i];
              info.element.scrollLeft = info.left;
              info.element.scrollTop = info.top;
            }
          }
        }
        function getSelection(input) {
          var selection;
          if (("selectionStart" in input)) {
            selection = {
              start: input.selectionStart,
              end: input.selectionEnd
            };
          } else {
            selection = getOffsets(input);
          }
          return selection || ({
            start: 0,
            end: 0
          });
        }
        function setSelection(input, offsets) {
          var start = offsets.start;
          var end = offsets.end;
          if (end === void 0) {
            end = start;
          }
          if (("selectionStart" in input)) {
            input.selectionStart = start;
            input.selectionEnd = Math.min(end, input.value.length);
          } else {
            setOffsets(input, offsets);
          }
        }
        var skipSelectionChangeEvent = canUseDOM && ("documentMode" in document) && document.documentMode <= 11;
        function registerEvents$3() {
          registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
        }
        var activeElement$1 = null;
        var activeElementInst$1 = null;
        var lastSelection = null;
        var mouseDown = false;
        function getSelection$1(node) {
          if (("selectionStart" in node) && hasSelectionCapabilities(node)) {
            return {
              start: node.selectionStart,
              end: node.selectionEnd
            };
          } else {
            var win = node.ownerDocument && node.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
              anchorNode: selection.anchorNode,
              anchorOffset: selection.anchorOffset,
              focusNode: selection.focusNode,
              focusOffset: selection.focusOffset
            };
          }
        }
        function getEventTargetDocument(eventTarget) {
          return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
        }
        function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
          var doc = getEventTargetDocument(nativeEventTarget);
          if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
            return;
          }
          var currentSelection = getSelection$1(activeElement$1);
          if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.target = activeElement$1;
            }
          }
        }
        function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          switch (domEventName) {
            case "focusin":
              if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                activeElement$1 = targetNode;
                activeElementInst$1 = targetInst;
                lastSelection = null;
              }
              break;
            case "focusout":
              activeElement$1 = null;
              activeElementInst$1 = null;
              lastSelection = null;
              break;
            case "mousedown":
              mouseDown = true;
              break;
            case "contextmenu":
            case "mouseup":
            case "dragend":
              mouseDown = false;
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
              break;
            case "selectionchange":
              if (skipSelectionChangeEvent) {
                break;
              }
            case "keydown":
            case "keyup":
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
          }
        }
        function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var reactName = topLevelEventsToReactNames.get(domEventName);
          if (reactName === void 0) {
            return;
          }
          var SyntheticEventCtor = SyntheticEvent;
          var reactEventType = domEventName;
          switch (domEventName) {
            case "keypress":
              if (getEventCharCode(nativeEvent) === 0) {
                return;
              }
            case "keydown":
            case "keyup":
              SyntheticEventCtor = SyntheticKeyboardEvent;
              break;
            case "focusin":
              reactEventType = "focus";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "focusout":
              reactEventType = "blur";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "beforeblur":
            case "afterblur":
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "click":
              if (nativeEvent.button === 2) {
                return;
              }
            case "auxclick":
            case "dblclick":
            case "mousedown":
            case "mousemove":
            case "mouseup":
            case "mouseout":
            case "mouseover":
            case "contextmenu":
              SyntheticEventCtor = SyntheticMouseEvent;
              break;
            case "drag":
            case "dragend":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "dragstart":
            case "drop":
              SyntheticEventCtor = SyntheticDragEvent;
              break;
            case "touchcancel":
            case "touchend":
            case "touchmove":
            case "touchstart":
              SyntheticEventCtor = SyntheticTouchEvent;
              break;
            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
              SyntheticEventCtor = SyntheticAnimationEvent;
              break;
            case TRANSITION_END:
              SyntheticEventCtor = SyntheticTransitionEvent;
              break;
            case "scroll":
              SyntheticEventCtor = SyntheticUIEvent;
              break;
            case "wheel":
              SyntheticEventCtor = SyntheticWheelEvent;
              break;
            case "copy":
            case "cut":
            case "paste":
              SyntheticEventCtor = SyntheticClipboardEvent;
              break;
            case "gotpointercapture":
            case "lostpointercapture":
            case "pointercancel":
            case "pointerdown":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "pointerup":
              SyntheticEventCtor = SyntheticPointerEvent;
              break;
          }
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          {
            var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
            var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
            if (_listeners.length > 0) {
              var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event: _event,
                listeners: _listeners
              });
            }
          }
        }
        registerSimpleEvents();
        registerEvents$2();
        registerEvents$1();
        registerEvents$3();
        registerEvents();
        function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
          if (shouldProcessPolyfillPlugins) {
            extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
        }
        var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
        var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
        function executeDispatch(event, listener, currentTarget) {
          var type = event.type || "unknown-event";
          event.currentTarget = currentTarget;
          invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
          event.currentTarget = null;
        }
        function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
          var previousInstance;
          if (inCapturePhase) {
            for (var i = dispatchListeners.length - 1; i >= 0; i--) {
              var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
              if (instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }
              executeDispatch(event, listener, currentTarget);
              previousInstance = instance;
            }
          } else {
            for (var _i = 0; _i < dispatchListeners.length; _i++) {
              var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
              if (_instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }
              executeDispatch(event, _listener, _currentTarget);
              previousInstance = _instance;
            }
          }
        }
        function processDispatchQueue(dispatchQueue, eventSystemFlags) {
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          for (var i = 0; i < dispatchQueue.length; i++) {
            var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
            processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
          }
          rethrowCaughtError();
        }
        function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var nativeEventTarget = getEventTarget(nativeEvent);
          var dispatchQueue = [];
          extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          processDispatchQueue(dispatchQueue, eventSystemFlags);
        }
        function listenToNonDelegatedEvent(domEventName, targetElement) {
          var isCapturePhaseListener = false;
          var listenerSet = getEventListenerSet(targetElement);
          var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
          if (!listenerSet.has(listenerSetKey)) {
            addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
          }
        }
        var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
        function listenToAllSupportedEvents(rootContainerElement) {
          {
            if (rootContainerElement[listeningMarker]) {
              return;
            }
            rootContainerElement[listeningMarker] = true;
            allNativeEvents.forEach(function (domEventName) {
              if (!nonDelegatedEvents.has(domEventName)) {
                listenToNativeEvent(domEventName, false, rootContainerElement, null);
              }
              listenToNativeEvent(domEventName, true, rootContainerElement, null);
            });
          }
        }
        function listenToNativeEvent(domEventName, isCapturePhaseListener, rootContainerElement, targetElement) {
          var eventSystemFlags = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;
          var target = rootContainerElement;
          if (domEventName === "selectionchange" && rootContainerElement.nodeType !== DOCUMENT_NODE) {
            target = rootContainerElement.ownerDocument;
          }
          if (targetElement !== null && !isCapturePhaseListener && nonDelegatedEvents.has(domEventName)) {
            if (domEventName !== "scroll") {
              return;
            }
            eventSystemFlags |= IS_NON_DELEGATED;
            target = targetElement;
          }
          var listenerSet = getEventListenerSet(target);
          var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
          if (!listenerSet.has(listenerSetKey)) {
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
          }
        }
        function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
          var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
          var isPassiveListener = void 0;
          if (passiveBrowserEventsSupported) {
            if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
              isPassiveListener = true;
            }
          }
          targetContainer = targetContainer;
          var unsubscribeListener;
          if (isCapturePhaseListener) {
            if (isPassiveListener !== void 0) {
              unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            } else {
              unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
            }
          } else {
            if (isPassiveListener !== void 0) {
              unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            } else {
              unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
            }
          }
        }
        function isMatchingRootContainer(grandContainer, targetContainer) {
          return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
        }
        function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var ancestorInst = targetInst;
          if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
            var targetContainerNode = targetContainer;
            if (targetInst !== null) {
              var node = targetInst;
              mainLoop: while (true) {
                if (node === null) {
                  return;
                }
                var nodeTag = node.tag;
                if (nodeTag === HostRoot || nodeTag === HostPortal) {
                  var container = node.stateNode.containerInfo;
                  if (isMatchingRootContainer(container, targetContainerNode)) {
                    break;
                  }
                  if (nodeTag === HostPortal) {
                    var grandNode = node.return;
                    while (grandNode !== null) {
                      var grandTag = grandNode.tag;
                      if (grandTag === HostRoot || grandTag === HostPortal) {
                        var grandContainer = grandNode.stateNode.containerInfo;
                        if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                          return;
                        }
                      }
                      grandNode = grandNode.return;
                    }
                  }
                  while (container !== null) {
                    var parentNode = getClosestInstanceFromNode(container);
                    if (parentNode === null) {
                      return;
                    }
                    var parentTag = parentNode.tag;
                    if (parentTag === HostComponent || parentTag === HostText) {
                      node = ancestorInst = parentNode;
                      continue mainLoop;
                    }
                    container = container.parentNode;
                  }
                }
                node = node.return;
              }
            }
          }
          batchedEventUpdates(function () {
            return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
          });
        }
        function createDispatchListener(instance, listener, currentTarget) {
          return {
            instance,
            listener,
            currentTarget
          };
        }
        function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly) {
          var captureName = reactName !== null ? reactName + "Capture" : null;
          var reactEventName = inCapturePhase ? captureName : reactName;
          var listeners = [];
          var instance = targetFiber;
          var lastHostComponent = null;
          while (instance !== null) {
            var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
            if (tag === HostComponent && stateNode !== null) {
              lastHostComponent = stateNode;
              if (reactEventName !== null) {
                var listener = getListener(instance, reactEventName);
                if (listener != null) {
                  listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                }
              }
            }
            if (accumulateTargetOnly) {
              break;
            }
            instance = instance.return;
          }
          return listeners;
        }
        function accumulateTwoPhaseListeners(targetFiber, reactName) {
          var captureName = reactName + "Capture";
          var listeners = [];
          var instance = targetFiber;
          while (instance !== null) {
            var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
            if (tag === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              var captureListener = getListener(instance, captureName);
              if (captureListener != null) {
                listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
              }
              var bubbleListener = getListener(instance, reactName);
              if (bubbleListener != null) {
                listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
              }
            }
            instance = instance.return;
          }
          return listeners;
        }
        function getParent(inst) {
          if (inst === null) {
            return null;
          }
          do {
            inst = inst.return;
          } while (inst && inst.tag !== HostComponent);
          if (inst) {
            return inst;
          }
          return null;
        }
        function getLowestCommonAncestor(instA, instB) {
          var nodeA = instA;
          var nodeB = instB;
          var depthA = 0;
          for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
            depthA++;
          }
          var depthB = 0;
          for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
            depthB++;
          }
          while (depthA - depthB > 0) {
            nodeA = getParent(nodeA);
            depthA--;
          }
          while (depthB - depthA > 0) {
            nodeB = getParent(nodeB);
            depthB--;
          }
          var depth = depthA;
          while (depth--) {
            if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
              return nodeA;
            }
            nodeA = getParent(nodeA);
            nodeB = getParent(nodeB);
          }
          return null;
        }
        function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
          var registrationName = event._reactName;
          var listeners = [];
          var instance = target;
          while (instance !== null) {
            if (instance === common) {
              break;
            }
            var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
            if (alternate !== null && alternate === common) {
              break;
            }
            if (tag === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              if (inCapturePhase) {
                var captureListener = getListener(instance, registrationName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
              } else if (!inCapturePhase) {
                var bubbleListener = getListener(instance, registrationName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
            }
            instance = instance.return;
          }
          if (listeners.length !== 0) {
            dispatchQueue.push({
              event,
              listeners
            });
          }
        }
        function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
          var common = from && to ? getLowestCommonAncestor(from, to) : null;
          if (from !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
          }
          if (to !== null && enterEvent !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
          }
        }
        function getListenerSetKey(domEventName, capture) {
          return domEventName + "__" + (capture ? "capture" : "bubble");
        }
        var didWarnInvalidHydration = false;
        var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
        var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
        var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
        var AUTOFOCUS = "autoFocus";
        var CHILDREN = "children";
        var STYLE = "style";
        var HTML$1 = "__html";
        var HTML_NAMESPACE$1 = Namespaces.html;
        var warnedUnknownTags;
        var suppressHydrationWarning;
        var validatePropertiesInDevelopment;
        var warnForTextDifference;
        var warnForPropDifference;
        var warnForExtraAttributes;
        var warnForInvalidEventListener;
        var canDiffStyleForHydrationWarning;
        var normalizeMarkupForTextOrAttribute;
        var normalizeHTML;
        {
          warnedUnknownTags = {
            dialog: true,
            webview: true
          };
          validatePropertiesInDevelopment = function (type, props) {
            validateProperties(type, props);
            validateProperties$1(type, props);
            validateProperties$2(type, props, {
              registrationNameDependencies,
              possibleRegistrationNames
            });
          };
          canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          normalizeMarkupForTextOrAttribute = function (markup) {
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          };
          warnForTextDifference = function (serverText, clientText) {
            if (didWarnInvalidHydration) {
              return;
            }
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
          };
          warnForPropDifference = function (propName, serverValue, clientValue) {
            if (didWarnInvalidHydration) {
              return;
            }
            var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
            var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
            if (normalizedServerValue === normalizedClientValue) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
          };
          warnForExtraAttributes = function (attributeNames) {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            var names = [];
            attributeNames.forEach(function (name) {
              names.push(name);
            });
            error("Extra attributes from the server: %s", names);
          };
          warnForInvalidEventListener = function (registrationName, listener) {
            if (listener === false) {
              error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
            } else {
              error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
            }
          };
          normalizeHTML = function (parent, html) {
            var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
            testElement.innerHTML = html;
            return testElement.innerHTML;
          };
        }
        function getOwnerDocumentFromRootContainer(rootContainerElement) {
          return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
        }
        function noop() {}
        function trapClickOnNonInteractiveElement(node) {
          node.onclick = noop;
        }
        function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
          for (var propKey in nextProps) {
            if (!nextProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              if (nextHtml != null) {
                setInnerHTML(domElement, nextHtml);
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                var canSetTextContent = tag !== "textarea" || nextProp !== "";
                if (canSetTextContent) {
                  setTextContent(domElement, nextProp);
                }
              } else if (typeof nextProp === "number") {
                setTextContent(domElement, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
            } else if (nextProp != null) {
              setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
            }
          }
        }
        function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
          for (var i = 0; i < updatePayload.length; i += 2) {
            var propKey = updatePayload[i];
            var propValue = updatePayload[i + 1];
            if (propKey === STYLE) {
              setValueForStyles(domElement, propValue);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              setInnerHTML(domElement, propValue);
            } else if (propKey === CHILDREN) {
              setTextContent(domElement, propValue);
            } else {
              setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
            }
          }
        }
        function createElement(type, props, rootContainerElement, parentNamespace) {
          var isCustomComponentTag;
          var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
          var domElement;
          var namespaceURI = parentNamespace;
          if (namespaceURI === HTML_NAMESPACE$1) {
            namespaceURI = getIntrinsicNamespace(type);
          }
          if (namespaceURI === HTML_NAMESPACE$1) {
            {
              isCustomComponentTag = isCustomComponent(type, props);
              if (!isCustomComponentTag && type !== type.toLowerCase()) {
                error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
              }
            }
            if (type === "script") {
              var div = ownerDocument.createElement("div");
              div.innerHTML = "<script></script>";
              var firstChild = div.firstChild;
              domElement = div.removeChild(firstChild);
            } else if (typeof props.is === "string") {
              domElement = ownerDocument.createElement(type, {
                is: props.is
              });
            } else {
              domElement = ownerDocument.createElement(type);
              if (type === "select") {
                var node = domElement;
                if (props.multiple) {
                  node.multiple = true;
                } else if (props.size) {
                  node.size = props.size;
                }
              }
            }
          } else {
            domElement = ownerDocument.createElementNS(namespaceURI, type);
          }
          {
            if (namespaceURI === HTML_NAMESPACE$1) {
              if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
              }
            }
          }
          return domElement;
        }
        function createTextNode(text, rootContainerElement) {
          return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
        }
        function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
          var isCustomComponentTag = isCustomComponent(tag, rawProps);
          {
            validatePropertiesInDevelopment(tag, rawProps);
          }
          var props;
          switch (tag) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              props = rawProps;
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", domElement);
              props = rawProps;
              break;
            case "video":
            case "audio":
              for (var i = 0; i < mediaEventTypes.length; i++) {
                listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
              }
              props = rawProps;
              break;
            case "source":
              listenToNonDelegatedEvent("error", domElement);
              props = rawProps;
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              props = rawProps;
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              props = rawProps;
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              props = getHostProps(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "option":
              validateProps(domElement, rawProps);
              props = getHostProps$1(domElement, rawProps);
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              props = getHostProps$2(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              props = getHostProps$3(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            default:
              props = rawProps;
          }
          assertValidProps(tag, props);
          setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, false);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "option":
              postMountWrapper$1(domElement, rawProps);
              break;
            case "select":
              postMountWrapper$2(domElement, rawProps);
              break;
            default:
              if (typeof props.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
        }
        function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
          {
            validatePropertiesInDevelopment(tag, nextRawProps);
          }
          var updatePayload = null;
          var lastProps;
          var nextProps;
          switch (tag) {
            case "input":
              lastProps = getHostProps(domElement, lastRawProps);
              nextProps = getHostProps(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "option":
              lastProps = getHostProps$1(domElement, lastRawProps);
              nextProps = getHostProps$1(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "select":
              lastProps = getHostProps$2(domElement, lastRawProps);
              nextProps = getHostProps$2(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "textarea":
              lastProps = getHostProps$3(domElement, lastRawProps);
              nextProps = getHostProps$3(domElement, nextRawProps);
              updatePayload = [];
              break;
            default:
              lastProps = lastRawProps;
              nextProps = nextRawProps;
              if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          assertValidProps(tag, nextProps);
          var propKey;
          var styleName;
          var styleUpdates = null;
          for (propKey in lastProps) {
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
              continue;
            }
            if (propKey === STYLE) {
              var lastStyle = lastProps[propKey];
              for (styleName in lastStyle) {
                if (lastStyle.hasOwnProperty(styleName)) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = "";
                }
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ; else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (!updatePayload) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, null);
            }
          }
          for (propKey in nextProps) {
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : void 0;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
              continue;
            }
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              if (lastProp) {
                for (styleName in lastProp) {
                  if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
                for (styleName in nextProp) {
                  if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = nextProp[styleName];
                  }
                }
              } else {
                if (!styleUpdates) {
                  if (!updatePayload) {
                    updatePayload = [];
                  }
                  updatePayload.push(propKey, styleUpdates);
                }
                styleUpdates = nextProp;
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
              if (nextHtml != null) {
                if (lastHtml !== nextHtml) {
                  (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string" || typeof nextProp === "number") {
                (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
              if (!updatePayload && lastProp !== nextProp) {
                updatePayload = [];
              }
            } else if (typeof nextProp === "object" && nextProp !== null && nextProp.$$typeof === REACT_OPAQUE_ID_TYPE) {
              nextProp.toString();
            } else {
              (updatePayload = updatePayload || []).push(propKey, nextProp);
            }
          }
          if (styleUpdates) {
            {
              validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            }
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
          }
          return updatePayload;
        }
        function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
          if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
            updateChecked(domElement, nextRawProps);
          }
          var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
          var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
          updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
          switch (tag) {
            case "input":
              updateWrapper(domElement, nextRawProps);
              break;
            case "textarea":
              updateWrapper$1(domElement, nextRawProps);
              break;
            case "select":
              postUpdateWrapper(domElement, nextRawProps);
              break;
          }
        }
        function getPossibleStandardName(propName) {
          {
            var lowerCasedName = propName.toLowerCase();
            if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              return null;
            }
            return possibleStandardNames[lowerCasedName] || null;
          }
        }
        function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
          var isCustomComponentTag;
          var extraAttributeNames;
          {
            suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
            isCustomComponentTag = isCustomComponent(tag, rawProps);
            validatePropertiesInDevelopment(tag, rawProps);
          }
          switch (tag) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "video":
            case "audio":
              for (var i = 0; i < mediaEventTypes.length; i++) {
                listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
              }
              break;
            case "source":
              listenToNonDelegatedEvent("error", domElement);
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "option":
              validateProps(domElement, rawProps);
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
          }
          assertValidProps(tag, rawProps);
          {
            extraAttributeNames = new Set();
            var attributes = domElement.attributes;
            for (var _i = 0; _i < attributes.length; _i++) {
              var name = attributes[_i].name.toLowerCase();
              switch (name) {
                case "data-reactroot":
                  break;
                case "value":
                  break;
                case "checked":
                  break;
                case "selected":
                  break;
                default:
                  extraAttributeNames.add(attributes[_i].name);
              }
            }
          }
          var updatePayload = null;
          for (var propKey in rawProps) {
            if (!rawProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                if (domElement.textContent !== nextProp) {
                  if (!suppressHydrationWarning) {
                    warnForTextDifference(domElement.textContent, nextProp);
                  }
                  updatePayload = [CHILDREN, nextProp];
                }
              } else if (typeof nextProp === "number") {
                if (domElement.textContent !== "" + nextProp) {
                  if (!suppressHydrationWarning) {
                    warnForTextDifference(domElement.textContent, nextProp);
                  }
                  updatePayload = [CHILDREN, "" + nextProp];
                }
              }
            } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
            } else if (typeof isCustomComponentTag === "boolean") {
              var serverValue = void 0;
              var propertyInfo = getPropertyInfo(propKey);
              if (suppressHydrationWarning) ; else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected") ; else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var serverHTML = domElement.innerHTML;
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  var expectedHTML = normalizeHTML(domElement, nextHtml);
                  if (expectedHTML !== serverHTML) {
                    warnForPropDifference(propKey, serverHTML, expectedHTML);
                  }
                }
              } else if (propKey === STYLE) {
                extraAttributeNames.delete(propKey);
                if (canDiffStyleForHydrationWarning) {
                  var expectedStyle = createDangerousStringForStyles(nextProp);
                  serverValue = domElement.getAttribute("style");
                  if (expectedStyle !== serverValue) {
                    warnForPropDifference(propKey, serverValue, expectedStyle);
                  }
                }
              } else if (isCustomComponentTag) {
                extraAttributeNames.delete(propKey.toLowerCase());
                serverValue = getValueForAttribute(domElement, propKey, nextProp);
                if (nextProp !== serverValue) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                var isMismatchDueToBadCasing = false;
                if (propertyInfo !== null) {
                  extraAttributeNames.delete(propertyInfo.attributeName);
                  serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                } else {
                  var ownNamespace = parentNamespace;
                  if (ownNamespace === HTML_NAMESPACE$1) {
                    ownNamespace = getIntrinsicNamespace(tag);
                  }
                  if (ownNamespace === HTML_NAMESPACE$1) {
                    extraAttributeNames.delete(propKey.toLowerCase());
                  } else {
                    var standardName = getPossibleStandardName(propKey);
                    if (standardName !== null && standardName !== propKey) {
                      isMismatchDueToBadCasing = true;
                      extraAttributeNames.delete(standardName);
                    }
                    extraAttributeNames.delete(propKey);
                  }
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                }
                if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              }
            }
          }
          {
            if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
              warnForExtraAttributes(extraAttributeNames);
            }
          }
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, true);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "select":
            case "option":
              break;
            default:
              if (typeof rawProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          return updatePayload;
        }
        function diffHydratedText(textNode, text) {
          var isDifferent = textNode.nodeValue !== text;
          return isDifferent;
        }
        function warnForUnmatchedText(textNode, text) {
          {
            warnForTextDifference(textNode.nodeValue, text);
          }
        }
        function warnForDeletedHydratableElement(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
          }
        }
        function warnForDeletedHydratableText(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedElement(parentNode, tag, props) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedText(parentNode, text) {
          {
            if (text === "") {
              return;
            }
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
          }
        }
        function restoreControlledState$3(domElement, tag, props) {
          switch (tag) {
            case "input":
              restoreControlledState(domElement, props);
              return;
            case "textarea":
              restoreControlledState$2(domElement, props);
              return;
            case "select":
              restoreControlledState$1(domElement, props);
              return;
          }
        }
        var validateDOMNesting = function () {};
        var updatedAncestorInfo = function () {};
        {
          var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
          var inScopeTags = ["applet", "caption", "html", "table", "td", "th", "marquee", "object", "template", "foreignObject", "desc", "title"];
          var buttonScopeTags = inScopeTags.concat(["button"]);
          var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
          var emptyAncestorInfo = {
            current: null,
            formTag: null,
            aTagInScope: null,
            buttonTagInScope: null,
            nobrTagInScope: null,
            pTagInButtonScope: null,
            listItemTagAutoclosing: null,
            dlItemTagAutoclosing: null
          };
          updatedAncestorInfo = function (oldInfo, tag) {
            var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
            var info = {
              tag
            };
            if (inScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.aTagInScope = null;
              ancestorInfo.buttonTagInScope = null;
              ancestorInfo.nobrTagInScope = null;
            }
            if (buttonScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.pTagInButtonScope = null;
            }
            if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
              ancestorInfo.listItemTagAutoclosing = null;
              ancestorInfo.dlItemTagAutoclosing = null;
            }
            ancestorInfo.current = info;
            if (tag === "form") {
              ancestorInfo.formTag = info;
            }
            if (tag === "a") {
              ancestorInfo.aTagInScope = info;
            }
            if (tag === "button") {
              ancestorInfo.buttonTagInScope = info;
            }
            if (tag === "nobr") {
              ancestorInfo.nobrTagInScope = info;
            }
            if (tag === "p") {
              ancestorInfo.pTagInButtonScope = info;
            }
            if (tag === "li") {
              ancestorInfo.listItemTagAutoclosing = info;
            }
            if (tag === "dd" || tag === "dt") {
              ancestorInfo.dlItemTagAutoclosing = info;
            }
            return ancestorInfo;
          };
          var isTagValidWithParent = function (tag, parentTag) {
            switch (parentTag) {
              case "select":
                return tag === "option" || tag === "optgroup" || tag === "#text";
              case "optgroup":
                return tag === "option" || tag === "#text";
              case "option":
                return tag === "#text";
              case "tr":
                return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
              case "tbody":
              case "thead":
              case "tfoot":
                return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
              case "colgroup":
                return tag === "col" || tag === "template";
              case "table":
                return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
              case "head":
                return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
              case "html":
                return tag === "head" || tag === "body" || tag === "frameset";
              case "frameset":
                return tag === "frame";
              case "#document":
                return tag === "html";
            }
            switch (tag) {
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
              case "rp":
              case "rt":
                return impliedEndTags.indexOf(parentTag) === -1;
              case "body":
              case "caption":
              case "col":
              case "colgroup":
              case "frameset":
              case "frame":
              case "head":
              case "html":
              case "tbody":
              case "td":
              case "tfoot":
              case "th":
              case "thead":
              case "tr":
                return parentTag == null;
            }
            return true;
          };
          var findInvalidAncestorForTag = function (tag, ancestorInfo) {
            switch (tag) {
              case "address":
              case "article":
              case "aside":
              case "blockquote":
              case "center":
              case "details":
              case "dialog":
              case "dir":
              case "div":
              case "dl":
              case "fieldset":
              case "figcaption":
              case "figure":
              case "footer":
              case "header":
              case "hgroup":
              case "main":
              case "menu":
              case "nav":
              case "ol":
              case "p":
              case "section":
              case "summary":
              case "ul":
              case "pre":
              case "listing":
              case "table":
              case "hr":
              case "xmp":
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return ancestorInfo.pTagInButtonScope;
              case "form":
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
              case "li":
                return ancestorInfo.listItemTagAutoclosing;
              case "dd":
              case "dt":
                return ancestorInfo.dlItemTagAutoclosing;
              case "button":
                return ancestorInfo.buttonTagInScope;
              case "a":
                return ancestorInfo.aTagInScope;
              case "nobr":
                return ancestorInfo.nobrTagInScope;
            }
            return null;
          };
          var didWarn$1 = {};
          validateDOMNesting = function (childTag, childText, ancestorInfo) {
            ancestorInfo = ancestorInfo || emptyAncestorInfo;
            var parentInfo = ancestorInfo.current;
            var parentTag = parentInfo && parentInfo.tag;
            if (childText != null) {
              if (childTag != null) {
                error("validateDOMNesting: when childText is passed, childTag should be null");
              }
              childTag = "#text";
            }
            var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
            var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
            var invalidParentOrAncestor = invalidParent || invalidAncestor;
            if (!invalidParentOrAncestor) {
              return;
            }
            var ancestorTag = invalidParentOrAncestor.tag;
            var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
            if (didWarn$1[warnKey]) {
              return;
            }
            didWarn$1[warnKey] = true;
            var tagDisplayName = childTag;
            var whitespaceInfo = "";
            if (childTag === "#text") {
              if ((/\S/).test(childText)) {
                tagDisplayName = "Text nodes";
              } else {
                tagDisplayName = "Whitespace text nodes";
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
              }
            } else {
              tagDisplayName = "<" + childTag + ">";
            }
            if (invalidParent) {
              var info = "";
              if (ancestorTag === "table" && childTag === "tr") {
                info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
              }
              error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
            } else {
              error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
            }
          };
        }
        var SUPPRESS_HYDRATION_WARNING$1;
        {
          SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
        }
        var SUSPENSE_START_DATA = "$";
        var SUSPENSE_END_DATA = "/$";
        var SUSPENSE_PENDING_START_DATA = "$?";
        var SUSPENSE_FALLBACK_START_DATA = "$!";
        var STYLE$1 = "style";
        var eventsEnabled = null;
        var selectionInformation = null;
        function shouldAutoFocusHostComponent(type, props) {
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              return !!props.autoFocus;
          }
          return false;
        }
        function getRootHostContext(rootContainerInstance) {
          var type;
          var namespace;
          var nodeType = rootContainerInstance.nodeType;
          switch (nodeType) {
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE:
              {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root2 = rootContainerInstance.documentElement;
                namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
                break;
              }
            default:
              {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
          }
          {
            var validatedTag = type.toLowerCase();
            var ancestorInfo = updatedAncestorInfo(null, validatedTag);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getChildHostContext(parentHostContext, type, rootContainerInstance) {
          {
            var parentHostContextDev = parentHostContext;
            var namespace = getChildNamespace(parentHostContextDev.namespace, type);
            var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getPublicInstance(instance) {
          return instance;
        }
        function prepareForCommit(containerInfo) {
          eventsEnabled = isEnabled();
          selectionInformation = getSelectionInformation();
          var activeInstance = null;
          setEnabled(false);
          return activeInstance;
        }
        function resetAfterCommit(containerInfo) {
          restoreSelection(selectionInformation);
          setEnabled(eventsEnabled);
          eventsEnabled = null;
          selectionInformation = null;
        }
        function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            validateDOMNesting(type, null, hostContextDev.ancestorInfo);
            if (typeof props.children === "string" || typeof props.children === "number") {
              var string = "" + props.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
            parentNamespace = hostContextDev.namespace;
          }
          var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
          precacheFiberNode(internalInstanceHandle, domElement);
          updateFiberProps(domElement, props);
          return domElement;
        }
        function appendInitialChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
          setInitialProperties(domElement, type, props, rootContainerInstance);
          return shouldAutoFocusHostComponent(type, props);
        }
        function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
          {
            var hostContextDev = hostContext;
            if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
              var string = "" + newProps.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
          }
          return diffProperties(domElement, type, oldProps, newProps);
        }
        function shouldSetTextContent(type, props) {
          return type === "textarea" || type === "option" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
        }
        function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
          {
            var hostContextDev = hostContext;
            validateDOMNesting(null, text, hostContextDev.ancestorInfo);
          }
          var textNode = createTextNode(text, rootContainerInstance);
          precacheFiberNode(internalInstanceHandle, textNode);
          return textNode;
        }
        var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
        var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
        var noTimeout = -1;
        function commitMount(domElement, type, newProps, internalInstanceHandle) {
          if (shouldAutoFocusHostComponent(type, newProps)) {
            domElement.focus();
          }
        }
        function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
          updateFiberProps(domElement, newProps);
          updateProperties(domElement, updatePayload, type, oldProps, newProps);
        }
        function resetTextContent(domElement) {
          setTextContent(domElement, "");
        }
        function commitTextUpdate(textInstance, oldText, newText) {
          textInstance.nodeValue = newText;
        }
        function appendChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function appendChildToContainer(container, child) {
          var parentNode;
          if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child, container);
          } else {
            parentNode = container;
            parentNode.appendChild(child);
          }
          var reactRootContainer = container._reactRootContainer;
          if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
            trapClickOnNonInteractiveElement(parentNode);
          }
        }
        function insertBefore(parentInstance, child, beforeChild) {
          parentInstance.insertBefore(child, beforeChild);
        }
        function insertInContainerBefore(container, child, beforeChild) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.insertBefore(child, beforeChild);
          } else {
            container.insertBefore(child, beforeChild);
          }
        }
        function removeChild(parentInstance, child) {
          parentInstance.removeChild(child);
        }
        function removeChildFromContainer(container, child) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.removeChild(child);
          } else {
            container.removeChild(child);
          }
        }
        function hideInstance(instance) {
          instance = instance;
          var style2 = instance.style;
          if (typeof style2.setProperty === "function") {
            style2.setProperty("display", "none", "important");
          } else {
            style2.display = "none";
          }
        }
        function hideTextInstance(textInstance) {
          textInstance.nodeValue = "";
        }
        function unhideInstance(instance, props) {
          instance = instance;
          var styleProp = props[STYLE$1];
          var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
          instance.style.display = dangerousStyleValue("display", display);
        }
        function unhideTextInstance(textInstance, text) {
          textInstance.nodeValue = text;
        }
        function clearContainer(container) {
          if (container.nodeType === ELEMENT_NODE) {
            container.textContent = "";
          } else if (container.nodeType === DOCUMENT_NODE) {
            var body = container.body;
            if (body != null) {
              body.textContent = "";
            }
          }
        }
        function canHydrateInstance(instance, type, props) {
          if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
            return null;
          }
          return instance;
        }
        function canHydrateTextInstance(instance, text) {
          if (text === "" || instance.nodeType !== TEXT_NODE) {
            return null;
          }
          return instance;
        }
        function isSuspenseInstancePending(instance) {
          return instance.data === SUSPENSE_PENDING_START_DATA;
        }
        function isSuspenseInstanceFallback(instance) {
          return instance.data === SUSPENSE_FALLBACK_START_DATA;
        }
        function getNextHydratable(node) {
          for (; node != null; node = node.nextSibling) {
            var nodeType = node.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
              break;
            }
          }
          return node;
        }
        function getNextHydratableSibling(instance) {
          return getNextHydratable(instance.nextSibling);
        }
        function getFirstHydratableChild(parentInstance) {
          return getNextHydratable(parentInstance.firstChild);
        }
        function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          precacheFiberNode(internalInstanceHandle, instance);
          updateFiberProps(instance, props);
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            parentNamespace = hostContextDev.namespace;
          }
          return diffHydratedProperties(instance, type, props, parentNamespace);
        }
        function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
          precacheFiberNode(internalInstanceHandle, textInstance);
          return diffHydratedText(textInstance, text);
        }
        function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
          var node = suspenseInstance.nextSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  return getNextHydratableSibling(node);
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                depth++;
              }
            }
            node = node.nextSibling;
          }
          return null;
        }
        function getParentSuspenseInstance(targetInstance) {
          var node = targetInstance.previousSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                if (depth === 0) {
                  return node;
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_END_DATA) {
                depth++;
              }
            }
            node = node.previousSibling;
          }
          return null;
        }
        function commitHydratedContainer(container) {
          retryIfBlockedOn(container);
        }
        function commitHydratedSuspenseInstance(suspenseInstance) {
          retryIfBlockedOn(suspenseInstance);
        }
        function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
          {
            warnForUnmatchedText(textInstance, text);
          }
        }
        function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForUnmatchedText(textInstance, text);
          }
        }
        function didNotHydrateContainerInstance(parentContainer, instance) {
          {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentContainer, instance);
            } else if (instance.nodeType === COMMENT_NODE) ; else {
              warnForDeletedHydratableText(parentContainer, instance);
            }
          }
        }
        function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentInstance, instance);
            } else if (instance.nodeType === COMMENT_NODE) ; else {
              warnForDeletedHydratableText(parentInstance, instance);
            }
          }
        }
        function didNotFindHydratableContainerInstance(parentContainer, type, props) {
          {
            warnForInsertedHydratedElement(parentContainer, type);
          }
        }
        function didNotFindHydratableContainerTextInstance(parentContainer, text) {
          {
            warnForInsertedHydratedText(parentContainer, text);
          }
        }
        function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForInsertedHydratedElement(parentInstance, type);
          }
        }
        function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForInsertedHydratedText(parentInstance, text);
          }
        }
        function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) ;
        }
        var clientId = 0;
        function makeClientIdInDEV(warnOnAccessInDEV) {
          var id = "r:" + (clientId++).toString(36);
          return {
            toString: function () {
              warnOnAccessInDEV();
              return id;
            },
            valueOf: function () {
              warnOnAccessInDEV();
              return id;
            }
          };
        }
        function isOpaqueHydratingObject(value) {
          return value !== null && typeof value === "object" && value.$$typeof === REACT_OPAQUE_ID_TYPE;
        }
        function makeOpaqueHydratingObject(attemptToReadValue) {
          return {
            $$typeof: REACT_OPAQUE_ID_TYPE,
            toString: attemptToReadValue,
            valueOf: attemptToReadValue
          };
        }
        function preparePortalMount(portalInstance) {
          {
            listenToAllSupportedEvents(portalInstance);
          }
        }
        var randomKey = Math.random().toString(36).slice(2);
        var internalInstanceKey = "__reactFiber$" + randomKey;
        var internalPropsKey = "__reactProps$" + randomKey;
        var internalContainerInstanceKey = "__reactContainer$" + randomKey;
        var internalEventHandlersKey = "__reactEvents$" + randomKey;
        function precacheFiberNode(hostInst, node) {
          node[internalInstanceKey] = hostInst;
        }
        function markContainerAsRoot(hostRoot, node) {
          node[internalContainerInstanceKey] = hostRoot;
        }
        function unmarkContainerAsRoot(node) {
          node[internalContainerInstanceKey] = null;
        }
        function isContainerMarkedAsRoot(node) {
          return !!node[internalContainerInstanceKey];
        }
        function getClosestInstanceFromNode(targetNode) {
          var targetInst = targetNode[internalInstanceKey];
          if (targetInst) {
            return targetInst;
          }
          var parentNode = targetNode.parentNode;
          while (parentNode) {
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
            if (targetInst) {
              var alternate = targetInst.alternate;
              if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                var suspenseInstance = getParentSuspenseInstance(targetNode);
                while (suspenseInstance !== null) {
                  var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                  if (targetSuspenseInst) {
                    return targetSuspenseInst;
                  }
                  suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                }
              }
              return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
          }
          return null;
        }
        function getInstanceFromNode(node) {
          var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
          if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
              return inst;
            } else {
              return null;
            }
          }
          return null;
        }
        function getNodeFromInstance(inst) {
          if (inst.tag === HostComponent || inst.tag === HostText) {
            return inst.stateNode;
          }
          {
            {
              throw Error("getNodeFromInstance: Invalid argument.");
            }
          }
        }
        function getFiberCurrentPropsFromNode(node) {
          return node[internalPropsKey] || null;
        }
        function updateFiberProps(node, props) {
          node[internalPropsKey] = props;
        }
        function getEventListenerSet(node) {
          var elementListenerSet = node[internalEventHandlersKey];
          if (elementListenerSet === void 0) {
            elementListenerSet = node[internalEventHandlersKey] = new Set();
          }
          return elementListenerSet;
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has2 = Function.call.bind(Object.prototype.hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has2(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !((error$1.message in loggedTypeFailures))) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var valueStack = [];
        var fiberStack;
        {
          fiberStack = [];
        }
        var index = -1;
        function createCursor(defaultValue) {
          return {
            current: defaultValue
          };
        }
        function pop(cursor, fiber) {
          if (index < 0) {
            {
              error("Unexpected pop.");
            }
            return;
          }
          {
            if (fiber !== fiberStack[index]) {
              error("Unexpected Fiber popped.");
            }
          }
          cursor.current = valueStack[index];
          valueStack[index] = null;
          {
            fiberStack[index] = null;
          }
          index--;
        }
        function push(cursor, value, fiber) {
          index++;
          valueStack[index] = cursor.current;
          {
            fiberStack[index] = fiber;
          }
          cursor.current = value;
        }
        var warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        var contextStackCursor = createCursor(emptyContextObject);
        var didPerformWorkStackCursor = createCursor(false);
        var previousContext = emptyContextObject;
        function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
          {
            if (didPushOwnContextIfProvider && isContextProvider(Component)) {
              return previousContext;
            }
            return contextStackCursor.current;
          }
        }
        function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
          {
            var instance = workInProgress2.stateNode;
            instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
            instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
          }
        }
        function getMaskedContext(workInProgress2, unmaskedContext) {
          {
            var type = workInProgress2.type;
            var contextTypes = type.contextTypes;
            if (!contextTypes) {
              return emptyContextObject;
            }
            var instance = workInProgress2.stateNode;
            if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
              return instance.__reactInternalMemoizedMaskedChildContext;
            }
            var context = {};
            for (var key in contextTypes) {
              context[key] = unmaskedContext[key];
            }
            {
              var name = getComponentName(type) || "Unknown";
              checkPropTypes(contextTypes, context, "context", name);
            }
            if (instance) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return context;
          }
        }
        function hasContextChanged() {
          {
            return didPerformWorkStackCursor.current;
          }
        }
        function isContextProvider(type) {
          {
            var childContextTypes = type.childContextTypes;
            return childContextTypes !== null && childContextTypes !== void 0;
          }
        }
        function popContext(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function popTopLevelContextObject(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function pushTopLevelContextObject(fiber, context, didChange) {
          {
            if (!(contextStackCursor.current === emptyContextObject)) {
              {
                throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            push(contextStackCursor, context, fiber);
            push(didPerformWorkStackCursor, didChange, fiber);
          }
        }
        function processChildContext(fiber, type, parentContext) {
          {
            var instance = fiber.stateNode;
            var childContextTypes = type.childContextTypes;
            if (typeof instance.getChildContext !== "function") {
              {
                var componentName = getComponentName(type) || "Unknown";
                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                }
              }
              return parentContext;
            }
            var childContext = instance.getChildContext();
            for (var contextKey in childContext) {
              if (!((contextKey in childContextTypes))) {
                {
                  throw Error((getComponentName(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
            }
            {
              var name = getComponentName(type) || "Unknown";
              checkPropTypes(childContextTypes, childContext, "child context", name);
            }
            return _assign({}, parentContext, childContext);
          }
        }
        function pushContextProvider(workInProgress2) {
          {
            var instance = workInProgress2.stateNode;
            var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
            previousContext = contextStackCursor.current;
            push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
            push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
            return true;
          }
        }
        function invalidateContextProvider(workInProgress2, type, didChange) {
          {
            var instance = workInProgress2.stateNode;
            if (!instance) {
              {
                throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (didChange) {
              var mergedContext = processChildContext(workInProgress2, type, previousContext);
              instance.__reactInternalMemoizedMergedChildContext = mergedContext;
              pop(didPerformWorkStackCursor, workInProgress2);
              pop(contextStackCursor, workInProgress2);
              push(contextStackCursor, mergedContext, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            } else {
              pop(didPerformWorkStackCursor, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            }
          }
        }
        function findCurrentUnmaskedContext(fiber) {
          {
            if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
              {
                throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var node = fiber;
            do {
              switch (node.tag) {
                case HostRoot:
                  return node.stateNode.context;
                case ClassComponent:
                  {
                    var Component = node.type;
                    if (isContextProvider(Component)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
              }
              node = node.return;
            } while (node !== null);
            {
              {
                throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
        }
        var LegacyRoot = 0;
        var BlockingRoot = 1;
        var ConcurrentRoot = 2;
        var rendererID = null;
        var injectedHook = null;
        var hasLoggedError = false;
        var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
        function injectInternals(internals) {
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
            return false;
          }
          var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (hook.isDisabled) {
            return true;
          }
          if (!hook.supportsFiber) {
            {
              error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
            }
            return true;
          }
          try {
            rendererID = hook.inject(internals);
            injectedHook = hook;
          } catch (err) {
            {
              error("React instrumentation encountered an error: %s.", err);
            }
          }
          return true;
        }
        function onScheduleRoot(root2, children) {
          {
            if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
              try {
                injectedHook.onScheduleFiberRoot(rendererID, root2, children);
              } catch (err) {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onCommitRoot(root2, priorityLevel) {
          if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
            try {
              var didError = (root2.current.flags & DidCapture) === DidCapture;
              if (enableProfilerTimer) {
                injectedHook.onCommitFiberRoot(rendererID, root2, priorityLevel, didError);
              } else {
                injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
              }
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onCommitUnmount(fiber) {
          if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
            try {
              injectedHook.onCommitFiberUnmount(rendererID, fiber);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now$1 = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
        {
          if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
            {
              throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
            }
          }
        }
        var fakeCallbackNode = {};
        var ImmediatePriority$1 = 99;
        var UserBlockingPriority$2 = 98;
        var NormalPriority$1 = 97;
        var LowPriority$1 = 96;
        var IdlePriority$1 = 95;
        var NoPriority$1 = 90;
        var shouldYield = Scheduler_shouldYield;
        var requestPaint = Scheduler_requestPaint !== void 0 ? Scheduler_requestPaint : function () {};
        var syncQueue = null;
        var immediateQueueCallbackNode = null;
        var isFlushingSyncQueue = false;
        var initialTimeMs$1 = Scheduler_now$1();
        var now = initialTimeMs$1 < 1e4 ? Scheduler_now$1 : function () {
          return Scheduler_now$1() - initialTimeMs$1;
        };
        function getCurrentPriorityLevel() {
          switch (Scheduler_getCurrentPriorityLevel()) {
            case Scheduler_ImmediatePriority:
              return ImmediatePriority$1;
            case Scheduler_UserBlockingPriority:
              return UserBlockingPriority$2;
            case Scheduler_NormalPriority:
              return NormalPriority$1;
            case Scheduler_LowPriority:
              return LowPriority$1;
            case Scheduler_IdlePriority:
              return IdlePriority$1;
            default:
              {
                {
                  throw Error("Unknown priority level.");
                }
              }
          }
        }
        function reactPriorityToSchedulerPriority(reactPriorityLevel) {
          switch (reactPriorityLevel) {
            case ImmediatePriority$1:
              return Scheduler_ImmediatePriority;
            case UserBlockingPriority$2:
              return Scheduler_UserBlockingPriority;
            case NormalPriority$1:
              return Scheduler_NormalPriority;
            case LowPriority$1:
              return Scheduler_LowPriority;
            case IdlePriority$1:
              return Scheduler_IdlePriority;
            default:
              {
                {
                  throw Error("Unknown priority level.");
                }
              }
          }
        }
        function runWithPriority$1(reactPriorityLevel, fn) {
          var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
          return Scheduler_runWithPriority(priorityLevel, fn);
        }
        function scheduleCallback(reactPriorityLevel, callback, options2) {
          var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
          return Scheduler_scheduleCallback(priorityLevel, callback, options2);
        }
        function scheduleSyncCallback(callback) {
          if (syncQueue === null) {
            syncQueue = [callback];
            immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
          } else {
            syncQueue.push(callback);
          }
          return fakeCallbackNode;
        }
        function cancelCallback(callbackNode) {
          if (callbackNode !== fakeCallbackNode) {
            Scheduler_cancelCallback(callbackNode);
          }
        }
        function flushSyncCallbackQueue() {
          if (immediateQueueCallbackNode !== null) {
            var node = immediateQueueCallbackNode;
            immediateQueueCallbackNode = null;
            Scheduler_cancelCallback(node);
          }
          flushSyncCallbackQueueImpl();
        }
        function flushSyncCallbackQueueImpl() {
          if (!isFlushingSyncQueue && syncQueue !== null) {
            isFlushingSyncQueue = true;
            var i = 0;
            {
              try {
                var _isSync2 = true;
                var _queue = syncQueue;
                runWithPriority$1(ImmediatePriority$1, function () {
                  for (; i < _queue.length; i++) {
                    var callback = _queue[i];
                    do {
                      callback = callback(_isSync2);
                    } while (callback !== null);
                  }
                });
                syncQueue = null;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i + 1);
                }
                Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
                throw error2;
              } finally {
                isFlushingSyncQueue = false;
              }
            }
          }
        }
        var ReactVersion = "17.0.1";
        var NoMode = 0;
        var StrictMode = 1;
        var BlockingMode = 2;
        var ConcurrentMode = 4;
        var ProfileMode = 8;
        var DebugTracingMode = 16;
        var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
        var NoTransition = 0;
        function requestCurrentTransition() {
          return ReactCurrentBatchConfig.transition;
        }
        var ReactStrictModeWarnings = {
          recordUnsafeLifecycleWarnings: function (fiber, instance) {},
          flushPendingUnsafeLifecycleWarnings: function () {},
          recordLegacyContextWarning: function (fiber, instance) {},
          flushLegacyContextWarning: function () {},
          discardPendingWarnings: function () {}
        };
        {
          var findStrictRoot = function (fiber) {
            var maybeStrictRoot = null;
            var node = fiber;
            while (node !== null) {
              if (node.mode & StrictMode) {
                maybeStrictRoot = node;
              }
              node = node.return;
            }
            return maybeStrictRoot;
          };
          var setToSortedString = function (set2) {
            var array = [];
            set2.forEach(function (value) {
              array.push(value);
            });
            return array.sort().join(", ");
          };
          var pendingComponentWillMountWarnings = [];
          var pendingUNSAFE_ComponentWillMountWarnings = [];
          var pendingComponentWillReceivePropsWarnings = [];
          var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          var pendingComponentWillUpdateWarnings = [];
          var pendingUNSAFE_ComponentWillUpdateWarnings = [];
          var didWarnAboutUnsafeLifecycles = new Set();
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
            if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
              return;
            }
            if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
              pendingComponentWillMountWarnings.push(fiber);
            }
            if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === "function") {
              pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
            }
            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              pendingComponentWillReceivePropsWarnings.push(fiber);
            }
            if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
            }
            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
              pendingComponentWillUpdateWarnings.push(fiber);
            }
            if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
              pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
            var componentWillMountUniqueNames = new Set();
            if (pendingComponentWillMountWarnings.length > 0) {
              pendingComponentWillMountWarnings.forEach(function (fiber) {
                componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillMountWarnings = [];
            }
            var UNSAFE_componentWillMountUniqueNames = new Set();
            if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
              pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillMountWarnings = [];
            }
            var componentWillReceivePropsUniqueNames = new Set();
            if (pendingComponentWillReceivePropsWarnings.length > 0) {
              pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillReceivePropsWarnings = [];
            }
            var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
            if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            }
            var componentWillUpdateUniqueNames = new Set();
            if (pendingComponentWillUpdateWarnings.length > 0) {
              pendingComponentWillUpdateWarnings.forEach(function (fiber) {
                componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillUpdateWarnings = [];
            }
            var UNSAFE_componentWillUpdateUniqueNames = new Set();
            if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
              pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
            }
            if (UNSAFE_componentWillMountUniqueNames.size > 0) {
              var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
              error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
            }
            if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
              error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
            }
            if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
              error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
            }
            if (componentWillMountUniqueNames.size > 0) {
              var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
              warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
            }
            if (componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
              warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
            }
            if (componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
              warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
            }
          };
          var pendingLegacyContextWarning = new Map();
          var didWarnAboutLegacyContext = new Set();
          ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
            var strictRoot = findStrictRoot(fiber);
            if (strictRoot === null) {
              error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
              return;
            }
            if (didWarnAboutLegacyContext.has(fiber.type)) {
              return;
            }
            var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
            if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
              if (warningsForRoot === void 0) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
              }
              warningsForRoot.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushLegacyContextWarning = function () {
            pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
              if (fiberArray.length === 0) {
                return;
              }
              var firstFiber = fiberArray[0];
              var uniqueNames = new Set();
              fiberArray.forEach(function (fiber) {
                uniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutLegacyContext.add(fiber.type);
              });
              var sortedNames = setToSortedString(uniqueNames);
              try {
                setCurrentFiber(firstFiber);
                error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
              } finally {
                resetCurrentFiber();
              }
            });
          };
          ReactStrictModeWarnings.discardPendingWarnings = function () {
            pendingComponentWillMountWarnings = [];
            pendingUNSAFE_ComponentWillMountWarnings = [];
            pendingComponentWillReceivePropsWarnings = [];
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            pendingComponentWillUpdateWarnings = [];
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
            pendingLegacyContextWarning = new Map();
          };
        }
        function resolveDefaultProps(Component, baseProps) {
          if (Component && Component.defaultProps) {
            var props = _assign({}, baseProps);
            var defaultProps = Component.defaultProps;
            for (var propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
            return props;
          }
          return baseProps;
        }
        var MAX_SIGNED_31_BIT_INT = 1073741823;
        var valueCursor = createCursor(null);
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var currentlyRenderingFiber = null;
        var lastContextDependency = null;
        var lastContextWithAllBitsObserved = null;
        var isDisallowedContextReadInDEV = false;
        function resetContextDependencies() {
          currentlyRenderingFiber = null;
          lastContextDependency = null;
          lastContextWithAllBitsObserved = null;
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function enterDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = true;
          }
        }
        function exitDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function pushProvider(providerFiber, nextValue) {
          var context = providerFiber.type._context;
          {
            push(valueCursor, context._currentValue, providerFiber);
            context._currentValue = nextValue;
            {
              if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer = rendererSigil;
            }
          }
        }
        function popProvider(providerFiber) {
          var currentValue = valueCursor.current;
          pop(valueCursor, providerFiber);
          var context = providerFiber.type._context;
          {
            context._currentValue = currentValue;
          }
        }
        function calculateChangedBits(context, newValue, oldValue) {
          if (objectIs(oldValue, newValue)) {
            return 0;
          } else {
            var changedBits = typeof context._calculateChangedBits === "function" ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
            {
              if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
                error("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits);
              }
            }
            return changedBits | 0;
          }
        }
        function scheduleWorkOnParentPath(parent, renderLanes2) {
          var node = parent;
          while (node !== null) {
            var alternate = node.alternate;
            if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
              node.childLanes = mergeLanes(node.childLanes, renderLanes2);
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
            } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
              alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
            } else {
              break;
            }
            node = node.return;
          }
        }
        function propagateContextChange(workInProgress2, context, changedBits, renderLanes2) {
          var fiber = workInProgress2.child;
          if (fiber !== null) {
            fiber.return = workInProgress2;
          }
          while (fiber !== null) {
            var nextFiber = void 0;
            var list = fiber.dependencies;
            if (list !== null) {
              nextFiber = fiber.child;
              var dependency = list.firstContext;
              while (dependency !== null) {
                if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                  if (fiber.tag === ClassComponent) {
                    var update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes2));
                    update.tag = ForceUpdate;
                    enqueueUpdate(fiber, update);
                  }
                  fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                  var alternate = fiber.alternate;
                  if (alternate !== null) {
                    alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                  }
                  scheduleWorkOnParentPath(fiber.return, renderLanes2);
                  list.lanes = mergeLanes(list.lanes, renderLanes2);
                  break;
                }
                dependency = dependency.next;
              }
            } else if (fiber.tag === ContextProvider) {
              nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
            } else {
              nextFiber = fiber.child;
            }
            if (nextFiber !== null) {
              nextFiber.return = fiber;
            } else {
              nextFiber = fiber;
              while (nextFiber !== null) {
                if (nextFiber === workInProgress2) {
                  nextFiber = null;
                  break;
                }
                var sibling = nextFiber.sibling;
                if (sibling !== null) {
                  sibling.return = nextFiber.return;
                  nextFiber = sibling;
                  break;
                }
                nextFiber = nextFiber.return;
              }
            }
            fiber = nextFiber;
          }
        }
        function prepareToReadContext(workInProgress2, renderLanes2) {
          currentlyRenderingFiber = workInProgress2;
          lastContextDependency = null;
          lastContextWithAllBitsObserved = null;
          var dependencies = workInProgress2.dependencies;
          if (dependencies !== null) {
            var firstContext = dependencies.firstContext;
            if (firstContext !== null) {
              if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                markWorkInProgressReceivedUpdate();
              }
              dependencies.firstContext = null;
            }
          }
        }
        function readContext(context, observedBits) {
          {
            if (isDisallowedContextReadInDEV) {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          if (lastContextWithAllBitsObserved === context) ; else if (observedBits === false || observedBits === 0) ; else {
            var resolvedObservedBits;
            if (typeof observedBits !== "number" || observedBits === MAX_SIGNED_31_BIT_INT) {
              lastContextWithAllBitsObserved = context;
              resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
            } else {
              resolvedObservedBits = observedBits;
            }
            var contextItem = {
              context,
              observedBits: resolvedObservedBits,
              next: null
            };
            if (lastContextDependency === null) {
              if (!(currentlyRenderingFiber !== null)) {
                {
                  throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
              }
              lastContextDependency = contextItem;
              currentlyRenderingFiber.dependencies = {
                lanes: NoLanes,
                firstContext: contextItem,
                responders: null
              };
            } else {
              lastContextDependency = lastContextDependency.next = contextItem;
            }
          }
          return context._currentValue;
        }
        var UpdateState = 0;
        var ReplaceState = 1;
        var ForceUpdate = 2;
        var CaptureUpdate = 3;
        var hasForceUpdate = false;
        var didWarnUpdateInsideUpdate;
        var currentlyProcessingQueue;
        {
          didWarnUpdateInsideUpdate = false;
          currentlyProcessingQueue = null;
        }
        function initializeUpdateQueue(fiber) {
          var queue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
              pending: null
            },
            effects: null
          };
          fiber.updateQueue = queue;
        }
        function cloneUpdateQueue(current2, workInProgress2) {
          var queue = workInProgress2.updateQueue;
          var currentQueue = current2.updateQueue;
          if (queue === currentQueue) {
            var clone = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: currentQueue.firstBaseUpdate,
              lastBaseUpdate: currentQueue.lastBaseUpdate,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            };
            workInProgress2.updateQueue = clone;
          }
        }
        function createUpdate(eventTime, lane) {
          var update = {
            eventTime,
            lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
          };
          return update;
        }
        function enqueueUpdate(fiber, update) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return;
          }
          var sharedQueue = updateQueue.shared;
          var pending = sharedQueue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          sharedQueue.pending = update;
          {
            if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
              error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
              didWarnUpdateInsideUpdate = true;
            }
          }
        }
        function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
          var queue = workInProgress2.updateQueue;
          var current2 = workInProgress2.alternate;
          if (current2 !== null) {
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var newFirst = null;
              var newLast = null;
              var firstBaseUpdate = queue.firstBaseUpdate;
              if (firstBaseUpdate !== null) {
                var update = firstBaseUpdate;
                do {
                  var clone = {
                    eventTime: update.eventTime,
                    lane: update.lane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLast === null) {
                    newFirst = newLast = clone;
                  } else {
                    newLast.next = clone;
                    newLast = clone;
                  }
                  update = update.next;
                } while (update !== null);
                if (newLast === null) {
                  newFirst = newLast = capturedUpdate;
                } else {
                  newLast.next = capturedUpdate;
                  newLast = capturedUpdate;
                }
              } else {
                newFirst = newLast = capturedUpdate;
              }
              queue = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: newFirst,
                lastBaseUpdate: newLast,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = queue;
              return;
            }
          }
          var lastBaseUpdate = queue.lastBaseUpdate;
          if (lastBaseUpdate === null) {
            queue.firstBaseUpdate = capturedUpdate;
          } else {
            lastBaseUpdate.next = capturedUpdate;
          }
          queue.lastBaseUpdate = capturedUpdate;
        }
        function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
          switch (update.tag) {
            case ReplaceState:
              {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictMode) {
                      disableLogs();
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        reenableLogs();
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
            case CaptureUpdate:
              {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
            case UpdateState:
              {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictMode) {
                      disableLogs();
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        reenableLogs();
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return _assign({}, prevState, partialState);
              }
            case ForceUpdate:
              {
                hasForceUpdate = true;
                return prevState;
              }
          }
          return prevState;
        }
        function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
          var queue = workInProgress2.updateQueue;
          hasForceUpdate = false;
          {
            currentlyProcessingQueue = queue.shared;
          }
          var firstBaseUpdate = queue.firstBaseUpdate;
          var lastBaseUpdate = queue.lastBaseUpdate;
          var pendingQueue = queue.shared.pending;
          if (pendingQueue !== null) {
            queue.shared.pending = null;
            var lastPendingUpdate = pendingQueue;
            var firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null;
            if (lastBaseUpdate === null) {
              firstBaseUpdate = firstPendingUpdate;
            } else {
              lastBaseUpdate.next = firstPendingUpdate;
            }
            lastBaseUpdate = lastPendingUpdate;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
              if (currentLastBaseUpdate !== lastBaseUpdate) {
                if (currentLastBaseUpdate === null) {
                  currentQueue.firstBaseUpdate = firstPendingUpdate;
                } else {
                  currentLastBaseUpdate.next = firstPendingUpdate;
                }
                currentQueue.lastBaseUpdate = lastPendingUpdate;
              }
            }
          }
          if (firstBaseUpdate !== null) {
            var newState = queue.baseState;
            var newLanes = NoLanes;
            var newBaseState = null;
            var newFirstBaseUpdate = null;
            var newLastBaseUpdate = null;
            var update = firstBaseUpdate;
            do {
              var updateLane = update.lane;
              var updateEventTime = update.eventTime;
              if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                var clone = {
                  eventTime: updateEventTime,
                  lane: updateLane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                if (newLastBaseUpdate === null) {
                  newFirstBaseUpdate = newLastBaseUpdate = clone;
                  newBaseState = newState;
                } else {
                  newLastBaseUpdate = newLastBaseUpdate.next = clone;
                }
                newLanes = mergeLanes(newLanes, updateLane);
              } else {
                if (newLastBaseUpdate !== null) {
                  var _clone = {
                    eventTime: updateEventTime,
                    lane: NoLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                }
                newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                var callback = update.callback;
                if (callback !== null) {
                  workInProgress2.flags |= Callback;
                  var effects = queue.effects;
                  if (effects === null) {
                    queue.effects = [update];
                  } else {
                    effects.push(update);
                  }
                }
              }
              update = update.next;
              if (update === null) {
                pendingQueue = queue.shared.pending;
                if (pendingQueue === null) {
                  break;
                } else {
                  var _lastPendingUpdate = pendingQueue;
                  var _firstPendingUpdate = _lastPendingUpdate.next;
                  _lastPendingUpdate.next = null;
                  update = _firstPendingUpdate;
                  queue.lastBaseUpdate = _lastPendingUpdate;
                  queue.shared.pending = null;
                }
              }
            } while (true);
            if (newLastBaseUpdate === null) {
              newBaseState = newState;
            }
            queue.baseState = newBaseState;
            queue.firstBaseUpdate = newFirstBaseUpdate;
            queue.lastBaseUpdate = newLastBaseUpdate;
            markSkippedUpdateLanes(newLanes);
            workInProgress2.lanes = newLanes;
            workInProgress2.memoizedState = newState;
          }
          {
            currentlyProcessingQueue = null;
          }
        }
        function callCallback(callback, context) {
          if (!(typeof callback === "function")) {
            {
              throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
            }
          }
          callback.call(context);
        }
        function resetHasForceUpdateBeforeProcessing() {
          hasForceUpdate = false;
        }
        function checkHasForceUpdateAfterProcessing() {
          return hasForceUpdate;
        }
        function commitUpdateQueue(finishedWork, finishedQueue, instance) {
          var effects = finishedQueue.effects;
          finishedQueue.effects = null;
          if (effects !== null) {
            for (var i = 0; i < effects.length; i++) {
              var effect = effects[i];
              var callback = effect.callback;
              if (callback !== null) {
                effect.callback = null;
                callCallback(callback, instance);
              }
            }
          }
        }
        var fakeInternalInstance = {};
        var isArray = Array.isArray;
        var emptyRefsObject = new React2.Component().refs;
        var didWarnAboutStateAssignmentForComponent;
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var warnOnUndefinedDerivedState;
        var warnOnInvalidCallback;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        {
          didWarnAboutStateAssignmentForComponent = new Set();
          didWarnAboutUninitializedState = new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
          didWarnAboutDirectlyAssigningPropsToState = new Set();
          didWarnAboutUndefinedDerivedState = new Set();
          didWarnAboutContextTypeAndContextTypes = new Set();
          didWarnAboutInvalidateContextType = new Set();
          var didWarnOnInvalidCallback = new Set();
          warnOnInvalidCallback = function (callback, callerName) {
            if (callback === null || typeof callback === "function") {
              return;
            }
            var key = callerName + "_" + callback;
            if (!didWarnOnInvalidCallback.has(key)) {
              didWarnOnInvalidCallback.add(key);
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          };
          warnOnUndefinedDerivedState = function (type, partialState) {
            if (partialState === void 0) {
              var componentName = getComponentName(type) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
              }
            }
          };
          Object.defineProperty(fakeInternalInstance, "_processChildContext", {
            enumerable: false,
            value: function () {
              {
                {
                  throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
                }
              }
            }
          });
          Object.freeze(fakeInternalInstance);
        }
        function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
          var prevState = workInProgress2.memoizedState;
          {
            if (workInProgress2.mode & StrictMode) {
              disableLogs();
              try {
                getDerivedStateFromProps(nextProps, prevState);
              } finally {
                reenableLogs();
              }
            }
          }
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            warnOnUndefinedDerivedState(ctor, partialState);
          }
          var memoizedState = partialState === null || partialState === void 0 ? prevState : _assign({}, prevState, partialState);
          workInProgress2.memoizedState = memoizedState;
          if (workInProgress2.lanes === NoLanes) {
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = memoizedState;
          }
        }
        var classComponentUpdater = {
          isMounted,
          enqueueSetState: function (inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "setState");
              }
              update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
          },
          enqueueReplaceState: function (inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "replaceState");
              }
              update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
          },
          enqueueForceUpdate: function (inst, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ForceUpdate;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "forceUpdate");
              }
              update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
          }
        };
        function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
          var instance = workInProgress2.stateNode;
          if (typeof instance.shouldComponentUpdate === "function") {
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  instance.shouldComponentUpdate(newProps, newState, nextContext);
                } finally {
                  reenableLogs();
                }
              }
            }
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            {
              if (shouldUpdate === void 0) {
                error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || "Component");
              }
            }
            return shouldUpdate;
          }
          if (ctor.prototype && ctor.prototype.isPureReactComponent) {
            return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
          }
          return true;
        }
        function checkClassInstance(workInProgress2, ctor, newProps) {
          var instance = workInProgress2.stateNode;
          {
            var name = getComponentName(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function") {
                error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
              } else {
                error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
              }
            }
            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
            }
            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
            }
            if (instance.propTypes) {
              error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
            }
            if (instance.contextType) {
              error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
            }
            {
              if (instance.contextTypes) {
                error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
              }
              if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
              }
            }
            if (typeof instance.componentShouldUpdate === "function") {
              error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || "A pure component");
            }
            if (typeof instance.componentDidUnmount === "function") {
              error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
            }
            if (typeof instance.componentDidReceiveProps === "function") {
              error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
            }
            if (typeof instance.componentWillRecieveProps === "function") {
              error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
            }
            if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
              error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
            }
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== void 0 && hasMutatedProps) {
              error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
            }
            if (instance.defaultProps) {
              error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
            }
            if (typeof instance.getDerivedStateFromProps === "function") {
              error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof instance.getDerivedStateFromError === "function") {
              error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof ctor.getSnapshotBeforeUpdate === "function") {
              error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
            }
            var _state = instance.state;
            if (_state && (typeof _state !== "object" || isArray(_state))) {
              error("%s.state: must be set to an object or null", name);
            }
            if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
              error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
            }
          }
        }
        function adoptClassInstance(workInProgress2, instance) {
          instance.updater = classComponentUpdater;
          workInProgress2.stateNode = instance;
          set(instance, workInProgress2);
          {
            instance._reactInternalInstance = fakeInternalInstance;
          }
        }
        function constructClassInstance(workInProgress2, ctor, props) {
          var isLegacyContextConsumer = false;
          var unmaskedContext = emptyContextObject;
          var context = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if (("contextType" in ctor)) {
              var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
              if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                  addendum = " Did you accidentally pass the Context.Provider instead?";
                } else if (contextType._context !== void 0) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            context = readContext(contextType);
          } else {
            unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
          }
          {
            if (workInProgress2.mode & StrictMode) {
              disableLogs();
              try {
                new ctor(props, context);
              } finally {
                reenableLogs();
              }
            }
          }
          var instance = new ctor(props, context);
          var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
          adoptClassInstance(workInProgress2, instance);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
              var componentName = getComponentName(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
              }
            }
            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }
              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentName(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          if (isLegacyContextConsumer) {
            cacheContext(workInProgress2, unmaskedContext, context);
          }
          return instance;
        }
        function callComponentWillMount(workInProgress2, instance) {
          var oldState = instance.state;
          if (typeof instance.componentWillMount === "function") {
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
          if (oldState !== instance.state) {
            {
              error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress2.type) || "Component");
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
          var oldState = instance.state;
          if (typeof instance.componentWillReceiveProps === "function") {
            instance.componentWillReceiveProps(newProps, nextContext);
          }
          if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
          }
          if (instance.state !== oldState) {
            {
              var componentName = getComponentName(workInProgress2.type) || "Component";
              if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
              }
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          {
            checkClassInstance(workInProgress2, ctor, newProps);
          }
          var instance = workInProgress2.stateNode;
          instance.props = newProps;
          instance.state = workInProgress2.memoizedState;
          instance.refs = emptyRefsObject;
          initializeUpdateQueue(workInProgress2);
          var contextType = ctor.contextType;
          if (typeof contextType === "object" && contextType !== null) {
            instance.context = readContext(contextType);
          } else {
            var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            instance.context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentName(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
              }
            }
            if (workInProgress2.mode & StrictMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
            }
            {
              ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
            }
          }
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          instance.state = workInProgress2.memoizedState;
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(workInProgress2, instance);
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof instance.componentDidMount === "function") {
            workInProgress2.flags |= Update;
          }
        }
        function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          var oldProps = workInProgress2.memoizedProps;
          instance.props = oldProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (oldProps !== newProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.flags |= Update;
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              if (typeof instance.componentWillMount === "function") {
                instance.componentWillMount();
              }
              if (typeof instance.UNSAFE_componentWillMount === "function") {
                instance.UNSAFE_componentWillMount();
              }
            }
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.flags |= Update;
            }
          } else {
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.flags |= Update;
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          cloneUpdateQueue(current2, workInProgress2);
          var unresolvedOldProps = workInProgress2.memoizedProps;
          var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
          instance.props = oldProps;
          var unresolvedNewProps = workInProgress2.pendingProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
              if (typeof instance.componentWillUpdate === "function") {
                instance.componentWillUpdate(newProps, newState, nextContext);
              }
              if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
              }
            }
            if (typeof instance.componentDidUpdate === "function") {
              workInProgress2.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              workInProgress2.flags |= Snapshot;
            }
          } else {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        var didWarnAboutMaps;
        var didWarnAboutGenerators;
        var didWarnAboutStringRefs;
        var ownerHasKeyUseWarning;
        var ownerHasFunctionTypeWarning;
        var warnForMissingKey = function (child, returnFiber) {};
        {
          didWarnAboutMaps = false;
          didWarnAboutGenerators = false;
          didWarnAboutStringRefs = {};
          ownerHasKeyUseWarning = {};
          ownerHasFunctionTypeWarning = {};
          warnForMissingKey = function (child, returnFiber) {
            if (child === null || typeof child !== "object") {
              return;
            }
            if (!child._store || child._store.validated || child.key != null) {
              return;
            }
            if (!(typeof child._store === "object")) {
              {
                throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            child._store.validated = true;
            var componentName = getComponentName(returnFiber.type) || "Component";
            if (ownerHasKeyUseWarning[componentName]) {
              return;
            }
            ownerHasKeyUseWarning[componentName] = true;
            error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
          };
        }
        var isArray$1 = Array.isArray;
        function coerceRef(returnFiber, current2, element) {
          var mixedRef = element.ref;
          if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
            {
              if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                var componentName = getComponentName(returnFiber.type) || "Component";
                if (!didWarnAboutStringRefs[componentName]) {
                  {
                    error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                  }
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
            if (element._owner) {
              var owner = element._owner;
              var inst;
              if (owner) {
                var ownerFiber = owner;
                if (!(ownerFiber.tag === ClassComponent)) {
                  {
                    throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                }
                inst = ownerFiber.stateNode;
              }
              if (!inst) {
                {
                  throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var stringRef = "" + mixedRef;
              if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                return current2.ref;
              }
              var ref = function (value) {
                var refs = inst.refs;
                if (refs === emptyRefsObject) {
                  refs = inst.refs = {};
                }
                if (value === null) {
                  delete refs[stringRef];
                } else {
                  refs[stringRef] = value;
                }
              };
              ref._stringRef = stringRef;
              return ref;
            } else {
              if (!(typeof mixedRef === "string")) {
                {
                  throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
              }
              if (!element._owner) {
                {
                  throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
          }
          return mixedRef;
        }
        function throwOnInvalidObjectType(returnFiber, newChild) {
          if (returnFiber.type !== "textarea") {
            {
              {
                throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
          }
        }
        function warnOnFunctionType(returnFiber) {
          {
            var componentName = getComponentName(returnFiber.type) || "Component";
            if (ownerHasFunctionTypeWarning[componentName]) {
              return;
            }
            ownerHasFunctionTypeWarning[componentName] = true;
            error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
          }
        }
        function ChildReconciler(shouldTrackSideEffects) {
          var _s13 = $RefreshSig$(), _s14 = $RefreshSig$(), _s15 = $RefreshSig$(), _s16 = $RefreshSig$(), _s17 = $RefreshSig$(), _s18 = $RefreshSig$(), _s19 = $RefreshSig$();
          function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) {
              return;
            }
            var last = returnFiber.lastEffect;
            if (last !== null) {
              last.nextEffect = childToDelete;
              returnFiber.lastEffect = childToDelete;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            }
            childToDelete.nextEffect = null;
            childToDelete.flags = Deletion;
          }
          function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) {
              return null;
            }
            var childToDelete = currentFirstChild;
            while (childToDelete !== null) {
              deleteChild(returnFiber, childToDelete);
              childToDelete = childToDelete.sibling;
            }
            return null;
          }
          function mapRemainingChildren(returnFiber, currentFirstChild) {
            var existingChildren = new Map();
            var existingChild = currentFirstChild;
            while (existingChild !== null) {
              if (existingChild.key !== null) {
                existingChildren.set(existingChild.key, existingChild);
              } else {
                existingChildren.set(existingChild.index, existingChild);
              }
              existingChild = existingChild.sibling;
            }
            return existingChildren;
          }
          function useFiber(fiber, pendingProps) {
            var clone = createWorkInProgress(fiber, pendingProps);
            clone.index = 0;
            clone.sibling = null;
            return clone;
          }
          function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) {
              return lastPlacedIndex;
            }
            var current2 = newFiber.alternate;
            if (current2 !== null) {
              var oldIndex = current2.index;
              if (oldIndex < lastPlacedIndex) {
                newFiber.flags = Placement;
                return lastPlacedIndex;
              } else {
                return oldIndex;
              }
            } else {
              newFiber.flags = Placement;
              return lastPlacedIndex;
            }
          }
          function placeSingleChild(newFiber) {
            if (shouldTrackSideEffects && newFiber.alternate === null) {
              newFiber.flags = Placement;
            }
            return newFiber;
          }
          function updateTextNode(returnFiber, current2, textContent, lanes) {
            _s13();
            if (current2 === null || current2.tag !== HostText) {
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, textContent);
              existing.return = returnFiber;
              return existing;
            }
          }
          _s13(updateTextNode, "kiHzbwuEosy3to0T/G280Ayd51Y=", false, function () {
            return [useFiber];
          });
          function updateElement(returnFiber, current2, element, lanes) {
            _s14();
            if (current2 !== null) {
              if (current2.elementType === element.type || isCompatibleFamilyForHotReloading(current2, element)) {
                var existing = useFiber(current2, element.props);
                existing.ref = coerceRef(returnFiber, current2, element);
                existing.return = returnFiber;
                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }
                return existing;
              }
            }
            var created = createFiberFromElement(element, returnFiber.mode, lanes);
            created.ref = coerceRef(returnFiber, current2, element);
            created.return = returnFiber;
            return created;
          }
          _s14(updateElement, "kiHzbwuEosy3to0T/G280Ayd51Y=", false, function () {
            return [useFiber];
          });
          function updatePortal(returnFiber, current2, portal, lanes) {
            _s15();
            if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, portal.children || []);
              existing.return = returnFiber;
              return existing;
            }
          }
          _s15(updatePortal, "kiHzbwuEosy3to0T/G280Ayd51Y=", false, function () {
            return [useFiber];
          });
          function updateFragment2(returnFiber, current2, fragment, lanes, key) {
            _s16();
            if (current2 === null || current2.tag !== Fragment) {
              var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, fragment);
              existing.return = returnFiber;
              return existing;
            }
          }
          _s16(updateFragment2, "kiHzbwuEosy3to0T/G280Ayd51Y=", false, function () {
            return [useFiber];
          });
          function createChild(returnFiber, newChild, lanes) {
            if (typeof newChild === "string" || typeof newChild === "number") {
              var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                case REACT_PORTAL_TYPE:
                  {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
              }
              if (isArray$1(newChild) || getIteratorFn(newChild)) {
                var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                _created3.return = returnFiber;
                return _created3;
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === "string" || typeof newChild === "number") {
              if (key !== null) {
                return null;
              }
              return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  {
                    if (newChild.key === key) {
                      if (newChild.type === REACT_FRAGMENT_TYPE) {
                        return updateFragment2(returnFiber, oldFiber, newChild.props.children, lanes, key);
                      }
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                case REACT_PORTAL_TYPE:
                  {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
              }
              if (isArray$1(newChild) || getIteratorFn(newChild)) {
                if (key !== null) {
                  return null;
                }
                return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if (typeof newChild === "string" || typeof newChild === "number") {
              var matchedFiber = existingChildren.get(newIdx) || null;
              return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      return updateFragment2(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
                    }
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                case REACT_PORTAL_TYPE:
                  {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
              }
              if (isArray$1(newChild) || getIteratorFn(newChild)) {
                var _matchedFiber3 = existingChildren.get(newIdx) || null;
                return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function warnOnInvalidKey(child, knownKeys, returnFiber) {
            {
              if (typeof child !== "object" || child === null) {
                return knownKeys;
              }
              switch (child.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  warnForMissingKey(child, returnFiber);
                  var key = child.key;
                  if (typeof key !== "string") {
                    break;
                  }
                  if (knownKeys === null) {
                    knownKeys = new Set();
                    knownKeys.add(key);
                    break;
                  }
                  if (!knownKeys.has(key)) {
                    knownKeys.add(key);
                    break;
                  }
                  error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                  break;
              }
            }
            return knownKeys;
          }
          function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            {
              var knownKeys = null;
              for (var i = 0; i < newChildren.length; i++) {
                var child = newChildren[i];
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
              deleteRemainingChildren(returnFiber, oldFiber);
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                if (_newFiber === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber;
                } else {
                  previousNewFiber.sibling = _newFiber;
                }
                previousNewFiber = _newFiber;
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
              if (_newFiber2 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber2.alternate !== null) {
                    existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber2;
                } else {
                  previousNewFiber.sibling = _newFiber2;
                }
                previousNewFiber = _newFiber2;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function (child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            return resultingFirstChild;
          }
          function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (!(typeof iteratorFn === "function")) {
              {
                throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            {
              if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                if (!didWarnAboutGenerators) {
                  error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                }
                didWarnAboutGenerators = true;
              }
              if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) {
                  error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
              var _newChildren = iteratorFn.call(newChildrenIterable);
              if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for (; !_step.done; _step = _newChildren.next()) {
                  var child = _step.value;
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (!(newChildren != null)) {
              {
                throw Error("An iterable object provided no iterator.");
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for (; oldFiber !== null && !step.done; (newIdx++, step = newChildren.next())) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (step.done) {
              deleteRemainingChildren(returnFiber, oldFiber);
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; !step.done; (newIdx++, step = newChildren.next())) {
                var _newFiber3 = createChild(returnFiber, step.value, lanes);
                if (_newFiber3 === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber3;
                } else {
                  previousNewFiber.sibling = _newFiber3;
                }
                previousNewFiber = _newFiber3;
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; !step.done; (newIdx++, step = newChildren.next())) {
              var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
              if (_newFiber4 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber4.alternate !== null) {
                    existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber4;
                } else {
                  previousNewFiber.sibling = _newFiber4;
                }
                previousNewFiber = _newFiber4;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function (child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            return resultingFirstChild;
          }
          function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
            _s17();
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
              deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
              var existing = useFiber(currentFirstChild, textContent);
              existing.return = returnFiber;
              return existing;
            }
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          _s17(reconcileSingleTextNode, "kiHzbwuEosy3to0T/G280Ayd51Y=", false, function () {
            return [useFiber];
          });
          function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
            _s18();
            var key = element.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                switch (child.tag) {
                  case Fragment:
                    {
                      if (element.type === REACT_FRAGMENT_TYPE) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var existing = useFiber(child, element.props.children);
                        existing.return = returnFiber;
                        {
                          existing._debugSource = element._source;
                          existing._debugOwner = element._owner;
                        }
                        return existing;
                      }
                      break;
                    }
                  case Block:
                  default:
                    {
                      if (child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var _existing3 = useFiber(child, element.props);
                        _existing3.ref = coerceRef(returnFiber, child, element);
                        _existing3.return = returnFiber;
                        {
                          _existing3._debugSource = element._source;
                          _existing3._debugOwner = element._owner;
                        }
                        return _existing3;
                      }
                      break;
                    }
                }
                deleteRemainingChildren(returnFiber, child);
                break;
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
              var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
              created.return = returnFiber;
              return created;
            } else {
              var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
              _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
              _created4.return = returnFiber;
              return _created4;
            }
          }
          _s18(reconcileSingleElement, "/tevd0H0C+s4ES4lXtj/xkTm+Ks=", false, function () {
            return [useFiber, useFiber];
          });
          function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
            _s19();
            var key = portal.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, portal.children || []);
                  existing.return = returnFiber;
                  return existing;
                } else {
                  deleteRemainingChildren(returnFiber, child);
                  break;
                }
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          _s19(reconcileSinglePortal, "kiHzbwuEosy3to0T/G280Ayd51Y=", false, function () {
            return [useFiber];
          });
          function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
            var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) {
              newChild = newChild.props.children;
            }
            var isObject = typeof newChild === "object" && newChild !== null;
            if (isObject) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_PORTAL_TYPE:
                  return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
              }
            }
            if (typeof newChild === "string" || typeof newChild === "number") {
              return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
            }
            if (isArray$1(newChild)) {
              return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
            }
            if (getIteratorFn(newChild)) {
              return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
            }
            if (isObject) {
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            if (typeof newChild === "undefined" && !isUnkeyedTopLevelFragment) {
              switch (returnFiber.tag) {
                case ClassComponent:
                  {
                    {
                      var instance = returnFiber.stateNode;
                      if (instance.render._isMockFunction) {
                        break;
                      }
                    }
                  }
                case Block:
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent:
                  {
                    {
                      {
                        throw Error((getComponentName(returnFiber.type) || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
                      }
                    }
                  }
              }
            }
            return deleteRemainingChildren(returnFiber, currentFirstChild);
          }
          return reconcileChildFibers2;
        }
        var reconcileChildFibers = ChildReconciler(true);
        var mountChildFibers = ChildReconciler(false);
        function cloneChildFibers(current2, workInProgress2) {
          if (!(current2 === null || workInProgress2.child === current2.child)) {
            {
              throw Error("Resuming work not yet implemented.");
            }
          }
          if (workInProgress2.child === null) {
            return;
          }
          var currentChild = workInProgress2.child;
          var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
          workInProgress2.child = newChild;
          newChild.return = workInProgress2;
          while (currentChild.sibling !== null) {
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress2;
          }
          newChild.sibling = null;
        }
        function resetChildFibers(workInProgress2, lanes) {
          var child = workInProgress2.child;
          while (child !== null) {
            resetWorkInProgress(child, lanes);
            child = child.sibling;
          }
        }
        var NO_CONTEXT = {};
        var contextStackCursor$1 = createCursor(NO_CONTEXT);
        var contextFiberStackCursor = createCursor(NO_CONTEXT);
        var rootInstanceStackCursor = createCursor(NO_CONTEXT);
        function requiredContext(c) {
          if (!(c !== NO_CONTEXT)) {
            {
              throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          return c;
        }
        function getRootHostContainer() {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          return rootInstance;
        }
        function pushHostContainer(fiber, nextRootInstance) {
          push(rootInstanceStackCursor, nextRootInstance, fiber);
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, NO_CONTEXT, fiber);
          var nextRootContext = getRootHostContext(nextRootInstance);
          pop(contextStackCursor$1, fiber);
          push(contextStackCursor$1, nextRootContext, fiber);
        }
        function popHostContainer(fiber) {
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
          pop(rootInstanceStackCursor, fiber);
        }
        function getHostContext() {
          var context = requiredContext(contextStackCursor$1.current);
          return context;
        }
        function pushHostContext(fiber) {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          var context = requiredContext(contextStackCursor$1.current);
          var nextContext = getChildHostContext(context, fiber.type);
          if (context === nextContext) {
            return;
          }
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, nextContext, fiber);
        }
        function popHostContext(fiber) {
          if (contextFiberStackCursor.current !== fiber) {
            return;
          }
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
        }
        var DefaultSuspenseContext = 0;
        var SubtreeSuspenseContextMask = 1;
        var InvisibleParentSuspenseContext = 1;
        var ForceSuspenseFallback = 2;
        var suspenseStackCursor = createCursor(DefaultSuspenseContext);
        function hasSuspenseContext(parentContext, flag) {
          return (parentContext & flag) !== 0;
        }
        function setDefaultShallowSuspenseContext(parentContext) {
          return parentContext & SubtreeSuspenseContextMask;
        }
        function setShallowSuspenseContext(parentContext, shallowContext) {
          return parentContext & SubtreeSuspenseContextMask | shallowContext;
        }
        function addSubtreeSuspenseContext(parentContext, subtreeContext) {
          return parentContext | subtreeContext;
        }
        function pushSuspenseContext(fiber, newContext) {
          push(suspenseStackCursor, newContext, fiber);
        }
        function popSuspenseContext(fiber) {
          pop(suspenseStackCursor, fiber);
        }
        function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
          var nextState = workInProgress2.memoizedState;
          if (nextState !== null) {
            if (nextState.dehydrated !== null) {
              return true;
            }
            return false;
          }
          var props = workInProgress2.memoizedProps;
          if (props.fallback === void 0) {
            return false;
          }
          if (props.unstable_avoidThisFallback !== true) {
            return true;
          }
          if (hasInvisibleParent) {
            return false;
          }
          return true;
        }
        function findFirstSuspended(row) {
          var node = row;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                var dehydrated = state.dehydrated;
                if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                  return node;
                }
              }
            } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
              var didSuspend = (node.flags & DidCapture) !== NoFlags;
              if (didSuspend) {
                return node;
              }
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === row) {
              return null;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === row) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        var NoFlags$1 = 0;
        var HasEffect = 1;
        var Layout = 2;
        var Passive$1 = 4;
        var hydrationParentFiber = null;
        var nextHydratableInstance = null;
        var isHydrating = false;
        function enterHydrationState(fiber) {
          var parentInstance = fiber.stateNode.containerInfo;
          nextHydratableInstance = getFirstHydratableChild(parentInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          return true;
        }
        function deleteHydratableInstance(returnFiber, instance) {
          {
            switch (returnFiber.tag) {
              case HostRoot:
                didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                break;
              case HostComponent:
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                break;
            }
          }
          var childToDelete = createFiberFromHostInstanceForDeletion();
          childToDelete.stateNode = instance;
          childToDelete.return = returnFiber;
          childToDelete.flags = Deletion;
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
          } else {
            returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
          }
        }
        function insertNonHydratedInstance(returnFiber, fiber) {
          fiber.flags = fiber.flags & ~Hydrating | Placement;
          {
            switch (returnFiber.tag) {
              case HostRoot:
                {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableContainerInstance(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableContainerTextInstance(parentContainer, text);
                      break;
                  }
                  break;
                }
              case HostComponent:
                {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent:
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                      break;
                    case HostText:
                      var _text = fiber.pendingProps;
                      didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                      break;
                    case SuspenseComponent:
                      didNotFindHydratableSuspenseInstance(parentType, parentProps);
                      break;
                  }
                  break;
                }
              default:
                return;
            }
          }
        }
        function tryHydrate(fiber, nextInstance) {
          switch (fiber.tag) {
            case HostComponent:
              {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  return true;
                }
                return false;
              }
            case HostText:
              {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  return true;
                }
                return false;
              }
            case SuspenseComponent:
              {
                return false;
              }
            default:
              return false;
          }
        }
        function tryToClaimNextHydratableInstance(fiber) {
          if (!isHydrating) {
            return;
          }
          var nextInstance = nextHydratableInstance;
          if (!nextInstance) {
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }
          var firstAttemptedInstance = nextInstance;
          if (!tryHydrate(fiber, nextInstance)) {
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
          }
          hydrationParentFiber = fiber;
          nextHydratableInstance = getFirstHydratableChild(nextInstance);
        }
        function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
          var instance = fiber.stateNode;
          var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
          fiber.updateQueue = updatePayload;
          if (updatePayload !== null) {
            return true;
          }
          return false;
        }
        function prepareToHydrateHostTextInstance(fiber) {
          var textInstance = fiber.stateNode;
          var textContent = fiber.memoizedProps;
          var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
          {
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot:
                    {
                      var parentContainer = returnFiber.stateNode.containerInfo;
                      didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                      break;
                    }
                  case HostComponent:
                    {
                      var parentType = returnFiber.type;
                      var parentProps = returnFiber.memoizedProps;
                      var parentInstance = returnFiber.stateNode;
                      didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                      break;
                    }
                }
              }
            }
          }
          return shouldUpdate;
        }
        function skipPastDehydratedSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            {
              throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
        }
        function popToNextHostParent(fiber) {
          var parent = fiber.return;
          while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
            parent = parent.return;
          }
          hydrationParentFiber = parent;
        }
        function popHydrationState(fiber) {
          if (fiber !== hydrationParentFiber) {
            return false;
          }
          if (!isHydrating) {
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
          }
          var type = fiber.type;
          if (fiber.tag !== HostComponent || type !== "head" && type !== "body" && !shouldSetTextContent(type, fiber.memoizedProps)) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              deleteHydratableInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          popToNextHostParent(fiber);
          if (fiber.tag === SuspenseComponent) {
            nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
          } else {
            nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
          }
          return true;
        }
        function resetHydrationState() {
          hydrationParentFiber = null;
          nextHydratableInstance = null;
          isHydrating = false;
        }
        function getIsHydrating() {
          return isHydrating;
        }
        var workInProgressSources = [];
        var rendererSigil$1;
        {
          rendererSigil$1 = {};
        }
        function markSourceAsDirty(mutableSource) {
          workInProgressSources.push(mutableSource);
        }
        function resetWorkInProgressVersions() {
          for (var i = 0; i < workInProgressSources.length; i++) {
            var mutableSource = workInProgressSources[i];
            {
              mutableSource._workInProgressVersionPrimary = null;
            }
          }
          workInProgressSources.length = 0;
        }
        function getWorkInProgressVersion(mutableSource) {
          {
            return mutableSource._workInProgressVersionPrimary;
          }
        }
        function setWorkInProgressVersion(mutableSource, version) {
          {
            mutableSource._workInProgressVersionPrimary = version;
          }
          workInProgressSources.push(mutableSource);
        }
        function warnAboutMultipleRenderersDEV(mutableSource) {
          {
            {
              if (mutableSource._currentPrimaryRenderer == null) {
                mutableSource._currentPrimaryRenderer = rendererSigil$1;
              } else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) {
                error("Detected multiple renderers concurrently rendering the same mutable source. This is currently unsupported.");
              }
            }
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
        var didWarnAboutMismatchedHooksForComponent;
        var didWarnAboutUseOpaqueIdentifier;
        {
          didWarnAboutUseOpaqueIdentifier = {};
          didWarnAboutMismatchedHooksForComponent = new Set();
        }
        var renderLanes = NoLanes;
        var currentlyRenderingFiber$1 = null;
        var currentHook = null;
        var workInProgressHook = null;
        var didScheduleRenderPhaseUpdate = false;
        var didScheduleRenderPhaseUpdateDuringThisPass = false;
        var RE_RENDER_LIMIT = 25;
        var currentHookNameInDev = null;
        var hookTypesDev = null;
        var hookTypesUpdateIndexDev = -1;
        var ignorePreviousDependencies = false;
        function mountHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev === null) {
              hookTypesDev = [hookName];
            } else {
              hookTypesDev.push(hookName);
            }
          }
        }
        function updateHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev !== null) {
              hookTypesUpdateIndexDev++;
              if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                warnOnHookMismatchInDev(hookName);
              }
            }
          }
        }
        function checkDepsAreArrayDev(deps) {
          {
            if (deps !== void 0 && deps !== null && !Array.isArray(deps)) {
              error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
            }
          }
        }
        function warnOnHookMismatchInDev(currentHookName) {
          {
            var componentName = getComponentName(currentlyRenderingFiber$1.type);
            if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
              didWarnAboutMismatchedHooksForComponent.add(componentName);
              if (hookTypesDev !== null) {
                var table = "";
                var secondColumnStart = 30;
                for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                  var oldHookName = hookTypesDev[i];
                  var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                  var row = i + 1 + ". " + oldHookName;
                  while (row.length < secondColumnStart) {
                    row += " ";
                  }
                  row += newHookName + "\n";
                  table += row;
                }
                error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
              }
            }
          }
        }
        function throwInvalidHookError() {
          {
            {
              throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          {
            if (ignorePreviousDependencies) {
              return false;
            }
          }
          if (prevDeps === null) {
            {
              error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
            }
          }
          for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
            if (objectIs(nextDeps[i], prevDeps[i])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
          renderLanes = nextRenderLanes;
          currentlyRenderingFiber$1 = workInProgress2;
          {
            hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
            hookTypesUpdateIndexDev = -1;
            ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
          }
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          workInProgress2.lanes = NoLanes;
          {
            if (current2 !== null && current2.memoizedState !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
            } else if (hookTypesDev !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
            } else {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
            }
          }
          var children = Component(props, secondArg);
          if (didScheduleRenderPhaseUpdateDuringThisPass) {
            var numberOfReRenders = 0;
            do {
              didScheduleRenderPhaseUpdateDuringThisPass = false;
              if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
                {
                  throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
              }
              numberOfReRenders += 1;
              {
                ignorePreviousDependencies = false;
              }
              currentHook = null;
              workInProgressHook = null;
              workInProgress2.updateQueue = null;
              {
                hookTypesUpdateIndexDev = -1;
              }
              ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
              children = Component(props, secondArg);
            } while (didScheduleRenderPhaseUpdateDuringThisPass);
          }
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          {
            workInProgress2._debugHookTypes = hookTypesDev;
          }
          var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            currentHookNameInDev = null;
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
          }
          didScheduleRenderPhaseUpdate = false;
          if (!!didRenderTooFewHooks) {
            {
              throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
          }
          return children;
        }
        function bailoutHooks(current2, workInProgress2, lanes) {
          workInProgress2.updateQueue = current2.updateQueue;
          workInProgress2.flags &= ~(Passive | Update);
          current2.lanes = removeLanes(current2.lanes, lanes);
        }
        function resetHooksAfterThrow() {
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          if (didScheduleRenderPhaseUpdate) {
            var hook = currentlyRenderingFiber$1.memoizedState;
            while (hook !== null) {
              var queue = hook.queue;
              if (queue !== null) {
                queue.pending = null;
              }
              hook = hook.next;
            }
            didScheduleRenderPhaseUpdate = false;
          }
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            currentHookNameInDev = null;
            isUpdatingOpaqueValueInRenderPhase = false;
          }
          didScheduleRenderPhaseUpdateDuringThisPass = false;
        }
        function mountWorkInProgressHook() {
          var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
          };
          if (workInProgressHook === null) {
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
          } else {
            workInProgressHook = workInProgressHook.next = hook;
          }
          return workInProgressHook;
        }
        function updateWorkInProgressHook() {
          var nextCurrentHook;
          if (currentHook === null) {
            var current2 = currentlyRenderingFiber$1.alternate;
            if (current2 !== null) {
              nextCurrentHook = current2.memoizedState;
            } else {
              nextCurrentHook = null;
            }
          } else {
            nextCurrentHook = currentHook.next;
          }
          var nextWorkInProgressHook;
          if (workInProgressHook === null) {
            nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
          } else {
            nextWorkInProgressHook = workInProgressHook.next;
          }
          if (nextWorkInProgressHook !== null) {
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
          } else {
            if (!(nextCurrentHook !== null)) {
              {
                throw Error("Rendered more hooks than during the previous render.");
              }
            }
            currentHook = nextCurrentHook;
            var newHook = {
              memoizedState: currentHook.memoizedState,
              baseState: currentHook.baseState,
              baseQueue: currentHook.baseQueue,
              queue: currentHook.queue,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            } else {
              workInProgressHook = workInProgressHook.next = newHook;
            }
          }
          return workInProgressHook;
        }
        function createFunctionComponentUpdateQueue() {
          return {
            lastEffect: null
          };
        }
        function basicStateReducer(state, action) {
          return typeof action === "function" ? action(state) : action;
        }
        function mountReducer(reducer, initialArg, init) {
          var hook = mountWorkInProgressHook();
          var initialState;
          if (init !== void 0) {
            initialState = init(initialArg);
          } else {
            initialState = initialArg;
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
          };
          var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (!(queue !== null)) {
            {
              throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
          }
          queue.lastRenderedReducer = reducer;
          var current2 = currentHook;
          var baseQueue = current2.baseQueue;
          var pendingQueue = queue.pending;
          if (pendingQueue !== null) {
            if (baseQueue !== null) {
              var baseFirst = baseQueue.next;
              var pendingFirst = pendingQueue.next;
              baseQueue.next = pendingFirst;
              pendingQueue.next = baseFirst;
            }
            {
              if (current2.baseQueue !== baseQueue) {
                error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
              }
            }
            current2.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
          }
          if (baseQueue !== null) {
            var first = baseQueue.next;
            var newState = current2.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first;
            do {
              var updateLane = update.lane;
              if (!isSubsetOfLanes(renderLanes, updateLane)) {
                var clone = {
                  lane: updateLane,
                  action: update.action,
                  eagerReducer: update.eagerReducer,
                  eagerState: update.eagerState,
                  next: null
                };
                if (newBaseQueueLast === null) {
                  newBaseQueueFirst = newBaseQueueLast = clone;
                  newBaseState = newState;
                } else {
                  newBaseQueueLast = newBaseQueueLast.next = clone;
                }
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                markSkippedUpdateLanes(updateLane);
              } else {
                if (newBaseQueueLast !== null) {
                  var _clone = {
                    lane: NoLane,
                    action: update.action,
                    eagerReducer: update.eagerReducer,
                    eagerState: update.eagerState,
                    next: null
                  };
                  newBaseQueueLast = newBaseQueueLast.next = _clone;
                }
                if (update.eagerReducer === reducer) {
                  newState = update.eagerState;
                } else {
                  var action = update.action;
                  newState = reducer(newState, action);
                }
              }
              update = update.next;
            } while (update !== null && update !== first);
            if (newBaseQueueLast === null) {
              newBaseState = newState;
            } else {
              newBaseQueueLast.next = newBaseQueueFirst;
            }
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
          }
          var dispatch = queue.dispatch;
          return [hook.memoizedState, dispatch];
        }
        function rerenderReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (!(queue !== null)) {
            {
              throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
          }
          queue.lastRenderedReducer = reducer;
          var dispatch = queue.dispatch;
          var lastRenderPhaseUpdate = queue.pending;
          var newState = hook.memoizedState;
          if (lastRenderPhaseUpdate !== null) {
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;
            do {
              var action = update.action;
              newState = reducer(newState, action);
              update = update.next;
            } while (update !== firstRenderPhaseUpdate);
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            if (hook.baseQueue === null) {
              hook.baseState = newState;
            }
            queue.lastRenderedState = newState;
          }
          return [newState, dispatch];
        }
        function readFromUnsubcribedMutableSource(root2, source, getSnapshot) {
          {
            warnAboutMultipleRenderersDEV(source);
          }
          var getVersion = source._getVersion;
          var version = getVersion(source._source);
          var isSafeToReadFromSource = false;
          var currentRenderVersion = getWorkInProgressVersion(source);
          if (currentRenderVersion !== null) {
            isSafeToReadFromSource = currentRenderVersion === version;
          } else {
            isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root2.mutableReadLanes);
            if (isSafeToReadFromSource) {
              setWorkInProgressVersion(source, version);
            }
          }
          if (isSafeToReadFromSource) {
            var snapshot = getSnapshot(source._source);
            {
              if (typeof snapshot === "function") {
                error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
              }
            }
            return snapshot;
          } else {
            markSourceAsDirty(source);
            {
              {
                throw Error("Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.");
              }
            }
          }
        }
        function useMutableSource(hook, source, getSnapshot, subscribe) {
          _s20();
          var root2 = getWorkInProgressRoot();
          if (!(root2 !== null)) {
            {
              throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            }
          }
          var getVersion = source._getVersion;
          var version = getVersion(source._source);
          var dispatcher = ReactCurrentDispatcher$1.current;
          var _dispatcher$useState = dispatcher.useState(function () {
            return readFromUnsubcribedMutableSource(root2, source, getSnapshot);
          }), currentSnapshot = _dispatcher$useState[0], setSnapshot = _dispatcher$useState[1];
          var snapshot = currentSnapshot;
          var stateHook = workInProgressHook;
          var memoizedState = hook.memoizedState;
          var refs = memoizedState.refs;
          var prevGetSnapshot = refs.getSnapshot;
          var prevSource = memoizedState.source;
          var prevSubscribe = memoizedState.subscribe;
          var fiber = currentlyRenderingFiber$1;
          hook.memoizedState = {
            refs,
            source,
            subscribe
          };
          dispatcher.useEffect(function () {
            refs.getSnapshot = getSnapshot;
            refs.setSnapshot = setSnapshot;
            var maybeNewVersion = getVersion(source._source);
            if (!objectIs(version, maybeNewVersion)) {
              var maybeNewSnapshot = getSnapshot(source._source);
              {
                if (typeof maybeNewSnapshot === "function") {
                  error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                }
              }
              if (!objectIs(snapshot, maybeNewSnapshot)) {
                setSnapshot(maybeNewSnapshot);
                var lane = requestUpdateLane(fiber);
                markRootMutableRead(root2, lane);
              }
              markRootEntangled(root2, root2.mutableReadLanes);
            }
          }, [getSnapshot, source, subscribe]);
          dispatcher.useEffect(function () {
            var handleChange = function () {
              var latestGetSnapshot = refs.getSnapshot;
              var latestSetSnapshot = refs.setSnapshot;
              try {
                latestSetSnapshot(latestGetSnapshot(source._source));
                var lane = requestUpdateLane(fiber);
                markRootMutableRead(root2, lane);
              } catch (error2) {
                latestSetSnapshot(function () {
                  throw error2;
                });
              }
            };
            var unsubscribe = subscribe(source._source, handleChange);
            {
              if (typeof unsubscribe !== "function") {
                error("Mutable source subscribe function must return an unsubscribe function.");
              }
            }
            return unsubscribe;
          }, [source, subscribe]);
          if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe)) {
            var newQueue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: snapshot
            };
            newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
            stateHook.queue = newQueue;
            stateHook.baseQueue = null;
            snapshot = readFromUnsubcribedMutableSource(root2, source, getSnapshot);
            stateHook.memoizedState = stateHook.baseState = snapshot;
          }
          return snapshot;
        }
        _s20(useMutableSource, "j3bnYwTwuDzDBhH0EGG9+NCr+xs=");
        function mountMutableSource(source, getSnapshot, subscribe) {
          _s21();
          var hook = mountWorkInProgressHook();
          hook.memoizedState = {
            refs: {
              getSnapshot,
              setSnapshot: null
            },
            source,
            subscribe
          };
          return useMutableSource(hook, source, getSnapshot, subscribe);
        }
        _s21(mountMutableSource, "G46HpqTIWGoryMbF+wh82aRle1o=", false, function () {
          return [useMutableSource];
        });
        function updateMutableSource(source, getSnapshot, subscribe) {
          _s22();
          var hook = updateWorkInProgressHook();
          return useMutableSource(hook, source, getSnapshot, subscribe);
        }
        _s22(updateMutableSource, "G46HpqTIWGoryMbF+wh82aRle1o=", false, function () {
          return [useMutableSource];
        });
        function mountState(initialState) {
          var hook = mountWorkInProgressHook();
          if (typeof initialState === "function") {
            initialState = initialState();
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
          };
          var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateState(initialState) {
          return updateReducer(basicStateReducer);
        }
        function rerenderState(initialState) {
          return rerenderReducer(basicStateReducer);
        }
        function pushEffect(tag, create, destroy, deps) {
          var effect = {
            tag,
            create,
            destroy,
            deps,
            next: null
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
          } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) {
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var firstEffect = lastEffect.next;
              lastEffect.next = effect;
              effect.next = firstEffect;
              componentUpdateQueue.lastEffect = effect;
            }
          }
          return effect;
        }
        function mountRef(initialValue) {
          var hook = mountWorkInProgressHook();
          var ref = {
            current: initialValue
          };
          {
            Object.seal(ref);
          }
          hook.memoizedState = ref;
          return ref;
        }
        function updateRef(initialValue) {
          var hook = updateWorkInProgressHook();
          return hook.memoizedState;
        }
        function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
        }
        function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var destroy = void 0;
          if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
              var prevDeps = prevEffect.deps;
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                pushEffect(hookFlags, create, destroy, nextDeps);
                return;
              }
            }
          }
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
        }
        function mountEffect(create, deps) {
          {
            if (typeof jest !== "undefined") {
              warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
            }
          }
          return mountEffectImpl(Update | Passive, Passive$1, create, deps);
        }
        function updateEffect(create, deps) {
          {
            if (typeof jest !== "undefined") {
              warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
            }
          }
          return updateEffectImpl(Update | Passive, Passive$1, create, deps);
        }
        function mountLayoutEffect(create, deps) {
          return mountEffectImpl(Update, Layout, create, deps);
        }
        function updateLayoutEffect(create, deps) {
          return updateEffectImpl(Update, Layout, create, deps);
        }
        function imperativeHandleEffect(create, ref) {
          if (typeof ref === "function") {
            var refCallback = ref;
            var _inst = create();
            refCallback(_inst);
            return function () {
              refCallback(null);
            };
          } else if (ref !== null && ref !== void 0) {
            var refObject = ref;
            {
              if (!refObject.hasOwnProperty("current")) {
                error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
              }
            }
            var _inst2 = create();
            refObject.current = _inst2;
            return function () {
              refObject.current = null;
            };
          }
        }
        function mountImperativeHandle(ref, create, deps) {
          {
            if (typeof create !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }
        function updateImperativeHandle(ref, create, deps) {
          {
            if (typeof create !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }
        function mountDebugValue(value, formatterFn) {}
        var updateDebugValue = mountDebugValue;
        function mountCallback(callback, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function updateCallback(callback, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function mountMemo(nextCreate, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function updateMemo(nextCreate, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function mountDeferredValue(value) {
          var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
          mountEffect(function () {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
              setValue(value);
            } finally {
              ReactCurrentBatchConfig$1.transition = prevTransition;
            }
          }, [value]);
          return prevValue;
        }
        function updateDeferredValue(value) {
          var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
          updateEffect(function () {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
              setValue(value);
            } finally {
              ReactCurrentBatchConfig$1.transition = prevTransition;
            }
          }, [value]);
          return prevValue;
        }
        function rerenderDeferredValue(value) {
          var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
          updateEffect(function () {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
              setValue(value);
            } finally {
              ReactCurrentBatchConfig$1.transition = prevTransition;
            }
          }, [value]);
          return prevValue;
        }
        function startTransition(setPending, callback) {
          var priorityLevel = getCurrentPriorityLevel();
          {
            runWithPriority$1(priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel, function () {
              setPending(true);
            });
            runWithPriority$1(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function () {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setPending(false);
                callback();
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            });
          }
        }
        function mountTransition() {
          var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1];
          var start = startTransition.bind(null, setPending);
          mountRef(start);
          return [start, isPending];
        }
        function updateTransition() {
          var _updateState2 = updateState(), isPending = _updateState2[0];
          var startRef = updateRef();
          var start = startRef.current;
          return [start, isPending];
        }
        function rerenderTransition() {
          var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0];
          var startRef = updateRef();
          var start = startRef.current;
          return [start, isPending];
        }
        var isUpdatingOpaqueValueInRenderPhase = false;
        function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
          {
            return isUpdatingOpaqueValueInRenderPhase;
          }
        }
        function warnOnOpaqueIdentifierAccessInDEV(fiber) {
          {
            var name = getComponentName(fiber.type) || "Unknown";
            if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
              error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
              didWarnAboutUseOpaqueIdentifier[name] = true;
            }
          }
        }
        function mountOpaqueIdentifier() {
          var makeId = makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1));
          if (getIsHydrating()) {
            var didUpgrade = false;
            var fiber = currentlyRenderingFiber$1;
            var readValue = function () {
              if (!didUpgrade) {
                didUpgrade = true;
                {
                  isUpdatingOpaqueValueInRenderPhase = true;
                  setId(makeId());
                  isUpdatingOpaqueValueInRenderPhase = false;
                  warnOnOpaqueIdentifierAccessInDEV(fiber);
                }
              }
              {
                {
                  throw Error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
                }
              }
            };
            var id = makeOpaqueHydratingObject(readValue);
            var setId = mountState(id)[1];
            if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
              currentlyRenderingFiber$1.flags |= Update | Passive;
              pushEffect(HasEffect | Passive$1, function () {
                setId(makeId());
              }, void 0, null);
            }
            return id;
          } else {
            var _id = makeId();
            mountState(_id);
            return _id;
          }
        }
        function updateOpaqueIdentifier() {
          var id = updateState()[0];
          return id;
        }
        function rerenderOpaqueIdentifier() {
          var id = rerenderState()[0];
          return id;
        }
        function dispatchAction(fiber, queue, action) {
          {
            if (typeof arguments[3] === "function") {
              error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          var update = {
            lane,
            action,
            eagerReducer: null,
            eagerState: null,
            next: null
          };
          var pending = queue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          queue.pending = update;
          var alternate = fiber.alternate;
          if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
          } else {
            if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
              var lastRenderedReducer = queue.lastRenderedReducer;
              if (lastRenderedReducer !== null) {
                var prevDispatcher;
                {
                  prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                }
                try {
                  var currentState = queue.lastRenderedState;
                  var eagerState = lastRenderedReducer(currentState, action);
                  update.eagerReducer = lastRenderedReducer;
                  update.eagerState = eagerState;
                  if (objectIs(eagerState, currentState)) {
                    return;
                  }
                } catch (error2) {} finally {
                  {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                }
              }
            }
            {
              if (typeof jest !== "undefined") {
                warnIfNotScopedWithMatchingAct(fiber);
                warnIfNotCurrentlyActingUpdatesInDev(fiber);
              }
            }
            scheduleUpdateOnFiber(fiber, lane, eventTime);
          }
        }
        var ContextOnlyDispatcher = {
          readContext,
          useCallback: throwInvalidHookError,
          useContext: throwInvalidHookError,
          useEffect: throwInvalidHookError,
          useImperativeHandle: throwInvalidHookError,
          useLayoutEffect: throwInvalidHookError,
          useMemo: throwInvalidHookError,
          useReducer: throwInvalidHookError,
          useRef: throwInvalidHookError,
          useState: throwInvalidHookError,
          useDebugValue: throwInvalidHookError,
          useDeferredValue: throwInvalidHookError,
          useTransition: throwInvalidHookError,
          useMutableSource: throwInvalidHookError,
          useOpaqueIdentifier: throwInvalidHookError,
          unstable_isNewReconciler: enableNewReconciler
        };
        var HooksDispatcherOnMountInDEV = null;
        var HooksDispatcherOnMountWithHookTypesInDEV = null;
        var HooksDispatcherOnUpdateInDEV = null;
        var HooksDispatcherOnRerenderInDEV = null;
        var InvalidNestedHooksDispatcherOnMountInDEV = null;
        var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
        var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
        {
          var warnInvalidContextAccess = function () {
            error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          };
          var warnInvalidHookAccess = function () {
            error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
          };
          HooksDispatcherOnMountInDEV = {
            readContext: function (context, observedBits) {
              return readContext(context, observedBits);
            },
            useCallback: function (callback, deps) {
              currentHookNameInDev = "useCallback";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountCallback(callback, deps);
            },
            useContext: function (context, observedBits) {
              currentHookNameInDev = "useContext";
              mountHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function (create, deps) {
              currentHookNameInDev = "useEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountEffect(create, deps);
            },
            useImperativeHandle: function (ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function (create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountLayoutEffect(create, deps);
            },
            useMemo: function (create, deps) {
              currentHookNameInDev = "useMemo";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function (reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function (initialValue) {
              currentHookNameInDev = "useRef";
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function (initialState) {
              currentHookNameInDev = "useState";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function (value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function (value) {
              currentHookNameInDev = "useDeferredValue";
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function () {
              currentHookNameInDev = "useTransition";
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function (source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              mountHookTypesDev();
              return mountMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function () {
              currentHookNameInDev = "useOpaqueIdentifier";
              mountHookTypesDev();
              return mountOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnMountWithHookTypesInDEV = {
            readContext: function (context, observedBits) {
              return readContext(context, observedBits);
            },
            useCallback: function (callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function (context, observedBits) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function (create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function (ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function (create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function (create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function (reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function (initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function (initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function (value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function (value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function () {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function (source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return mountMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function () {
              currentHookNameInDev = "useOpaqueIdentifier";
              updateHookTypesDev();
              return mountOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnUpdateInDEV = {
            readContext: function (context, observedBits) {
              return readContext(context, observedBits);
            },
            useCallback: function (callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function (context, observedBits) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function (create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function (ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function (create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function (create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function (reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function (initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function (initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function (value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function (value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function () {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function (source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function () {
              currentHookNameInDev = "useOpaqueIdentifier";
              updateHookTypesDev();
              return updateOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnRerenderInDEV = {
            readContext: function (context, observedBits) {
              return readContext(context, observedBits);
            },
            useCallback: function (callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function (context, observedBits) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function (create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function (ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function (create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function (create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function (reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function (initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function (initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function (value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function (value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function () {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function (source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function () {
              currentHookNameInDev = "useOpaqueIdentifier";
              updateHookTypesDev();
              return rerenderOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnMountInDEV = {
            readContext: function (context, observedBits) {
              warnInvalidContextAccess();
              return readContext(context, observedBits);
            },
            useCallback: function (callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function (context, observedBits) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function (create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function (ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function (create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function (create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function (reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function (initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function (initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function (value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function (value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function () {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function (source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function () {
              currentHookNameInDev = "useOpaqueIdentifier";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnUpdateInDEV = {
            readContext: function (context, observedBits) {
              warnInvalidContextAccess();
              return readContext(context, observedBits);
            },
            useCallback: function (callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function (context, observedBits) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function (create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function (ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function (create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function (create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function (reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function (initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function (initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function (value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function (value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function () {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function (source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function () {
              currentHookNameInDev = "useOpaqueIdentifier";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnRerenderInDEV = {
            readContext: function (context, observedBits) {
              warnInvalidContextAccess();
              return readContext(context, observedBits);
            },
            useCallback: function (callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function (context, observedBits) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function (create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function (ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function (create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function (create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function (reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function (initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function (initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function (value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function (value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function () {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function (source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function () {
              currentHookNameInDev = "useOpaqueIdentifier";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
        }
        var now$1 = Scheduler.unstable_now;
        var commitTime = 0;
        var profilerStartTime = -1;
        function getCommitTime() {
          return commitTime;
        }
        function recordCommitTime() {
          commitTime = now$1();
        }
        function startProfilerTimer(fiber) {
          profilerStartTime = now$1();
          if (fiber.actualStartTime < 0) {
            fiber.actualStartTime = now$1();
          }
        }
        function stopProfilerTimerIfRunning(fiber) {
          profilerStartTime = -1;
        }
        function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
          if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) {
              fiber.selfBaseDuration = elapsedTime;
            }
            profilerStartTime = -1;
          }
        }
        function transferActualDuration(fiber) {
          var child = fiber.child;
          while (child) {
            fiber.actualDuration += child.actualDuration;
            child = child.sibling;
          }
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var didReceiveUpdate = false;
        var didWarnAboutBadClass;
        var didWarnAboutModulePatternComponent;
        var didWarnAboutContextTypeOnFunctionComponent;
        var didWarnAboutGetDerivedStateOnFunctionComponent;
        var didWarnAboutFunctionRefs;
        var didWarnAboutReassigningProps;
        var didWarnAboutRevealOrder;
        var didWarnAboutTailOptions;
        {
          didWarnAboutBadClass = {};
          didWarnAboutModulePatternComponent = {};
          didWarnAboutContextTypeOnFunctionComponent = {};
          didWarnAboutGetDerivedStateOnFunctionComponent = {};
          didWarnAboutFunctionRefs = {};
          didWarnAboutReassigningProps = false;
          didWarnAboutRevealOrder = {};
          didWarnAboutTailOptions = {};
        }
        function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
          if (current2 === null) {
            workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
          }
        }
        function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
          workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        }
        function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
              }
            }
          }
          var render2 = Component.render;
          var ref = workInProgress2.ref;
          var nextChildren;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
            if (workInProgress2.mode & StrictMode) {
              disableLogs();
              try {
                nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              } finally {
                reenableLogs();
              }
            }
            setIsRendering(false);
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMemoComponent(current2, workInProgress2, Component, nextProps, updateLanes, renderLanes2) {
          if (current2 === null) {
            var type = Component.type;
            if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === void 0) {
              var resolvedType = type;
              {
                resolvedType = resolveFunctionForHotReloading(type);
              }
              workInProgress2.tag = SimpleMemoComponent;
              workInProgress2.type = resolvedType;
              {
                validateFunctionComponentInDev(workInProgress2, type);
              }
              return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, updateLanes, renderLanes2);
            }
            {
              var innerPropTypes = type.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(type));
              }
            }
            var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
            child.ref = workInProgress2.ref;
            child.return = workInProgress2;
            workInProgress2.child = child;
            return child;
          }
          {
            var _type = Component.type;
            var _innerPropTypes = _type.propTypes;
            if (_innerPropTypes) {
              checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentName(_type));
            }
          }
          var currentChild = current2.child;
          if (!includesSomeLane(updateLanes, renderLanes2)) {
            var prevProps = currentChild.memoizedProps;
            var compare = Component.compare;
            compare = compare !== null ? compare : shallowEqual;
            if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
          }
          workInProgress2.flags |= PerformedWork;
          var newChild = createWorkInProgress(currentChild, nextProps);
          newChild.ref = workInProgress2.ref;
          newChild.return = workInProgress2;
          workInProgress2.child = newChild;
          return newChild;
        }
        function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, updateLanes, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerMemoType = workInProgress2.elementType;
              if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                var lazyComponent = outerMemoType;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  outerMemoType = init(payload);
                } catch (x) {
                  outerMemoType = null;
                }
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(outerPropTypes, nextProps, "prop", getComponentName(outerMemoType));
                }
              }
            }
          }
          if (current2 !== null) {
            var prevProps = current2.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
              didReceiveUpdate = false;
              if (!includesSomeLane(renderLanes2, updateLanes)) {
                workInProgress2.lanes = current2.lanes;
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              }
            }
          }
          return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
        }
        function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          var prevState = current2 !== null ? current2.memoizedState : null;
          if (nextProps.mode === "hidden" || nextProps.mode === "unstable-defer-without-hiding") {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              var nextState = {
                baseLanes: NoLanes
              };
              workInProgress2.memoizedState = nextState;
              pushRenderLanes(workInProgress2, renderLanes2);
            } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
              var nextBaseLanes;
              if (prevState !== null) {
                var prevBaseLanes = prevState.baseLanes;
                nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
              } else {
                nextBaseLanes = renderLanes2;
              }
              {
                markSpawnedWork(OffscreenLane);
              }
              workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
              var _nextState = {
                baseLanes: nextBaseLanes
              };
              workInProgress2.memoizedState = _nextState;
              pushRenderLanes(workInProgress2, nextBaseLanes);
              return null;
            } else {
              var _nextState2 = {
                baseLanes: NoLanes
              };
              workInProgress2.memoizedState = _nextState2;
              var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
              pushRenderLanes(workInProgress2, subtreeRenderLanes2);
            }
          } else {
            var _subtreeRenderLanes;
            if (prevState !== null) {
              _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
              workInProgress2.memoizedState = null;
            } else {
              _subtreeRenderLanes = renderLanes2;
            }
            pushRenderLanes(workInProgress2, _subtreeRenderLanes);
          }
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        var updateLegacyHiddenComponent = updateOffscreenComponent;
        function updateFragment(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMode(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateProfiler(current2, workInProgress2, renderLanes2) {
          {
            workInProgress2.flags |= Update;
            var stateNode = workInProgress2.stateNode;
            stateNode.effectDuration = 0;
            stateNode.passiveEffectDuration = 0;
          }
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markRef(current2, workInProgress2) {
          var ref = workInProgress2.ref;
          if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
            workInProgress2.flags |= Ref;
          }
        }
        function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
              }
            }
          }
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          var nextChildren;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
            if (workInProgress2.mode & StrictMode) {
              disableLogs();
              try {
                nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
              } finally {
                reenableLogs();
              }
            }
            setIsRendering(false);
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
              }
            }
          }
          var hasContext;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var instance = workInProgress2.stateNode;
          var shouldUpdate;
          if (instance === null) {
            if (current2 !== null) {
              current2.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            shouldUpdate = true;
          } else if (current2 === null) {
            shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
          } else {
            shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
          }
          var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
          {
            var inst = workInProgress2.stateNode;
            if (shouldUpdate && inst.props !== nextProps) {
              if (!didWarnAboutReassigningProps) {
                error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress2.type) || "a component");
              }
              didWarnAboutReassigningProps = true;
            }
          }
          return nextUnitOfWork;
        }
        function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
          markRef(current2, workInProgress2);
          var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (!shouldUpdate && !didCaptureError) {
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, false);
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          var instance = workInProgress2.stateNode;
          ReactCurrentOwner$1.current = workInProgress2;
          var nextChildren;
          if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
            nextChildren = null;
            {
              stopProfilerTimerIfRunning();
            }
          } else {
            {
              setIsRendering(true);
              nextChildren = instance.render();
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  instance.render();
                } finally {
                  reenableLogs();
                }
              }
              setIsRendering(false);
            }
          }
          workInProgress2.flags |= PerformedWork;
          if (current2 !== null && didCaptureError) {
            forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          workInProgress2.memoizedState = instance.state;
          if (hasContext) {
            invalidateContextProvider(workInProgress2, Component, true);
          }
          return workInProgress2.child;
        }
        function pushHostRootContext(workInProgress2) {
          var root2 = workInProgress2.stateNode;
          if (root2.pendingContext) {
            pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
          } else if (root2.context) {
            pushTopLevelContextObject(workInProgress2, root2.context, false);
          }
          pushHostContainer(workInProgress2, root2.containerInfo);
        }
        function updateHostRoot(current2, workInProgress2, renderLanes2) {
          pushHostRootContext(workInProgress2);
          var updateQueue = workInProgress2.updateQueue;
          if (!(current2 !== null && updateQueue !== null)) {
            {
              throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var nextProps = workInProgress2.pendingProps;
          var prevState = workInProgress2.memoizedState;
          var prevChildren = prevState !== null ? prevState.element : null;
          cloneUpdateQueue(current2, workInProgress2);
          processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
          var nextState = workInProgress2.memoizedState;
          var nextChildren = nextState.element;
          if (nextChildren === prevChildren) {
            resetHydrationState();
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          var root2 = workInProgress2.stateNode;
          if (root2.hydrate && enterHydrationState(workInProgress2)) {
            {
              var mutableSourceEagerHydrationData = root2.mutableSourceEagerHydrationData;
              if (mutableSourceEagerHydrationData != null) {
                for (var i = 0; i < mutableSourceEagerHydrationData.length; i += 2) {
                  var mutableSource = mutableSourceEagerHydrationData[i];
                  var version = mutableSourceEagerHydrationData[i + 1];
                  setWorkInProgressVersion(mutableSource, version);
                }
              }
            }
            var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            workInProgress2.child = child;
            var node = child;
            while (node) {
              node.flags = node.flags & ~Placement | Hydrating;
              node = node.sibling;
            }
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            resetHydrationState();
          }
          return workInProgress2.child;
        }
        function updateHostComponent(current2, workInProgress2, renderLanes2) {
          pushHostContext(workInProgress2);
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          var type = workInProgress2.type;
          var nextProps = workInProgress2.pendingProps;
          var prevProps = current2 !== null ? current2.memoizedProps : null;
          var nextChildren = nextProps.children;
          var isDirectTextChild = shouldSetTextContent(type, nextProps);
          if (isDirectTextChild) {
            nextChildren = null;
          } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
            workInProgress2.flags |= ContentReset;
          }
          markRef(current2, workInProgress2);
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateHostText(current2, workInProgress2) {
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          return null;
        }
        function mountLazyComponent(_current, workInProgress2, elementType, updateLanes, renderLanes2) {
          if (_current !== null) {
            _current.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.flags |= Placement;
          }
          var props = workInProgress2.pendingProps;
          var lazyComponent = elementType;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;
          var Component = init(payload);
          workInProgress2.type = Component;
          var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
          var resolvedProps = resolveDefaultProps(Component, props);
          var child;
          switch (resolvedTag) {
            case FunctionComponent:
              {
                {
                  validateFunctionComponentInDev(workInProgress2, Component);
                  workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
                }
                child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
            case ClassComponent:
              {
                {
                  workInProgress2.type = Component = resolveClassForHotReloading(Component);
                }
                child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
            case ForwardRef:
              {
                {
                  workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
                }
                child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
            case MemoComponent:
              {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentName(Component));
                    }
                  }
                }
                child = updateMemoComponent(null, workInProgress2, Component, resolveDefaultProps(Component.type, resolvedProps), updateLanes, renderLanes2);
                return child;
              }
          }
          var hint = "";
          {
            if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
              hint = " Did you wrap a component in React.lazy() more than once?";
            }
          }
          {
            {
              throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
            }
          }
        }
        function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
          if (_current !== null) {
            _current.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.flags |= Placement;
          }
          workInProgress2.tag = ClassComponent;
          var hasContext;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          constructClassInstance(workInProgress2, Component, nextProps);
          mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
          return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
        }
        function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
          if (_current !== null) {
            _current.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.flags |= Placement;
          }
          var props = workInProgress2.pendingProps;
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var value;
          {
            if (Component.prototype && typeof Component.prototype.render === "function") {
              var componentName = getComponentName(Component) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }
            if (workInProgress2.mode & StrictMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
            }
            setIsRendering(true);
            ReactCurrentOwner$1.current = workInProgress2;
            value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
            setIsRendering(false);
          }
          workInProgress2.flags |= PerformedWork;
          {
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              var _componentName = getComponentName(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
          }
          if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
            {
              var _componentName2 = getComponentName(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
              }
            }
            workInProgress2.tag = ClassComponent;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            var hasContext = false;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
            initializeUpdateQueue(workInProgress2);
            var getDerivedStateFromProps = Component.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, Component, getDerivedStateFromProps, props);
            }
            adoptClassInstance(workInProgress2, value);
            mountClassInstance(workInProgress2, Component, props, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
          } else {
            workInProgress2.tag = FunctionComponent;
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
                } finally {
                  reenableLogs();
                }
              }
            }
            reconcileChildren(null, workInProgress2, value, renderLanes2);
            {
              validateFunctionComponentInDev(workInProgress2, Component);
            }
            return workInProgress2.child;
          }
        }
        function validateFunctionComponentInDev(workInProgress2, Component) {
          {
            if (Component) {
              if (Component.childContextTypes) {
                error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
              }
            }
            if (workInProgress2.ref !== null) {
              var info = "";
              var ownerName = getCurrentFiberOwnerNameInDevOrNull();
              if (ownerName) {
                info += "\n\nCheck the render method of `" + ownerName + "`.";
              }
              var warningKey = ownerName || workInProgress2._debugID || "";
              var debugSource = workInProgress2._debugSource;
              if (debugSource) {
                warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
              }
              if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
              }
            }
            if (typeof Component.getDerivedStateFromProps === "function") {
              var _componentName3 = getComponentName(Component) || "Unknown";
              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
              }
            }
            if (typeof Component.contextType === "object" && Component.contextType !== null) {
              var _componentName4 = getComponentName(Component) || "Unknown";
              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error("%s: Function components do not support contextType.", _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
              }
            }
          }
        }
        var SUSPENDED_MARKER = {
          dehydrated: null,
          retryLane: NoLane
        };
        function mountSuspenseOffscreenState(renderLanes2) {
          return {
            baseLanes: renderLanes2
          };
        }
        function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
          return {
            baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2)
          };
        }
        function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
          if (current2 !== null) {
            var suspenseState = current2.memoizedState;
            if (suspenseState === null) {
              return false;
            }
          }
          return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        }
        function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
          return removeLanes(current2.childLanes, renderLanes2);
        }
        function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          {
            if (shouldSuspend(workInProgress2)) {
              workInProgress2.flags |= DidCapture;
            }
          }
          var suspenseContext = suspenseStackCursor.current;
          var showFallback = false;
          var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
            showFallback = true;
            workInProgress2.flags &= ~DidCapture;
          } else {
            if (current2 === null || current2.memoizedState !== null) {
              if (nextProps.fallback !== void 0 && nextProps.unstable_avoidThisFallback !== true) {
                suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
              }
            }
          }
          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          pushSuspenseContext(workInProgress2, suspenseContext);
          if (current2 === null) {
            if (nextProps.fallback !== void 0) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            if (showFallback) {
              var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var primaryChildFragment = workInProgress2.child;
              primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackFragment;
            } else if (typeof nextProps.unstable_expectedLoadTime === "number") {
              var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var _primaryChildFragment = workInProgress2.child;
              _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              workInProgress2.lanes = SomeRetryLane;
              {
                markSpawnedWork(SomeRetryLane);
              }
              return _fallbackFragment;
            } else {
              return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren, renderLanes2);
            }
          } else {
            var prevState = current2.memoizedState;
            if (prevState !== null) {
              if (showFallback) {
                var _nextFallbackChildren2 = nextProps.fallback;
                var _nextPrimaryChildren2 = nextProps.children;
                var _fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes2);
                var _primaryChildFragment3 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return _fallbackChildFragment;
              } else {
                var _nextPrimaryChildren3 = nextProps.children;
                var _primaryChildFragment4 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren3, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment4;
              }
            } else {
              if (showFallback) {
                var _nextFallbackChildren3 = nextProps.fallback;
                var _nextPrimaryChildren4 = nextProps.children;
                var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes2);
                var _primaryChildFragment5 = workInProgress2.child;
                var _prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes2);
                _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return _fallbackChildFragment2;
              } else {
                var _nextPrimaryChildren5 = nextProps.children;
                var _primaryChildFragment6 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren5, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment6;
              }
            }
          }
        }
        function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
          };
          var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes2, null);
          primaryChildFragment.return = workInProgress2;
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var progressedPrimaryFragment = workInProgress2.child;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          var fallbackChildFragment;
          if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = 0;
              primaryChildFragment.treeBaseDuration = 0;
            }
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          } else {
            primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          }
          primaryChildFragment.return = workInProgress2;
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function createWorkInProgressOffscreenFiber(current2, offscreenProps) {
          return createWorkInProgress(current2, offscreenProps);
        }
        function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
            mode: "visible",
            children: primaryChildren
          });
          if ((workInProgress2.mode & BlockingMode) === NoMode) {
            primaryChildFragment.lanes = renderLanes2;
          }
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = null;
          if (currentFallbackChildFragment !== null) {
            currentFallbackChildFragment.nextEffect = null;
            currentFallbackChildFragment.flags = Deletion;
            workInProgress2.firstEffect = workInProgress2.lastEffect = currentFallbackChildFragment;
          }
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          if ((mode & BlockingMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
            var progressedPrimaryFragment = workInProgress2.child;
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
              primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
            }
            var progressedLastEffect = primaryChildFragment.lastEffect;
            if (progressedLastEffect !== null) {
              workInProgress2.firstEffect = primaryChildFragment.firstEffect;
              workInProgress2.lastEffect = progressedLastEffect;
              progressedLastEffect.nextEffect = null;
            } else {
              workInProgress2.firstEffect = workInProgress2.lastEffect = null;
            }
          } else {
            primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
          }
          var fallbackChildFragment;
          if (currentFallbackChildFragment !== null) {
            fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
          } else {
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
          }
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function scheduleWorkOnFiber(fiber, renderLanes2) {
          fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
          }
          scheduleWorkOnParentPath(fiber.return, renderLanes2);
        }
        function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
          var node = firstChild;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                scheduleWorkOnFiber(node, renderLanes2);
              }
            } else if (node.tag === SuspenseListComponent) {
              scheduleWorkOnFiber(node, renderLanes2);
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === workInProgress2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress2) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function findLastContentRow(firstChild) {
          var row = firstChild;
          var lastContentRow = null;
          while (row !== null) {
            var currentRow = row.alternate;
            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              lastContentRow = row;
            }
            row = row.sibling;
          }
          return lastContentRow;
        }
        function validateRevealOrder(revealOrder) {
          {
            if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
              didWarnAboutRevealOrder[revealOrder] = true;
              if (typeof revealOrder === "string") {
                switch (revealOrder.toLowerCase()) {
                  case "together":
                  case "forwards":
                  case "backwards":
                    {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                  case "forward":
                  case "backward":
                    {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                  default:
                    error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                    break;
                }
              } else {
                error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
              }
            }
          }
        }
        function validateTailOptions(tailMode, revealOrder) {
          {
            if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
              if (tailMode !== "collapsed" && tailMode !== "hidden") {
                didWarnAboutTailOptions[tailMode] = true;
                error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
              } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                didWarnAboutTailOptions[tailMode] = true;
                error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
              }
            }
          }
        }
        function validateSuspenseListNestedChild(childSlot, index2) {
          {
            var isArray2 = Array.isArray(childSlot);
            var isIterable = !isArray2 && typeof getIteratorFn(childSlot) === "function";
            if (isArray2 || isIterable) {
              var type = isArray2 ? "array" : "iterable";
              error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
              return false;
            }
          }
          return true;
        }
        function validateSuspenseListChildren(children, revealOrder) {
          {
            if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
              if (Array.isArray(children)) {
                for (var i = 0; i < children.length; i++) {
                  if (!validateSuspenseListNestedChild(children[i], i)) {
                    return;
                  }
                }
              } else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === "function") {
                  var childrenIterator = iteratorFn.call(children);
                  if (childrenIterator) {
                    var step = childrenIterator.next();
                    var _i = 0;
                    for (; !step.done; step = childrenIterator.next()) {
                      if (!validateSuspenseListNestedChild(step.value, _i)) {
                        return;
                      }
                      _i++;
                    }
                  }
                } else {
                  error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                }
              }
            }
          }
        }
        function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
          var renderState = workInProgress2.memoizedState;
          if (renderState === null) {
            workInProgress2.memoizedState = {
              isBackwards,
              rendering: null,
              renderingStartTime: 0,
              last: lastContentRow,
              tail,
              tailMode,
              lastEffect: lastEffectBeforeRendering
            };
          } else {
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailMode = tailMode;
            renderState.lastEffect = lastEffectBeforeRendering;
          }
        }
        function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var revealOrder = nextProps.revealOrder;
          var tailMode = nextProps.tail;
          var newChildren = nextProps.children;
          validateRevealOrder(revealOrder);
          validateTailOptions(tailMode, revealOrder);
          validateSuspenseListChildren(newChildren, revealOrder);
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          var suspenseContext = suspenseStackCursor.current;
          var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress2.flags |= DidCapture;
          } else {
            var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
            if (didSuspendBefore) {
              propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }
          pushSuspenseContext(workInProgress2, suspenseContext);
          if ((workInProgress2.mode & BlockingMode) === NoMode) {
            workInProgress2.memoizedState = null;
          } else {
            switch (revealOrder) {
              case "forwards":
                {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(workInProgress2, false, tail, lastContentRow, tailMode, workInProgress2.lastEffect);
                  break;
                }
              case "backwards":
                {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode, workInProgress2.lastEffect);
                  break;
                }
              case "together":
                {
                  initSuspenseListRenderState(workInProgress2, false, null, null, void 0, workInProgress2.lastEffect);
                  break;
                }
              default:
                {
                  workInProgress2.memoizedState = null;
                }
            }
          }
          return workInProgress2.child;
        }
        function updatePortalComponent(current2, workInProgress2, renderLanes2) {
          pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
          var nextChildren = workInProgress2.pendingProps;
          if (current2 === null) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
        function updateContextProvider(current2, workInProgress2, renderLanes2) {
          var providerType = workInProgress2.type;
          var context = providerType._context;
          var newProps = workInProgress2.pendingProps;
          var oldProps = workInProgress2.memoizedProps;
          var newValue = newProps.value;
          {
            if (!(("value" in newProps))) {
              if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
              }
            }
            var providerPropTypes = workInProgress2.type.propTypes;
            if (providerPropTypes) {
              checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
            }
          }
          pushProvider(workInProgress2, newValue);
          if (oldProps !== null) {
            var oldValue = oldProps.value;
            var changedBits = calculateChangedBits(context, newValue, oldValue);
            if (changedBits === 0) {
              if (oldProps.children === newProps.children && !hasContextChanged()) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            } else {
              propagateContextChange(workInProgress2, context, changedBits, renderLanes2);
            }
          }
          var newChildren = newProps.children;
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingContextAsConsumer = false;
        function updateContextConsumer(current2, workInProgress2, renderLanes2) {
          var context = workInProgress2.type;
          {
            if (context._context === void 0) {
              if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                  hasWarnedAboutUsingContextAsConsumer = true;
                  error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
              }
            } else {
              context = context._context;
            }
          }
          var newProps = workInProgress2.pendingProps;
          var render2 = newProps.children;
          {
            if (typeof render2 !== "function") {
              error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
            }
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var newValue = readContext(context, newProps.unstable_observedBits);
          var newChildren;
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            newChildren = render2(newValue);
            setIsRendering(false);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markWorkInProgressReceivedUpdate() {
          didReceiveUpdate = true;
        }
        function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
          if (current2 !== null) {
            workInProgress2.dependencies = current2.dependencies;
          }
          {
            stopProfilerTimerIfRunning();
          }
          markSkippedUpdateLanes(workInProgress2.lanes);
          if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
            return null;
          } else {
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
        }
        function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
          {
            var returnFiber = oldWorkInProgress.return;
            if (returnFiber === null) {
              throw new Error("Cannot swap the root fiber.");
            }
            current2.alternate = null;
            oldWorkInProgress.alternate = null;
            newWorkInProgress.index = oldWorkInProgress.index;
            newWorkInProgress.sibling = oldWorkInProgress.sibling;
            newWorkInProgress.return = oldWorkInProgress.return;
            newWorkInProgress.ref = oldWorkInProgress.ref;
            if (oldWorkInProgress === returnFiber.child) {
              returnFiber.child = newWorkInProgress;
            } else {
              var prevSibling = returnFiber.child;
              if (prevSibling === null) {
                throw new Error("Expected parent to have a child.");
              }
              while (prevSibling.sibling !== oldWorkInProgress) {
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) {
                  throw new Error("Expected to find the previous sibling.");
                }
              }
              prevSibling.sibling = newWorkInProgress;
            }
            var last = returnFiber.lastEffect;
            if (last !== null) {
              last.nextEffect = current2;
              returnFiber.lastEffect = current2;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = current2;
            }
            current2.nextEffect = null;
            current2.flags = Deletion;
            newWorkInProgress.flags |= Placement;
            return newWorkInProgress;
          }
        }
        function beginWork(current2, workInProgress2, renderLanes2) {
          var updateLanes = workInProgress2.lanes;
          {
            if (workInProgress2._debugNeedsRemount && current2 !== null) {
              return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
            }
          }
          if (current2 !== null) {
            var oldProps = current2.memoizedProps;
            var newProps = workInProgress2.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
              didReceiveUpdate = true;
            } else if (!includesSomeLane(renderLanes2, updateLanes)) {
              didReceiveUpdate = false;
              switch (workInProgress2.tag) {
                case HostRoot:
                  pushHostRootContext(workInProgress2);
                  resetHydrationState();
                  break;
                case HostComponent:
                  pushHostContext(workInProgress2);
                  break;
                case ClassComponent:
                  {
                    var Component = workInProgress2.type;
                    if (isContextProvider(Component)) {
                      pushContextProvider(workInProgress2);
                    }
                    break;
                  }
                case HostPortal:
                  pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                  break;
                case ContextProvider:
                  {
                    var newValue = workInProgress2.memoizedProps.value;
                    pushProvider(workInProgress2, newValue);
                    break;
                  }
                case Profiler:
                  {
                    var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                    if (hasChildWork) {
                      workInProgress2.flags |= Update;
                    }
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                  break;
                case SuspenseComponent:
                  {
                    var state = workInProgress2.memoizedState;
                    if (state !== null) {
                      var primaryChildFragment = workInProgress2.child;
                      var primaryChildLanes = primaryChildFragment.childLanes;
                      if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                        return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                      } else {
                        pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                        var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                        if (child !== null) {
                          return child.sibling;
                        } else {
                          return null;
                        }
                      }
                    } else {
                      pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    }
                    break;
                  }
                case SuspenseListComponent:
                  {
                    var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                    var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                    if (didSuspendBefore) {
                      if (_hasChildWork) {
                        return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                      }
                      workInProgress2.flags |= DidCapture;
                    }
                    var renderState = workInProgress2.memoizedState;
                    if (renderState !== null) {
                      renderState.rendering = null;
                      renderState.tail = null;
                      renderState.lastEffect = null;
                    }
                    pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                    if (_hasChildWork) {
                      break;
                    } else {
                      return null;
                    }
                  }
                case OffscreenComponent:
                case LegacyHiddenComponent:
                  {
                    workInProgress2.lanes = NoLanes;
                    return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
                  }
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            } else {
              if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              } else {
                didReceiveUpdate = false;
              }
            }
          } else {
            didReceiveUpdate = false;
          }
          workInProgress2.lanes = NoLanes;
          switch (workInProgress2.tag) {
            case IndeterminateComponent:
              {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
            case LazyComponent:
              {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, updateLanes, renderLanes2);
              }
            case FunctionComponent:
              {
                var _Component = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, _Component, resolvedProps, renderLanes2);
              }
            case ClassComponent:
              {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component2, _resolvedProps, renderLanes2);
              }
            case HostRoot:
              return updateHostRoot(current2, workInProgress2, renderLanes2);
            case HostComponent:
              return updateHostComponent(current2, workInProgress2, renderLanes2);
            case HostText:
              return updateHostText(current2, workInProgress2);
            case SuspenseComponent:
              return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
            case HostPortal:
              return updatePortalComponent(current2, workInProgress2, renderLanes2);
            case ForwardRef:
              {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
            case Fragment:
              return updateFragment(current2, workInProgress2, renderLanes2);
            case Mode:
              return updateMode(current2, workInProgress2, renderLanes2);
            case Profiler:
              return updateProfiler(current2, workInProgress2, renderLanes2);
            case ContextProvider:
              return updateContextProvider(current2, workInProgress2, renderLanes2);
            case ContextConsumer:
              return updateContextConsumer(current2, workInProgress2, renderLanes2);
            case MemoComponent:
              {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentName(_type2));
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, updateLanes, renderLanes2);
              }
            case SimpleMemoComponent:
              {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, updateLanes, renderLanes2);
              }
            case IncompleteClassComponent:
              {
                var _Component3 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component3, _resolvedProps4, renderLanes2);
              }
            case SuspenseListComponent:
              {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
            case FundamentalComponent:
              {
                break;
              }
            case ScopeComponent:
              {
                break;
              }
            case Block:
              {
                break;
              }
            case OffscreenComponent:
              {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            case LegacyHiddenComponent:
              {
                return updateLegacyHiddenComponent(current2, workInProgress2, renderLanes2);
              }
          }
          {
            {
              throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function markUpdate(workInProgress2) {
          workInProgress2.flags |= Update;
        }
        function markRef$1(workInProgress2) {
          workInProgress2.flags |= Ref;
        }
        var appendAllChildren;
        var updateHostContainer;
        var updateHostComponent$1;
        var updateHostText$1;
        {
          appendAllChildren = function (parent, workInProgress2, needsVisibilityToggle, isHidden) {
            var node = workInProgress2.child;
            while (node !== null) {
              if (node.tag === HostComponent || node.tag === HostText) {
                appendInitialChild(parent, node.stateNode);
              } else if (node.tag === HostPortal) ; else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          };
          updateHostContainer = function (workInProgress2) {};
          updateHostComponent$1 = function (current2, workInProgress2, type, newProps, rootContainerInstance) {
            var oldProps = current2.memoizedProps;
            if (oldProps === newProps) {
              return;
            }
            var instance = workInProgress2.stateNode;
            var currentHostContext = getHostContext();
            var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
            workInProgress2.updateQueue = updatePayload;
            if (updatePayload) {
              markUpdate(workInProgress2);
            }
          };
          updateHostText$1 = function (current2, workInProgress2, oldText, newText) {
            if (oldText !== newText) {
              markUpdate(workInProgress2);
            }
          };
        }
        function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
          if (getIsHydrating()) {
            return;
          }
          switch (renderState.tailMode) {
            case "hidden":
              {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
            case "collapsed":
              {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
          }
        }
        function completeWork(current2, workInProgress2, renderLanes2) {
          var newProps = workInProgress2.pendingProps;
          switch (workInProgress2.tag) {
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
              return null;
            case ClassComponent:
              {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                return null;
              }
            case HostRoot:
              {
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var fiberRoot = workInProgress2.stateNode;
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else if (!fiberRoot.hydrate) {
                    workInProgress2.flags |= Snapshot;
                  }
                }
                updateHostContainer(workInProgress2);
                return null;
              }
            case HostComponent:
              {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (!(workInProgress2.stateNode !== null)) {
                      {
                        throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                return null;
              }
            case HostText:
              {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (!(workInProgress2.stateNode !== null)) {
                      {
                        throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                return null;
              }
            case SuspenseComponent:
              {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = false;
                if (current2 === null) {
                  if (workInProgress2.memoizedProps.fallback !== void 0) {
                    popHydrationState(workInProgress2);
                  }
                } else {
                  var prevState = current2.memoizedState;
                  prevDidTimeout = prevState !== null;
                }
                if (nextDidTimeout && !prevDidTimeout) {
                  if ((workInProgress2.mode & BlockingMode) !== NoMode) {
                    var hasInvisibleChildContext = current2 === null && workInProgress2.memoizedProps.unstable_avoidThisFallback !== true;
                    if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                      renderDidSuspend();
                    } else {
                      renderDidSuspendDelayIfPossible();
                    }
                  }
                }
                {
                  if (nextDidTimeout || prevDidTimeout) {
                    workInProgress2.flags |= Update;
                  }
                }
                return null;
              }
            case HostPortal:
              popHostContainer(workInProgress2);
              updateHostContainer(workInProgress2);
              if (current2 === null) {
                preparePortalMount(workInProgress2.stateNode.containerInfo);
              }
              return null;
            case ContextProvider:
              popProvider(workInProgress2);
              return null;
            case IncompleteClassComponent:
              {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                return null;
              }
            case SuspenseListComponent:
              {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThennables = suspended.updateQueue;
                          if (newThennables !== null) {
                            workInProgress2.updateQueue = newThennables;
                            workInProgress2.flags |= Update;
                          }
                          if (renderState.lastEffect === null) {
                            workInProgress2.firstEffect = null;
                          }
                          workInProgress2.lastEffect = renderState.lastEffect;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                      {
                        markSpawnedWork(SomeRetryLane);
                      }
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThennables = _suspended.updateQueue;
                      if (_newThennables !== null) {
                        workInProgress2.updateQueue = _newThennables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        var lastEffect = workInProgress2.lastEffect = renderState.lastEffect;
                        if (lastEffect !== null) {
                          lastEffect.nextEffect = null;
                        }
                        return null;
                      }
                    } else if (now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                      {
                        markSpawnedWork(SomeRetryLane);
                      }
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.lastEffect = workInProgress2.lastEffect;
                  renderState.renderingStartTime = now();
                  next.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next;
                }
                return null;
              }
            case FundamentalComponent:
              {
                break;
              }
            case ScopeComponent:
              {
                break;
              }
            case Block:
              break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              {
                popRenderLanes(workInProgress2);
                if (current2 !== null) {
                  var _nextState = workInProgress2.memoizedState;
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  var nextIsHidden = _nextState !== null;
                  if (prevIsHidden !== nextIsHidden && newProps.mode !== "unstable-defer-without-hiding") {
                    workInProgress2.flags |= Update;
                  }
                }
                return null;
              }
          }
          {
            {
              throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function unwindWork(workInProgress2, renderLanes2) {
          switch (workInProgress2.tag) {
            case ClassComponent:
              {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
            case HostRoot:
              {
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if (!((_flags & DidCapture) === NoFlags)) {
                  {
                    throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
                  }
                }
                workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
            case HostComponent:
              {
                popHostContext(workInProgress2);
                return null;
              }
            case SuspenseComponent:
              {
                popSuspenseContext(workInProgress2);
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
            case SuspenseListComponent:
              {
                popSuspenseContext(workInProgress2);
                return null;
              }
            case HostPortal:
              popHostContainer(workInProgress2);
              return null;
            case ContextProvider:
              popProvider(workInProgress2);
              return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(workInProgress2);
              return null;
            default:
              return null;
          }
        }
        function unwindInterruptedWork(interruptedWork) {
          switch (interruptedWork.tag) {
            case ClassComponent:
              {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
            case HostRoot:
              {
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
            case HostComponent:
              {
                popHostContext(interruptedWork);
                break;
              }
            case HostPortal:
              popHostContainer(interruptedWork);
              break;
            case SuspenseComponent:
              popSuspenseContext(interruptedWork);
              break;
            case SuspenseListComponent:
              popSuspenseContext(interruptedWork);
              break;
            case ContextProvider:
              popProvider(interruptedWork);
              break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(interruptedWork);
              break;
          }
        }
        function createCapturedValue(value, source) {
          return {
            value,
            source,
            stack: getStackByFiberInDevAndProd(source)
          };
        }
        function showErrorDialog(boundary, errorInfo) {
          return true;
        }
        function logCapturedError(boundary, errorInfo) {
          try {
            var logError = showErrorDialog(boundary, errorInfo);
            if (logError === false) {
              return;
            }
            var error2 = errorInfo.value;
            if (true) {
              var source = errorInfo.source;
              var stack = errorInfo.stack;
              var componentStack = stack !== null ? stack : "";
              if (error2 != null && error2._suppressLogging) {
                if (boundary.tag === ClassComponent) {
                  return;
                }
                console["error"](error2);
              }
              var componentName = source ? getComponentName(source.type) : null;
              var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
              var errorBoundaryMessage;
              var errorBoundaryName = getComponentName(boundary.type);
              if (errorBoundaryName) {
                errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
              } else {
                errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
              }
              var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
              console["error"](combinedMessage);
            } else {
              console["error"](error2);
            }
          } catch (e) {
            setTimeout(function () {
              throw e;
            });
          }
        }
        var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
        function createRootErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          update.payload = {
            element: null
          };
          var error2 = errorInfo.value;
          update.callback = function () {
            onUncaughtError(error2);
            logCapturedError(fiber, errorInfo);
          };
          return update;
        }
        function createClassErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
          if (typeof getDerivedStateFromError === "function") {
            var error$1 = errorInfo.value;
            update.payload = function () {
              logCapturedError(fiber, errorInfo);
              return getDerivedStateFromError(error$1);
            };
          }
          var inst = fiber.stateNode;
          if (inst !== null && typeof inst.componentDidCatch === "function") {
            update.callback = function callback() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              if (typeof getDerivedStateFromError !== "function") {
                markLegacyErrorBoundaryAsFailed(this);
                logCapturedError(fiber, errorInfo);
              }
              var error$12 = errorInfo.value;
              var stack = errorInfo.stack;
              this.componentDidCatch(error$12, {
                componentStack: stack !== null ? stack : ""
              });
              {
                if (typeof getDerivedStateFromError !== "function") {
                  if (!includesSomeLane(fiber.lanes, SyncLane)) {
                    error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || "Unknown");
                  }
                }
              }
            };
          } else {
            update.callback = function () {
              markFailedErrorBoundaryForHotReloading(fiber);
            };
          }
          return update;
        }
        function attachPingListener(root2, wakeable, lanes) {
          var pingCache = root2.pingCache;
          var threadIDs;
          if (pingCache === null) {
            pingCache = root2.pingCache = new PossiblyWeakMap$1();
            threadIDs = new Set();
            pingCache.set(wakeable, threadIDs);
          } else {
            threadIDs = pingCache.get(wakeable);
            if (threadIDs === void 0) {
              threadIDs = new Set();
              pingCache.set(wakeable, threadIDs);
            }
          }
          if (!threadIDs.has(lanes)) {
            threadIDs.add(lanes);
            var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
            wakeable.then(ping, ping);
          }
        }
        function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
          sourceFiber.flags |= Incomplete;
          sourceFiber.firstEffect = sourceFiber.lastEffect = null;
          if (value !== null && typeof value === "object" && typeof value.then === "function") {
            var wakeable = value;
            if ((sourceFiber.mode & BlockingMode) === NoMode) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
            var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext);
            var _workInProgress = returnFiber;
            do {
              if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                var wakeables = _workInProgress.updateQueue;
                if (wakeables === null) {
                  var updateQueue = new Set();
                  updateQueue.add(wakeable);
                  _workInProgress.updateQueue = updateQueue;
                } else {
                  wakeables.add(wakeable);
                }
                if ((_workInProgress.mode & BlockingMode) === NoMode) {
                  _workInProgress.flags |= DidCapture;
                  sourceFiber.flags |= ForceUpdateForLegacySuspense;
                  sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                  if (sourceFiber.tag === ClassComponent) {
                    var currentSourceFiber = sourceFiber.alternate;
                    if (currentSourceFiber === null) {
                      sourceFiber.tag = IncompleteClassComponent;
                    } else {
                      var update = createUpdate(NoTimestamp, SyncLane);
                      update.tag = ForceUpdate;
                      enqueueUpdate(sourceFiber, update);
                    }
                  }
                  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
                  return;
                }
                attachPingListener(root2, wakeable, rootRenderLanes);
                _workInProgress.flags |= ShouldCapture;
                _workInProgress.lanes = rootRenderLanes;
                return;
              }
              _workInProgress = _workInProgress.return;
            } while (_workInProgress !== null);
            value = new Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");
          }
          renderDidError();
          value = createCapturedValue(value, sourceFiber);
          var workInProgress2 = returnFiber;
          do {
            switch (workInProgress2.tag) {
              case HostRoot:
                {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var _update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, _update);
                  return;
                }
              case ClassComponent:
                var errorInfo = value;
                var ctor = workInProgress2.type;
                var instance = workInProgress2.stateNode;
                if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                  workInProgress2.flags |= ShouldCapture;
                  var _lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                  var _update2 = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                  enqueueCapturedUpdate(workInProgress2, _update2);
                  return;
                }
                break;
            }
            workInProgress2 = workInProgress2.return;
          } while (workInProgress2 !== null);
        }
        var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
        {
          didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
        }
        var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
        var callComponentWillUnmountWithTimer = function (current2, instance) {
          instance.props = current2.memoizedProps;
          instance.state = current2.memoizedState;
          {
            instance.componentWillUnmount();
          }
        };
        function safelyCallComponentWillUnmount(current2, instance) {
          {
            invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current2, instance);
            if (hasCaughtError()) {
              var unmountError = clearCaughtError();
              captureCommitPhaseError(current2, unmountError);
            }
          }
        }
        function safelyDetachRef(current2) {
          var ref = current2.ref;
          if (ref !== null) {
            if (typeof ref === "function") {
              {
                invokeGuardedCallback(null, ref, null, null);
                if (hasCaughtError()) {
                  var refError = clearCaughtError();
                  captureCommitPhaseError(current2, refError);
                }
              }
            } else {
              ref.current = null;
            }
          }
        }
        function safelyCallDestroy(current2, destroy) {
          {
            invokeGuardedCallback(null, destroy, null);
            if (hasCaughtError()) {
              var error2 = clearCaughtError();
              captureCommitPhaseError(current2, error2);
            }
          }
        }
        function commitBeforeMutationLifeCycles(current2, finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block:
              {
                return;
              }
            case ClassComponent:
              {
                if (finishedWork.flags & Snapshot) {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                }
                return;
              }
            case HostRoot:
              {
                {
                  if (finishedWork.flags & Snapshot) {
                    var root2 = finishedWork.stateNode;
                    clearContainer(root2.containerInfo);
                  }
                }
                return;
              }
            case HostComponent:
            case HostText:
            case HostPortal:
            case IncompleteClassComponent:
              return;
          }
          {
            {
              throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function commitHookEffectListUnmount(tag, finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & tag) === tag) {
                var destroy = effect.destroy;
                effect.destroy = void 0;
                if (destroy !== void 0) {
                  destroy();
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitHookEffectListMount(tag, finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & tag) === tag) {
                var create = effect.create;
                effect.destroy = create();
                {
                  var destroy = effect.destroy;
                  if (destroy !== void 0 && typeof destroy !== "function") {
                    var addendum = void 0;
                    if (destroy === null) {
                      addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                    } else if (typeof destroy.then === "function") {
                      addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                    } else {
                      addendum = " You returned: " + destroy;
                    }
                    error("An effect function must not return anything besides a function, which is used for clean-up.%s", addendum);
                  }
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function schedulePassiveEffects(finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              var _effect = effect, next = _effect.next, tag = _effect.tag;
              if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
                enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
                enqueuePendingPassiveHookEffectMount(finishedWork, effect);
              }
              effect = next;
            } while (effect !== firstEffect);
          }
        }
        function commitLifeCycles(finishedRoot, current2, finishedWork, committedLanes) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block:
              {
                {
                  commitHookEffectListMount(Layout | HasEffect, finishedWork);
                }
                schedulePassiveEffects(finishedWork);
                return;
              }
            case ClassComponent:
              {
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                  if (current2 === null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    {
                      instance.componentDidMount();
                    }
                  } else {
                    var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                    var prevState = current2.memoizedState;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    {
                      instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                    }
                  }
                }
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                return;
              }
            case HostRoot:
              {
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                  var _instance = null;
                  if (finishedWork.child !== null) {
                    switch (finishedWork.child.tag) {
                      case HostComponent:
                        _instance = getPublicInstance(finishedWork.child.stateNode);
                        break;
                      case ClassComponent:
                        _instance = finishedWork.child.stateNode;
                        break;
                    }
                  }
                  commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                return;
              }
            case HostComponent:
              {
                var _instance2 = finishedWork.stateNode;
                if (current2 === null && finishedWork.flags & Update) {
                  var type = finishedWork.type;
                  var props = finishedWork.memoizedProps;
                  commitMount(_instance2, type, props);
                }
                return;
              }
            case HostText:
              {
                return;
              }
            case HostPortal:
              {
                return;
              }
            case Profiler:
              {
                {
                  var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                  var effectDuration = finishedWork.stateNode.effectDuration;
                  var commitTime2 = getCommitTime();
                  if (typeof onRender === "function") {
                    {
                      onRender(finishedWork.memoizedProps.id, current2 === null ? "mount" : "update", finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2, finishedRoot.memoizedInteractions);
                    }
                  }
                }
                return;
              }
            case SuspenseComponent:
              {
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                return;
              }
            case SuspenseListComponent:
            case IncompleteClassComponent:
            case FundamentalComponent:
            case ScopeComponent:
            case OffscreenComponent:
            case LegacyHiddenComponent:
              return;
          }
          {
            {
              throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function hideOrUnhideAllChildren(finishedWork, isHidden) {
          {
            var node = finishedWork;
            while (true) {
              if (node.tag === HostComponent) {
                var instance = node.stateNode;
                if (isHidden) {
                  hideInstance(instance);
                } else {
                  unhideInstance(node.stateNode, node.memoizedProps);
                }
              } else if (node.tag === HostText) {
                var _instance3 = node.stateNode;
                if (isHidden) {
                  hideTextInstance(_instance3);
                } else {
                  unhideTextInstance(_instance3, node.memoizedProps);
                }
              } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ; else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === finishedWork) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
        }
        function commitAttachRef(finishedWork) {
          var ref = finishedWork.ref;
          if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch (finishedWork.tag) {
              case HostComponent:
                instanceToUse = getPublicInstance(instance);
                break;
              default:
                instanceToUse = instance;
            }
            if (typeof ref === "function") {
              ref(instanceToUse);
            } else {
              {
                if (!ref.hasOwnProperty("current")) {
                  error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentName(finishedWork.type));
                }
              }
              ref.current = instanceToUse;
            }
          }
        }
        function commitDetachRef(current2) {
          var currentRef = current2.ref;
          if (currentRef !== null) {
            if (typeof currentRef === "function") {
              currentRef(null);
            } else {
              currentRef.current = null;
            }
          }
        }
        function commitUnmount(finishedRoot, current2, renderPriorityLevel) {
          onCommitUnmount(current2);
          switch (current2.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block:
              {
                var updateQueue = current2.updateQueue;
                if (updateQueue !== null) {
                  var lastEffect = updateQueue.lastEffect;
                  if (lastEffect !== null) {
                    var firstEffect = lastEffect.next;
                    var effect = firstEffect;
                    do {
                      var _effect2 = effect, destroy = _effect2.destroy, tag = _effect2.tag;
                      if (destroy !== void 0) {
                        if ((tag & Passive$1) !== NoFlags$1) {
                          enqueuePendingPassiveHookEffectUnmount(current2, effect);
                        } else {
                          {
                            safelyCallDestroy(current2, destroy);
                          }
                        }
                      }
                      effect = effect.next;
                    } while (effect !== firstEffect);
                  }
                }
                return;
              }
            case ClassComponent:
              {
                safelyDetachRef(current2);
                var instance = current2.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(current2, instance);
                }
                return;
              }
            case HostComponent:
              {
                safelyDetachRef(current2);
                return;
              }
            case HostPortal:
              {
                {
                  unmountHostComponents(finishedRoot, current2);
                }
                return;
              }
            case FundamentalComponent:
              {
                return;
              }
            case DehydratedFragment:
              {
                return;
              }
            case ScopeComponent:
              {
                return;
              }
          }
        }
        function commitNestedUnmounts(finishedRoot, root2, renderPriorityLevel) {
          var node = root2;
          while (true) {
            commitUnmount(finishedRoot, node);
            if (node.child !== null && node.tag !== HostPortal) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === root2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === root2) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function detachFiberMutation(fiber) {
          fiber.alternate = null;
          fiber.child = null;
          fiber.dependencies = null;
          fiber.firstEffect = null;
          fiber.lastEffect = null;
          fiber.memoizedProps = null;
          fiber.memoizedState = null;
          fiber.pendingProps = null;
          fiber.return = null;
          fiber.updateQueue = null;
          {
            fiber._debugOwner = null;
          }
        }
        function getHostParentFiber(fiber) {
          var parent = fiber.return;
          while (parent !== null) {
            if (isHostParent(parent)) {
              return parent;
            }
            parent = parent.return;
          }
          {
            {
              throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function isHostParent(fiber) {
          return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
        }
        function getHostSibling(fiber) {
          var node = fiber;
          siblings: while (true) {
            while (node.sibling === null) {
              if (node.return === null || isHostParent(node.return)) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
            while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
              if (node.flags & Placement) {
                continue siblings;
              }
              if (node.child === null || node.tag === HostPortal) {
                continue siblings;
              } else {
                node.child.return = node;
                node = node.child;
              }
            }
            if (!(node.flags & Placement)) {
              return node.stateNode;
            }
          }
        }
        function commitPlacement(finishedWork) {
          var parentFiber = getHostParentFiber(finishedWork);
          var parent;
          var isContainer;
          var parentStateNode = parentFiber.stateNode;
          switch (parentFiber.tag) {
            case HostComponent:
              parent = parentStateNode;
              isContainer = false;
              break;
            case HostRoot:
              parent = parentStateNode.containerInfo;
              isContainer = true;
              break;
            case HostPortal:
              parent = parentStateNode.containerInfo;
              isContainer = true;
              break;
            case FundamentalComponent:
            default:
              {
                {
                  throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
          }
          if (parentFiber.flags & ContentReset) {
            resetTextContent(parent);
            parentFiber.flags &= ~ContentReset;
          }
          var before = getHostSibling(finishedWork);
          if (isContainer) {
            insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
          } else {
            insertOrAppendPlacementNode(finishedWork, before, parent);
          }
        }
        function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;
            if (before) {
              insertInContainerBefore(parent, stateNode, before);
            } else {
              appendChildToContainer(parent, stateNode);
            }
          } else if (tag === HostPortal) ; else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNodeIntoContainer(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        function insertOrAppendPlacementNode(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;
            if (before) {
              insertBefore(parent, stateNode, before);
            } else {
              appendChild(parent, stateNode);
            }
          } else if (tag === HostPortal) ; else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNode(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNode(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        function unmountHostComponents(finishedRoot, current2, renderPriorityLevel) {
          var node = current2;
          var currentParentIsValid = false;
          var currentParent;
          var currentParentIsContainer;
          while (true) {
            if (!currentParentIsValid) {
              var parent = node.return;
              findParent: while (true) {
                if (!(parent !== null)) {
                  {
                    throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var parentStateNode = parent.stateNode;
                switch (parent.tag) {
                  case HostComponent:
                    currentParent = parentStateNode;
                    currentParentIsContainer = false;
                    break findParent;
                  case HostRoot:
                    currentParent = parentStateNode.containerInfo;
                    currentParentIsContainer = true;
                    break findParent;
                  case HostPortal:
                    currentParent = parentStateNode.containerInfo;
                    currentParentIsContainer = true;
                    break findParent;
                }
                parent = parent.return;
              }
              currentParentIsValid = true;
            }
            if (node.tag === HostComponent || node.tag === HostText) {
              commitNestedUnmounts(finishedRoot, node);
              if (currentParentIsContainer) {
                removeChildFromContainer(currentParent, node.stateNode);
              } else {
                removeChild(currentParent, node.stateNode);
              }
            } else if (node.tag === HostPortal) {
              if (node.child !== null) {
                currentParent = node.stateNode.containerInfo;
                currentParentIsContainer = true;
                node.child.return = node;
                node = node.child;
                continue;
              }
            } else {
              commitUnmount(finishedRoot, node);
              if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
            }
            if (node === current2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === current2) {
                return;
              }
              node = node.return;
              if (node.tag === HostPortal) {
                currentParentIsValid = false;
              }
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function commitDeletion(finishedRoot, current2, renderPriorityLevel) {
          {
            unmountHostComponents(finishedRoot, current2);
          }
          var alternate = current2.alternate;
          detachFiberMutation(current2);
          if (alternate !== null) {
            detachFiberMutation(alternate);
          }
        }
        function commitWork(current2, finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block:
              {
                {
                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
                }
                return;
              }
            case ClassComponent:
              {
                return;
              }
            case HostComponent:
              {
                var instance = finishedWork.stateNode;
                if (instance != null) {
                  var newProps = finishedWork.memoizedProps;
                  var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                  var type = finishedWork.type;
                  var updatePayload = finishedWork.updateQueue;
                  finishedWork.updateQueue = null;
                  if (updatePayload !== null) {
                    commitUpdate(instance, updatePayload, type, oldProps, newProps);
                  }
                }
                return;
              }
            case HostText:
              {
                if (!(finishedWork.stateNode !== null)) {
                  {
                    throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps;
                var oldText = current2 !== null ? current2.memoizedProps : newText;
                commitTextUpdate(textInstance, oldText, newText);
                return;
              }
            case HostRoot:
              {
                {
                  var _root = finishedWork.stateNode;
                  if (_root.hydrate) {
                    _root.hydrate = false;
                    commitHydratedContainer(_root.containerInfo);
                  }
                }
                return;
              }
            case Profiler:
              {
                return;
              }
            case SuspenseComponent:
              {
                commitSuspenseComponent(finishedWork);
                attachSuspenseRetryListeners(finishedWork);
                return;
              }
            case SuspenseListComponent:
              {
                attachSuspenseRetryListeners(finishedWork);
                return;
              }
            case IncompleteClassComponent:
              {
                return;
              }
            case FundamentalComponent:
              {
                break;
              }
            case ScopeComponent:
              {
                break;
              }
            case OffscreenComponent:
            case LegacyHiddenComponent:
              {
                var newState = finishedWork.memoizedState;
                var isHidden = newState !== null;
                hideOrUnhideAllChildren(finishedWork, isHidden);
                return;
              }
          }
          {
            {
              throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function commitSuspenseComponent(finishedWork) {
          var newState = finishedWork.memoizedState;
          if (newState !== null) {
            markCommitTimeOfFallback();
            {
              var primaryChildParent = finishedWork.child;
              hideOrUnhideAllChildren(primaryChildParent, true);
            }
          }
        }
        function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
          var newState = finishedWork.memoizedState;
          if (newState === null) {
            var current2 = finishedWork.alternate;
            if (current2 !== null) {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var suspenseInstance = prevState.dehydrated;
                if (suspenseInstance !== null) {
                  commitHydratedSuspenseInstance(suspenseInstance);
                }
              }
            }
          }
        }
        function attachSuspenseRetryListeners(finishedWork) {
          var wakeables = finishedWork.updateQueue;
          if (wakeables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) {
              retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            }
            wakeables.forEach(function (wakeable) {
              var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
              if (!retryCache.has(wakeable)) {
                {
                  if (wakeable.__reactDoNotTraceInteractions !== true) {
                    retry = tracing.unstable_wrap(retry);
                  }
                }
                retryCache.add(wakeable);
                wakeable.then(retry, retry);
              }
            });
          }
        }
        function isSuspenseBoundaryBeingHidden(current2, finishedWork) {
          if (current2 !== null) {
            var oldState = current2.memoizedState;
            if (oldState === null || oldState.dehydrated !== null) {
              var newState = finishedWork.memoizedState;
              return newState !== null && newState.dehydrated === null;
            }
          }
          return false;
        }
        function commitResetTextContent(current2) {
          resetTextContent(current2.stateNode);
        }
        var COMPONENT_TYPE = 0;
        var HAS_PSEUDO_CLASS_TYPE = 1;
        var ROLE_TYPE = 2;
        var TEST_NAME_TYPE = 3;
        var TEXT_TYPE = 4;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor$1 = Symbol.for;
          COMPONENT_TYPE = symbolFor$1("selector.component");
          HAS_PSEUDO_CLASS_TYPE = symbolFor$1("selector.has_pseudo_class");
          ROLE_TYPE = symbolFor$1("selector.role");
          TEST_NAME_TYPE = symbolFor$1("selector.test_id");
          TEXT_TYPE = symbolFor$1("selector.text");
        }
        var commitHooks = [];
        function onCommitRoot$1() {
          {
            commitHooks.forEach(function (commitHook) {
              return commitHook();
            });
          }
        }
        var ceil = Math.ceil;
        var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
        var NoContext = 0;
        var BatchedContext = 1;
        var EventContext = 2;
        var DiscreteEventContext = 4;
        var LegacyUnbatchedContext = 8;
        var RenderContext = 16;
        var CommitContext = 32;
        var RetryAfterError = 64;
        var RootIncomplete = 0;
        var RootFatalErrored = 1;
        var RootErrored = 2;
        var RootSuspended = 3;
        var RootSuspendedWithDelay = 4;
        var RootCompleted = 5;
        var executionContext = NoContext;
        var workInProgressRoot = null;
        var workInProgress = null;
        var workInProgressRootRenderLanes = NoLanes;
        var subtreeRenderLanes = NoLanes;
        var subtreeRenderLanesCursor = createCursor(NoLanes);
        var workInProgressRootExitStatus = RootIncomplete;
        var workInProgressRootFatalError = null;
        var workInProgressRootIncludedLanes = NoLanes;
        var workInProgressRootSkippedLanes = NoLanes;
        var workInProgressRootUpdatedLanes = NoLanes;
        var workInProgressRootPingedLanes = NoLanes;
        var mostRecentlyUpdatedRoot = null;
        var globalMostRecentFallbackTime = 0;
        var FALLBACK_THROTTLE_MS = 500;
        var workInProgressRootRenderTargetTime = Infinity;
        var RENDER_TIMEOUT_MS = 500;
        function resetRenderTimer() {
          workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
        }
        function getRenderTargetTime() {
          return workInProgressRootRenderTargetTime;
        }
        var nextEffect = null;
        var hasUncaughtError = false;
        var firstUncaughtError = null;
        var legacyErrorBoundariesThatAlreadyFailed = null;
        var rootDoesHavePassiveEffects = false;
        var rootWithPendingPassiveEffects = null;
        var pendingPassiveEffectsRenderPriority = NoPriority$1;
        var pendingPassiveEffectsLanes = NoLanes;
        var pendingPassiveHookEffectsMount = [];
        var pendingPassiveHookEffectsUnmount = [];
        var rootsWithPendingDiscreteUpdates = null;
        var NESTED_UPDATE_LIMIT = 50;
        var nestedUpdateCount = 0;
        var rootWithNestedUpdates = null;
        var NESTED_PASSIVE_UPDATE_LIMIT = 50;
        var nestedPassiveUpdateCount = 0;
        var spawnedWorkDuringRender = null;
        var currentEventTime = NoTimestamp;
        var currentEventWipLanes = NoLanes;
        var currentEventPendingLanes = NoLanes;
        var isFlushingPassiveEffects = false;
        var focusedInstanceHandle = null;
        var shouldFireAfterActiveInstanceBlur = false;
        function getWorkInProgressRoot() {
          return workInProgressRoot;
        }
        function requestEventTime() {
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            return now();
          }
          if (currentEventTime !== NoTimestamp) {
            return currentEventTime;
          }
          currentEventTime = now();
          return currentEventTime;
        }
        function requestUpdateLane(fiber) {
          var mode = fiber.mode;
          if ((mode & BlockingMode) === NoMode) {
            return SyncLane;
          } else if ((mode & ConcurrentMode) === NoMode) {
            return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
          }
          if (currentEventWipLanes === NoLanes) {
            currentEventWipLanes = workInProgressRootIncludedLanes;
          }
          var isTransition = requestCurrentTransition() !== NoTransition;
          if (isTransition) {
            if (currentEventPendingLanes !== NoLanes) {
              currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
            }
            return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
          }
          var schedulerPriority = getCurrentPriorityLevel();
          var lane;
          if ((executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$2) {
            lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
          } else {
            var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);
            lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
          }
          return lane;
        }
        function requestRetryLane(fiber) {
          var mode = fiber.mode;
          if ((mode & BlockingMode) === NoMode) {
            return SyncLane;
          } else if ((mode & ConcurrentMode) === NoMode) {
            return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
          }
          if (currentEventWipLanes === NoLanes) {
            currentEventWipLanes = workInProgressRootIncludedLanes;
          }
          return findRetryLane(currentEventWipLanes);
        }
        function scheduleUpdateOnFiber(fiber, lane, eventTime) {
          checkForNestedUpdates();
          warnAboutRenderPhaseUpdatesInDEV(fiber);
          var root2 = markUpdateLaneFromFiberToRoot(fiber, lane);
          if (root2 === null) {
            warnAboutUpdateOnUnmountedFiberInDEV(fiber);
            return null;
          }
          markRootUpdated(root2, lane, eventTime);
          if (root2 === workInProgressRoot) {
            {
              workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
            }
            if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
              markRootSuspended$1(root2, workInProgressRootRenderLanes);
            }
          }
          var priorityLevel = getCurrentPriorityLevel();
          if (lane === SyncLane) {
            if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              schedulePendingInteractions(root2, lane);
              performSyncWorkOnRoot(root2);
            } else {
              ensureRootIsScheduled(root2, eventTime);
              schedulePendingInteractions(root2, lane);
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          } else {
            if ((executionContext & DiscreteEventContext) !== NoContext && (priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1)) {
              if (rootsWithPendingDiscreteUpdates === null) {
                rootsWithPendingDiscreteUpdates = new Set([root2]);
              } else {
                rootsWithPendingDiscreteUpdates.add(root2);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
            schedulePendingInteractions(root2, lane);
          }
          mostRecentlyUpdatedRoot = root2;
        }
        function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
          var alternate = sourceFiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, lane);
          }
          {
            if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
              warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            }
          }
          var node = sourceFiber;
          var parent = sourceFiber.return;
          while (parent !== null) {
            parent.childLanes = mergeLanes(parent.childLanes, lane);
            alternate = parent.alternate;
            if (alternate !== null) {
              alternate.childLanes = mergeLanes(alternate.childLanes, lane);
            } else {
              {
                if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                  warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                }
              }
            }
            node = parent;
            parent = parent.return;
          }
          if (node.tag === HostRoot) {
            var root2 = node.stateNode;
            return root2;
          } else {
            return null;
          }
        }
        function ensureRootIsScheduled(root2, currentTime) {
          var existingCallbackNode = root2.callbackNode;
          markStarvedLanesAsExpired(root2, currentTime);
          var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          var newCallbackPriority = returnNextLanesPriority();
          if (nextLanes === NoLanes) {
            if (existingCallbackNode !== null) {
              cancelCallback(existingCallbackNode);
              root2.callbackNode = null;
              root2.callbackPriority = NoLanePriority;
            }
            return;
          }
          if (existingCallbackNode !== null) {
            var existingCallbackPriority = root2.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority) {
              return;
            }
            cancelCallback(existingCallbackNode);
          }
          var newCallbackNode;
          if (newCallbackPriority === SyncLanePriority) {
            newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
          } else if (newCallbackPriority === SyncBatchedLanePriority) {
            newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root2));
          } else {
            var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
            newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
          }
          root2.callbackPriority = newCallbackPriority;
          root2.callbackNode = newCallbackNode;
        }
        function performConcurrentWorkOnRoot(root2) {
          currentEventTime = NoTimestamp;
          currentEventWipLanes = NoLanes;
          currentEventPendingLanes = NoLanes;
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Should not already be working.");
            }
          }
          var originalCallbackNode = root2.callbackNode;
          var didFlushPassiveEffects = flushPassiveEffects();
          if (didFlushPassiveEffects) {
            if (root2.callbackNode !== originalCallbackNode) {
              return null;
            }
          }
          var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          if (lanes === NoLanes) {
            return null;
          }
          var exitStatus = renderRootConcurrent(root2, lanes);
          if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
            prepareFreshStack(root2, NoLanes);
          } else if (exitStatus !== RootIncomplete) {
            if (exitStatus === RootErrored) {
              executionContext |= RetryAfterError;
              if (root2.hydrate) {
                root2.hydrate = false;
                clearContainer(root2.containerInfo);
              }
              lanes = getLanesToRetrySynchronouslyOnError(root2);
              if (lanes !== NoLanes) {
                exitStatus = renderRootSync(root2, lanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now());
              throw fatalError;
            }
            var finishedWork = root2.current.alternate;
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            finishConcurrentRender(root2, exitStatus, lanes);
          }
          ensureRootIsScheduled(root2, now());
          if (root2.callbackNode === originalCallbackNode) {
            return performConcurrentWorkOnRoot.bind(null, root2);
          }
          return null;
        }
        function finishConcurrentRender(root2, exitStatus, lanes) {
          switch (exitStatus) {
            case RootIncomplete:
            case RootFatalErrored:
              {
                {
                  {
                    throw Error("Root did not complete. This is a bug in React.");
                  }
                }
              }
            case RootErrored:
              {
                commitRoot(root2);
                break;
              }
            case RootSuspended:
              {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root2, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root2.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root2, suspendedLanes);
                      break;
                    }
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2);
                break;
              }
            case RootSuspendedWithDelay:
              {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2);
                break;
              }
            case RootCompleted:
              {
                commitRoot(root2);
                break;
              }
            default:
              {
                {
                  {
                    throw Error("Unknown root exit status.");
                  }
                }
              }
          }
        }
        function markRootSuspended$1(root2, suspendedLanes) {
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
          markRootSuspended(root2, suspendedLanes);
        }
        function performSyncWorkOnRoot(root2) {
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Should not already be working.");
            }
          }
          flushPassiveEffects();
          var lanes;
          var exitStatus;
          if (root2 === workInProgressRoot && includesSomeLane(root2.expiredLanes, workInProgressRootRenderLanes)) {
            lanes = workInProgressRootRenderLanes;
            exitStatus = renderRootSync(root2, lanes);
            if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
              lanes = getNextLanes(root2, lanes);
              exitStatus = renderRootSync(root2, lanes);
            }
          } else {
            lanes = getNextLanes(root2, NoLanes);
            exitStatus = renderRootSync(root2, lanes);
          }
          if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
            executionContext |= RetryAfterError;
            if (root2.hydrate) {
              root2.hydrate = false;
              clearContainer(root2.containerInfo);
            }
            lanes = getLanesToRetrySynchronouslyOnError(root2);
            if (lanes !== NoLanes) {
              exitStatus = renderRootSync(root2, lanes);
            }
          }
          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root2, NoLanes);
            markRootSuspended$1(root2, lanes);
            ensureRootIsScheduled(root2, now());
            throw fatalError;
          }
          var finishedWork = root2.current.alternate;
          root2.finishedWork = finishedWork;
          root2.finishedLanes = lanes;
          commitRoot(root2);
          ensureRootIsScheduled(root2, now());
          return null;
        }
        function flushDiscreteUpdates() {
          if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                error("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.");
              }
            }
            return;
          }
          flushPendingDiscreteUpdates();
          flushPassiveEffects();
        }
        function flushPendingDiscreteUpdates() {
          if (rootsWithPendingDiscreteUpdates !== null) {
            var roots = rootsWithPendingDiscreteUpdates;
            rootsWithPendingDiscreteUpdates = null;
            roots.forEach(function (root2) {
              markDiscreteUpdatesExpired(root2);
              ensureRootIsScheduled(root2, now());
            });
          }
          flushSyncCallbackQueue();
        }
        function batchedUpdates$1(fn, a) {
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          try {
            return fn(a);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              resetRenderTimer();
              flushSyncCallbackQueue();
            }
          }
        }
        function batchedEventUpdates$1(fn, a) {
          var prevExecutionContext = executionContext;
          executionContext |= EventContext;
          try {
            return fn(a);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              resetRenderTimer();
              flushSyncCallbackQueue();
            }
          }
        }
        function discreteUpdates$1(fn, a, b, c, d) {
          var prevExecutionContext = executionContext;
          executionContext |= DiscreteEventContext;
          {
            try {
              return runWithPriority$1(UserBlockingPriority$2, fn.bind(null, a, b, c, d));
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
        }
        function unbatchedUpdates(fn, a) {
          var prevExecutionContext = executionContext;
          executionContext &= ~BatchedContext;
          executionContext |= LegacyUnbatchedContext;
          try {
            return fn(a);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              resetRenderTimer();
              flushSyncCallbackQueue();
            }
          }
        }
        function flushSync(fn, a) {
          var prevExecutionContext = executionContext;
          if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
            {
              error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
            }
            return fn(a);
          }
          executionContext |= BatchedContext;
          {
            try {
              if (fn) {
                return runWithPriority$1(ImmediatePriority$1, fn.bind(null, a));
              } else {
                return void 0;
              }
            } finally {
              executionContext = prevExecutionContext;
              flushSyncCallbackQueue();
            }
          }
        }
        function pushRenderLanes(fiber, lanes) {
          push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
          subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
          workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
        }
        function popRenderLanes(fiber) {
          subtreeRenderLanes = subtreeRenderLanesCursor.current;
          pop(subtreeRenderLanesCursor, fiber);
        }
        function prepareFreshStack(root2, lanes) {
          root2.finishedWork = null;
          root2.finishedLanes = NoLanes;
          var timeoutHandle = root2.timeoutHandle;
          if (timeoutHandle !== noTimeout) {
            root2.timeoutHandle = noTimeout;
            cancelTimeout(timeoutHandle);
          }
          if (workInProgress !== null) {
            var interruptedWork = workInProgress.return;
            while (interruptedWork !== null) {
              unwindInterruptedWork(interruptedWork);
              interruptedWork = interruptedWork.return;
            }
          }
          workInProgressRoot = root2;
          workInProgress = createWorkInProgress(root2.current, null);
          workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
          workInProgressRootExitStatus = RootIncomplete;
          workInProgressRootFatalError = null;
          workInProgressRootSkippedLanes = NoLanes;
          workInProgressRootUpdatedLanes = NoLanes;
          workInProgressRootPingedLanes = NoLanes;
          {
            spawnedWorkDuringRender = null;
          }
          {
            ReactStrictModeWarnings.discardPendingWarnings();
          }
        }
        function handleError(root2, thrownValue) {
          do {
            var erroredWork = workInProgress;
            try {
              resetContextDependencies();
              resetHooksAfterThrow();
              resetCurrentFiber();
              ReactCurrentOwner$2.current = null;
              if (erroredWork === null || erroredWork.return === null) {
                workInProgressRootExitStatus = RootFatalErrored;
                workInProgressRootFatalError = thrownValue;
                workInProgress = null;
                return;
              }
              if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
              }
              throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
              completeUnitOfWork(erroredWork);
            } catch (yetAnotherThrownValue) {
              thrownValue = yetAnotherThrownValue;
              if (workInProgress === erroredWork && erroredWork !== null) {
                erroredWork = erroredWork.return;
                workInProgress = erroredWork;
              } else {
                erroredWork = workInProgress;
              }
              continue;
            }
            return;
          } while (true);
        }
        function pushDispatcher() {
          var prevDispatcher = ReactCurrentDispatcher$2.current;
          ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
          if (prevDispatcher === null) {
            return ContextOnlyDispatcher;
          } else {
            return prevDispatcher;
          }
        }
        function popDispatcher(prevDispatcher) {
          ReactCurrentDispatcher$2.current = prevDispatcher;
        }
        function pushInteractions(root2) {
          {
            var prevInteractions = tracing.__interactionsRef.current;
            tracing.__interactionsRef.current = root2.memoizedInteractions;
            return prevInteractions;
          }
        }
        function popInteractions(prevInteractions) {
          {
            tracing.__interactionsRef.current = prevInteractions;
          }
        }
        function markCommitTimeOfFallback() {
          globalMostRecentFallbackTime = now();
        }
        function markSkippedUpdateLanes(lane) {
          workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
        }
        function renderDidSuspend() {
          if (workInProgressRootExitStatus === RootIncomplete) {
            workInProgressRootExitStatus = RootSuspended;
          }
        }
        function renderDidSuspendDelayIfPossible() {
          if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
            workInProgressRootExitStatus = RootSuspendedWithDelay;
          }
          if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) {
            markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
          }
        }
        function renderDidError() {
          if (workInProgressRootExitStatus !== RootCompleted) {
            workInProgressRootExitStatus = RootErrored;
          }
        }
        function renderHasNotSuspendedYet() {
          return workInProgressRootExitStatus === RootIncomplete;
        }
        function renderRootSync(root2, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
            prepareFreshStack(root2, lanes);
            startWorkOnPendingInteractions(root2, lanes);
          }
          var prevInteractions = pushInteractions(root2);
          do {
            try {
              workLoopSync();
              break;
            } catch (thrownValue) {
              handleError(root2, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          {
            popInteractions(prevInteractions);
          }
          executionContext = prevExecutionContext;
          popDispatcher(prevDispatcher);
          if (workInProgress !== null) {
            {
              {
                throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          workInProgressRoot = null;
          workInProgressRootRenderLanes = NoLanes;
          return workInProgressRootExitStatus;
        }
        function workLoopSync() {
          while (workInProgress !== null) {
            performUnitOfWork(workInProgress);
          }
        }
        function renderRootConcurrent(root2, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
            resetRenderTimer();
            prepareFreshStack(root2, lanes);
            startWorkOnPendingInteractions(root2, lanes);
          }
          var prevInteractions = pushInteractions(root2);
          do {
            try {
              workLoopConcurrent();
              break;
            } catch (thrownValue) {
              handleError(root2, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          {
            popInteractions(prevInteractions);
          }
          popDispatcher(prevDispatcher);
          executionContext = prevExecutionContext;
          if (workInProgress !== null) {
            return RootIncomplete;
          } else {
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
        }
        function workLoopConcurrent() {
          while (workInProgress !== null && !shouldYield()) {
            performUnitOfWork(workInProgress);
          }
        }
        function performUnitOfWork(unitOfWork) {
          var current2 = unitOfWork.alternate;
          setCurrentFiber(unitOfWork);
          var next;
          if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
          } else {
            next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
          }
          resetCurrentFiber();
          unitOfWork.memoizedProps = unitOfWork.pendingProps;
          if (next === null) {
            completeUnitOfWork(unitOfWork);
          } else {
            workInProgress = next;
          }
          ReactCurrentOwner$2.current = null;
        }
        function completeUnitOfWork(unitOfWork) {
          var completedWork = unitOfWork;
          do {
            var current2 = completedWork.alternate;
            var returnFiber = completedWork.return;
            if ((completedWork.flags & Incomplete) === NoFlags) {
              setCurrentFiber(completedWork);
              var next = void 0;
              if ((completedWork.mode & ProfileMode) === NoMode) {
                next = completeWork(current2, completedWork, subtreeRenderLanes);
              } else {
                startProfilerTimer(completedWork);
                next = completeWork(current2, completedWork, subtreeRenderLanes);
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
              }
              resetCurrentFiber();
              if (next !== null) {
                workInProgress = next;
                return;
              }
              resetChildLanes(completedWork);
              if (returnFiber !== null && (returnFiber.flags & Incomplete) === NoFlags) {
                if (returnFiber.firstEffect === null) {
                  returnFiber.firstEffect = completedWork.firstEffect;
                }
                if (completedWork.lastEffect !== null) {
                  if (returnFiber.lastEffect !== null) {
                    returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
                  }
                  returnFiber.lastEffect = completedWork.lastEffect;
                }
                var flags = completedWork.flags;
                if (flags > PerformedWork) {
                  if (returnFiber.lastEffect !== null) {
                    returnFiber.lastEffect.nextEffect = completedWork;
                  } else {
                    returnFiber.firstEffect = completedWork;
                  }
                  returnFiber.lastEffect = completedWork;
                }
              }
            } else {
              var _next = unwindWork(completedWork);
              if (_next !== null) {
                _next.flags &= HostEffectMask;
                workInProgress = _next;
                return;
              }
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                var actualDuration = completedWork.actualDuration;
                var child = completedWork.child;
                while (child !== null) {
                  actualDuration += child.actualDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
              }
              if (returnFiber !== null) {
                returnFiber.firstEffect = returnFiber.lastEffect = null;
                returnFiber.flags |= Incomplete;
              }
            }
            var siblingFiber = completedWork.sibling;
            if (siblingFiber !== null) {
              workInProgress = siblingFiber;
              return;
            }
            completedWork = returnFiber;
            workInProgress = completedWork;
          } while (completedWork !== null);
          if (workInProgressRootExitStatus === RootIncomplete) {
            workInProgressRootExitStatus = RootCompleted;
          }
        }
        function resetChildLanes(completedWork) {
          if ((completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) {
            return;
          }
          var newChildLanes = NoLanes;
          if ((completedWork.mode & ProfileMode) !== NoMode) {
            var actualDuration = completedWork.actualDuration;
            var treeBaseDuration = completedWork.selfBaseDuration;
            var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
            var child = completedWork.child;
            while (child !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
              if (shouldBubbleActualDurations) {
                actualDuration += child.actualDuration;
              }
              treeBaseDuration += child.treeBaseDuration;
              child = child.sibling;
            }
            var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;
            if (isTimedOutSuspense) {
              var primaryChildFragment = completedWork.child;
              if (primaryChildFragment !== null) {
                treeBaseDuration -= primaryChildFragment.treeBaseDuration;
              }
            }
            completedWork.actualDuration = actualDuration;
            completedWork.treeBaseDuration = treeBaseDuration;
          } else {
            var _child = completedWork.child;
            while (_child !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
              _child = _child.sibling;
            }
          }
          completedWork.childLanes = newChildLanes;
        }
        function commitRoot(root2) {
          var renderPriorityLevel = getCurrentPriorityLevel();
          runWithPriority$1(ImmediatePriority$1, commitRootImpl.bind(null, root2, renderPriorityLevel));
          return null;
        }
        function commitRootImpl(root2, renderPriorityLevel) {
          do {
            flushPassiveEffects();
          } while (rootWithPendingPassiveEffects !== null);
          flushRenderPhaseStrictModeWarningsInDEV();
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Should not already be working.");
            }
          }
          var finishedWork = root2.finishedWork;
          var lanes = root2.finishedLanes;
          if (finishedWork === null) {
            return null;
          }
          root2.finishedWork = null;
          root2.finishedLanes = NoLanes;
          if (!(finishedWork !== root2.current)) {
            {
              throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          root2.callbackNode = null;
          var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
          markRootFinished(root2, remainingLanes);
          if (rootsWithPendingDiscreteUpdates !== null) {
            if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root2)) {
              rootsWithPendingDiscreteUpdates.delete(root2);
            }
          }
          if (root2 === workInProgressRoot) {
            workInProgressRoot = null;
            workInProgress = null;
            workInProgressRootRenderLanes = NoLanes;
          }
          var firstEffect;
          if (finishedWork.flags > PerformedWork) {
            if (finishedWork.lastEffect !== null) {
              finishedWork.lastEffect.nextEffect = finishedWork;
              firstEffect = finishedWork.firstEffect;
            } else {
              firstEffect = finishedWork;
            }
          } else {
            firstEffect = finishedWork.firstEffect;
          }
          if (firstEffect !== null) {
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            var prevInteractions = pushInteractions(root2);
            ReactCurrentOwner$2.current = null;
            focusedInstanceHandle = prepareForCommit(root2.containerInfo);
            shouldFireAfterActiveInstanceBlur = false;
            nextEffect = firstEffect;
            do {
              {
                invokeGuardedCallback(null, commitBeforeMutationEffects, null);
                if (hasCaughtError()) {
                  if (!(nextEffect !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var error2 = clearCaughtError();
                  captureCommitPhaseError(nextEffect, error2);
                  nextEffect = nextEffect.nextEffect;
                }
              }
            } while (nextEffect !== null);
            focusedInstanceHandle = null;
            {
              recordCommitTime();
            }
            nextEffect = firstEffect;
            do {
              {
                invokeGuardedCallback(null, commitMutationEffects, null, root2, renderPriorityLevel);
                if (hasCaughtError()) {
                  if (!(nextEffect !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error = clearCaughtError();
                  captureCommitPhaseError(nextEffect, _error);
                  nextEffect = nextEffect.nextEffect;
                }
              }
            } while (nextEffect !== null);
            resetAfterCommit(root2.containerInfo);
            root2.current = finishedWork;
            nextEffect = firstEffect;
            do {
              {
                invokeGuardedCallback(null, commitLayoutEffects, null, root2, lanes);
                if (hasCaughtError()) {
                  if (!(nextEffect !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error2 = clearCaughtError();
                  captureCommitPhaseError(nextEffect, _error2);
                  nextEffect = nextEffect.nextEffect;
                }
              }
            } while (nextEffect !== null);
            nextEffect = null;
            requestPaint();
            {
              popInteractions(prevInteractions);
            }
            executionContext = prevExecutionContext;
          } else {
            root2.current = finishedWork;
            {
              recordCommitTime();
            }
          }
          var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
          if (rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root2;
            pendingPassiveEffectsLanes = lanes;
            pendingPassiveEffectsRenderPriority = renderPriorityLevel;
          } else {
            nextEffect = firstEffect;
            while (nextEffect !== null) {
              var nextNextEffect = nextEffect.nextEffect;
              nextEffect.nextEffect = null;
              if (nextEffect.flags & Deletion) {
                detachFiberAfterEffects(nextEffect);
              }
              nextEffect = nextNextEffect;
            }
          }
          remainingLanes = root2.pendingLanes;
          if (remainingLanes !== NoLanes) {
            {
              if (spawnedWorkDuringRender !== null) {
                var expirationTimes = spawnedWorkDuringRender;
                spawnedWorkDuringRender = null;
                for (var i = 0; i < expirationTimes.length; i++) {
                  scheduleInteractions(root2, expirationTimes[i], root2.memoizedInteractions);
                }
              }
              schedulePendingInteractions(root2, remainingLanes);
            }
          } else {
            legacyErrorBoundariesThatAlreadyFailed = null;
          }
          {
            if (!rootDidHavePassiveEffects) {
              finishPendingInteractions(root2, lanes);
            }
          }
          if (remainingLanes === SyncLane) {
            if (root2 === rootWithNestedUpdates) {
              nestedUpdateCount++;
            } else {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = root2;
            }
          } else {
            nestedUpdateCount = 0;
          }
          onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
          {
            onCommitRoot$1();
          }
          ensureRootIsScheduled(root2, now());
          if (hasUncaughtError) {
            hasUncaughtError = false;
            var _error3 = firstUncaughtError;
            firstUncaughtError = null;
            throw _error3;
          }
          if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
            return null;
          }
          flushSyncCallbackQueue();
          return null;
        }
        function commitBeforeMutationEffects() {
          while (nextEffect !== null) {
            var current2 = nextEffect.alternate;
            if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
              if ((nextEffect.flags & Deletion) !== NoFlags) {
                if (doesFiberContain(nextEffect, focusedInstanceHandle)) {
                  shouldFireAfterActiveInstanceBlur = true;
                }
              } else {
                if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current2, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) {
                  shouldFireAfterActiveInstanceBlur = true;
                }
              }
            }
            var flags = nextEffect.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(nextEffect);
              commitBeforeMutationLifeCycles(current2, nextEffect);
              resetCurrentFiber();
            }
            if ((flags & Passive) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback(NormalPriority$1, function () {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            nextEffect = nextEffect.nextEffect;
          }
        }
        function commitMutationEffects(root2, renderPriorityLevel) {
          while (nextEffect !== null) {
            setCurrentFiber(nextEffect);
            var flags = nextEffect.flags;
            if (flags & ContentReset) {
              commitResetTextContent(nextEffect);
            }
            if (flags & Ref) {
              var current2 = nextEffect.alternate;
              if (current2 !== null) {
                commitDetachRef(current2);
              }
            }
            var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);
            switch (primaryFlags) {
              case Placement:
                {
                  commitPlacement(nextEffect);
                  nextEffect.flags &= ~Placement;
                  break;
                }
              case PlacementAndUpdate:
                {
                  commitPlacement(nextEffect);
                  nextEffect.flags &= ~Placement;
                  var _current = nextEffect.alternate;
                  commitWork(_current, nextEffect);
                  break;
                }
              case Hydrating:
                {
                  nextEffect.flags &= ~Hydrating;
                  break;
                }
              case HydratingAndUpdate:
                {
                  nextEffect.flags &= ~Hydrating;
                  var _current2 = nextEffect.alternate;
                  commitWork(_current2, nextEffect);
                  break;
                }
              case Update:
                {
                  var _current3 = nextEffect.alternate;
                  commitWork(_current3, nextEffect);
                  break;
                }
              case Deletion:
                {
                  commitDeletion(root2, nextEffect);
                  break;
                }
            }
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
          }
        }
        function commitLayoutEffects(root2, committedLanes) {
          while (nextEffect !== null) {
            setCurrentFiber(nextEffect);
            var flags = nextEffect.flags;
            if (flags & (Update | Callback)) {
              var current2 = nextEffect.alternate;
              commitLifeCycles(root2, current2, nextEffect);
            }
            {
              if (flags & Ref) {
                commitAttachRef(nextEffect);
              }
            }
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
          }
        }
        function flushPassiveEffects() {
          if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
            var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
            pendingPassiveEffectsRenderPriority = NoPriority$1;
            {
              return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
            }
          }
          return false;
        }
        function enqueuePendingPassiveHookEffectMount(fiber, effect) {
          pendingPassiveHookEffectsMount.push(effect, fiber);
          if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback(NormalPriority$1, function () {
              flushPassiveEffects();
              return null;
            });
          }
        }
        function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
          pendingPassiveHookEffectsUnmount.push(effect, fiber);
          {
            fiber.flags |= PassiveUnmountPendingDev;
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.flags |= PassiveUnmountPendingDev;
            }
          }
          if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback(NormalPriority$1, function () {
              flushPassiveEffects();
              return null;
            });
          }
        }
        function invokePassiveEffectCreate(effect) {
          var create = effect.create;
          effect.destroy = create();
        }
        function flushPassiveEffectsImpl() {
          if (rootWithPendingPassiveEffects === null) {
            return false;
          }
          var root2 = rootWithPendingPassiveEffects;
          var lanes = pendingPassiveEffectsLanes;
          rootWithPendingPassiveEffects = null;
          pendingPassiveEffectsLanes = NoLanes;
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Cannot flush passive effects while already rendering.");
            }
          }
          {
            isFlushingPassiveEffects = true;
          }
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          var prevInteractions = pushInteractions(root2);
          var unmountEffects = pendingPassiveHookEffectsUnmount;
          pendingPassiveHookEffectsUnmount = [];
          for (var i = 0; i < unmountEffects.length; i += 2) {
            var _effect = unmountEffects[i];
            var fiber = unmountEffects[i + 1];
            var destroy = _effect.destroy;
            _effect.destroy = void 0;
            {
              fiber.flags &= ~PassiveUnmountPendingDev;
              var alternate = fiber.alternate;
              if (alternate !== null) {
                alternate.flags &= ~PassiveUnmountPendingDev;
              }
            }
            if (typeof destroy === "function") {
              {
                setCurrentFiber(fiber);
                {
                  invokeGuardedCallback(null, destroy, null);
                }
                if (hasCaughtError()) {
                  if (!(fiber !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var error2 = clearCaughtError();
                  captureCommitPhaseError(fiber, error2);
                }
                resetCurrentFiber();
              }
            }
          }
          var mountEffects = pendingPassiveHookEffectsMount;
          pendingPassiveHookEffectsMount = [];
          for (var _i = 0; _i < mountEffects.length; _i += 2) {
            var _effect2 = mountEffects[_i];
            var _fiber = mountEffects[_i + 1];
            {
              setCurrentFiber(_fiber);
              {
                invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
              }
              if (hasCaughtError()) {
                if (!(_fiber !== null)) {
                  {
                    throw Error("Should be working on an effect.");
                  }
                }
                var _error4 = clearCaughtError();
                captureCommitPhaseError(_fiber, _error4);
              }
              resetCurrentFiber();
            }
          }
          var effect = root2.current.firstEffect;
          while (effect !== null) {
            var nextNextEffect = effect.nextEffect;
            effect.nextEffect = null;
            if (effect.flags & Deletion) {
              detachFiberAfterEffects(effect);
            }
            effect = nextNextEffect;
          }
          {
            popInteractions(prevInteractions);
            finishPendingInteractions(root2, lanes);
          }
          {
            isFlushingPassiveEffects = false;
          }
          executionContext = prevExecutionContext;
          flushSyncCallbackQueue();
          nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
          return true;
        }
        function isAlreadyFailedLegacyErrorBoundary(instance) {
          return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
        }
        function markLegacyErrorBoundaryAsFailed(instance) {
          if (legacyErrorBoundariesThatAlreadyFailed === null) {
            legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
          } else {
            legacyErrorBoundariesThatAlreadyFailed.add(instance);
          }
        }
        function prepareToThrowUncaughtError(error2) {
          if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error2;
          }
        }
        var onUncaughtError = prepareToThrowUncaughtError;
        function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
          var errorInfo = createCapturedValue(error2, sourceFiber);
          var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
          enqueueUpdate(rootFiber, update);
          var eventTime = requestEventTime();
          var root2 = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);
          if (root2 !== null) {
            markRootUpdated(root2, SyncLane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
            schedulePendingInteractions(root2, SyncLane);
          }
        }
        function captureCommitPhaseError(sourceFiber, error2) {
          if (sourceFiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error2);
            return;
          }
          var fiber = sourceFiber.return;
          while (fiber !== null) {
            if (fiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error2);
              return;
            } else if (fiber.tag === ClassComponent) {
              var ctor = fiber.type;
              var instance = fiber.stateNode;
              if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                var errorInfo = createCapturedValue(error2, sourceFiber);
                var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                enqueueUpdate(fiber, update);
                var eventTime = requestEventTime();
                var root2 = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
                if (root2 !== null) {
                  markRootUpdated(root2, SyncLane, eventTime);
                  ensureRootIsScheduled(root2, eventTime);
                  schedulePendingInteractions(root2, SyncLane);
                } else {
                  if (typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                    try {
                      instance.componentDidCatch(error2, errorInfo);
                    } catch (errorToIgnore) {}
                  }
                }
                return;
              }
            }
            fiber = fiber.return;
          }
        }
        function pingSuspendedRoot(root2, wakeable, pingedLanes) {
          var pingCache = root2.pingCache;
          if (pingCache !== null) {
            pingCache.delete(wakeable);
          }
          var eventTime = requestEventTime();
          markRootPinged(root2, pingedLanes);
          if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
              prepareFreshStack(root2, NoLanes);
            } else {
              workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
            }
          }
          ensureRootIsScheduled(root2, eventTime);
          schedulePendingInteractions(root2, pingedLanes);
        }
        function retryTimedOutBoundary(boundaryFiber, retryLane) {
          if (retryLane === NoLane) {
            retryLane = requestRetryLane(boundaryFiber);
          }
          var eventTime = requestEventTime();
          var root2 = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
          if (root2 !== null) {
            markRootUpdated(root2, retryLane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
            schedulePendingInteractions(root2, retryLane);
          }
        }
        function resolveRetryWakeable(boundaryFiber, wakeable) {
          var retryLane = NoLane;
          var retryCache;
          {
            retryCache = boundaryFiber.stateNode;
          }
          if (retryCache !== null) {
            retryCache.delete(wakeable);
          }
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function jnd(timeElapsed) {
          return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
        }
        function checkForNestedUpdates() {
          if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            {
              {
                throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
              }
            }
          }
          {
            if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
              nestedPassiveUpdateCount = 0;
              error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
            }
          }
        }
        function flushRenderPhaseStrictModeWarningsInDEV() {
          {
            ReactStrictModeWarnings.flushLegacyContextWarning();
            {
              ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
            }
          }
        }
        var didWarnStateUpdateForNotYetMountedComponent = null;
        function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
          {
            if ((executionContext & RenderContext) !== NoContext) {
              return;
            }
            if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {
              return;
            }
            var tag = fiber.tag;
            if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
              return;
            }
            var componentName = getComponentName(fiber.type) || "ReactComponent";
            if (didWarnStateUpdateForNotYetMountedComponent !== null) {
              if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                return;
              }
              didWarnStateUpdateForNotYetMountedComponent.add(componentName);
            } else {
              didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
            }
            var previousFiber = current;
            try {
              setCurrentFiber(fiber);
              error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
        var didWarnStateUpdateForUnmountedComponent = null;
        function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
          {
            var tag = fiber.tag;
            if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
              return;
            }
            if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {
              return;
            }
            var componentName = getComponentName(fiber.type) || "ReactComponent";
            if (didWarnStateUpdateForUnmountedComponent !== null) {
              if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
                return;
              }
              didWarnStateUpdateForUnmountedComponent.add(componentName);
            } else {
              didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
            }
            if (isFlushingPassiveEffects) ; else {
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.", tag === ClassComponent ? "the componentWillUnmount method" : "a useEffect cleanup function");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
        }
        var beginWork$1;
        {
          var dummyFiber = null;
          beginWork$1 = function (current2, unitOfWork, lanes) {
            var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
            try {
              return beginWork(current2, unitOfWork, lanes);
            } catch (originalError) {
              if (originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                throw originalError;
              }
              resetContextDependencies();
              resetHooksAfterThrow();
              unwindInterruptedWork(unitOfWork);
              assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
              if (unitOfWork.mode & ProfileMode) {
                startProfilerTimer(unitOfWork);
              }
              invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
              if (hasCaughtError()) {
                var replayError = clearCaughtError();
                throw replayError;
              } else {
                throw originalError;
              }
            }
          };
        }
        var didWarnAboutUpdateInRender = false;
        var didWarnAboutUpdateInRenderForAnotherComponent;
        {
          didWarnAboutUpdateInRenderForAnotherComponent = new Set();
        }
        function warnAboutRenderPhaseUpdatesInDEV(fiber) {
          {
            if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent:
                  {
                    var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentName(fiber.type) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                case ClassComponent:
                  {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
              }
            }
          }
        }
        var IsThisRendererActing = {
          current: false
        };
        function warnIfNotScopedWithMatchingAct(fiber) {
          {
            if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
        }
        function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
          {
            if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
              error("An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
            }
          }
        }
        function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
          {
            if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
        }
        var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;
        var didWarnAboutUnmockedScheduler = false;
        function warnIfUnmockedScheduler(fiber) {
          {
            if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === void 0) {
              if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                didWarnAboutUnmockedScheduler = true;
                error(`In Concurrent or Sync modes, the "scheduler" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: 
jest.mock('scheduler', () => require('scheduler/unstable_mock'));

For more info, visit https://reactjs.org/link/mock-scheduler`);
              }
            }
          }
        }
        function computeThreadID(root2, lane) {
          return lane * 1e3 + root2.interactionThreadID;
        }
        function markSpawnedWork(lane) {
          if (spawnedWorkDuringRender === null) {
            spawnedWorkDuringRender = [lane];
          } else {
            spawnedWorkDuringRender.push(lane);
          }
        }
        function scheduleInteractions(root2, lane, interactions) {
          if (interactions.size > 0) {
            var pendingInteractionMap = root2.pendingInteractionMap;
            var pendingInteractions = pendingInteractionMap.get(lane);
            if (pendingInteractions != null) {
              interactions.forEach(function (interaction) {
                if (!pendingInteractions.has(interaction)) {
                  interaction.__count++;
                }
                pendingInteractions.add(interaction);
              });
            } else {
              pendingInteractionMap.set(lane, new Set(interactions));
              interactions.forEach(function (interaction) {
                interaction.__count++;
              });
            }
            var subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null) {
              var threadID = computeThreadID(root2, lane);
              subscriber.onWorkScheduled(interactions, threadID);
            }
          }
        }
        function schedulePendingInteractions(root2, lane) {
          scheduleInteractions(root2, lane, tracing.__interactionsRef.current);
        }
        function startWorkOnPendingInteractions(root2, lanes) {
          var interactions = new Set();
          root2.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledLane) {
            if (includesSomeLane(lanes, scheduledLane)) {
              scheduledInteractions.forEach(function (interaction) {
                return interactions.add(interaction);
              });
            }
          });
          root2.memoizedInteractions = interactions;
          if (interactions.size > 0) {
            var subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null) {
              var threadID = computeThreadID(root2, lanes);
              try {
                subscriber.onWorkStarted(interactions, threadID);
              } catch (error2) {
                scheduleCallback(ImmediatePriority$1, function () {
                  throw error2;
                });
              }
            }
          }
        }
        function finishPendingInteractions(root2, committedLanes) {
          var remainingLanesAfterCommit = root2.pendingLanes;
          var subscriber;
          try {
            subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null && root2.memoizedInteractions.size > 0) {
              var threadID = computeThreadID(root2, committedLanes);
              subscriber.onWorkStopped(root2.memoizedInteractions, threadID);
            }
          } catch (error2) {
            scheduleCallback(ImmediatePriority$1, function () {
              throw error2;
            });
          } finally {
            var pendingInteractionMap = root2.pendingInteractionMap;
            pendingInteractionMap.forEach(function (scheduledInteractions, lane) {
              if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
                pendingInteractionMap.delete(lane);
                scheduledInteractions.forEach(function (interaction) {
                  interaction.__count--;
                  if (subscriber !== null && interaction.__count === 0) {
                    try {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    } catch (error2) {
                      scheduleCallback(ImmediatePriority$1, function () {
                        throw error2;
                      });
                    }
                  }
                });
              }
            });
          }
        }
        function shouldForceFlushFallbacksInDEV() {
          return actingUpdatesScopeDepth > 0;
        }
        var actingUpdatesScopeDepth = 0;
        function detachFiberAfterEffects(fiber) {
          fiber.sibling = null;
          fiber.stateNode = null;
        }
        var resolveFamily = null;
        var failedBoundaries = null;
        var setRefreshHandler = function (handler) {
          {
            resolveFamily = handler;
          }
        };
        function resolveFunctionForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              return type;
            }
            return family.current;
          }
        }
        function resolveClassForHotReloading(type) {
          return resolveFunctionForHotReloading(type);
        }
        function resolveForwardRefForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              if (type !== null && type !== void 0 && typeof type.render === "function") {
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                  var syntheticType = {
                    $$typeof: REACT_FORWARD_REF_TYPE,
                    render: currentRender
                  };
                  if (type.displayName !== void 0) {
                    syntheticType.displayName = type.displayName;
                  }
                  return syntheticType;
                }
              }
              return type;
            }
            return family.current;
          }
        }
        function isCompatibleFamilyForHotReloading(fiber, element) {
          {
            if (resolveFamily === null) {
              return false;
            }
            var prevType = fiber.elementType;
            var nextType = element.type;
            var needsCompareFamilies = false;
            var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
            switch (fiber.tag) {
              case ClassComponent:
                {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
              case FunctionComponent:
                {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
              case ForwardRef:
                {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
              case MemoComponent:
              case SimpleMemoComponent:
                {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
              default:
                return false;
            }
            if (needsCompareFamilies) {
              var prevFamily = resolveFamily(prevType);
              if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                return true;
              }
            }
            return false;
          }
        }
        function markFailedErrorBoundaryForHotReloading(fiber) {
          {
            if (resolveFamily === null) {
              return;
            }
            if (typeof WeakSet !== "function") {
              return;
            }
            if (failedBoundaries === null) {
              failedBoundaries = new WeakSet();
            }
            failedBoundaries.add(fiber);
          }
        }
        var scheduleRefresh = function (root2, update) {
          {
            if (resolveFamily === null) {
              return;
            }
            var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
            flushPassiveEffects();
            flushSync(function () {
              scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
            });
          }
        };
        var scheduleRoot = function (root2, element) {
          {
            if (root2.context !== emptyContextObject) {
              return;
            }
            flushPassiveEffects();
            flushSync(function () {
              updateContainer(element, root2, null, null);
            });
          }
        };
        function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
          {
            var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            if (resolveFamily === null) {
              throw new Error("Expected resolveFamily to be set during hot reload.");
            }
            var needsRender = false;
            var needsRemount = false;
            if (candidateType !== null) {
              var family = resolveFamily(candidateType);
              if (family !== void 0) {
                if (staleFamilies.has(family)) {
                  needsRemount = true;
                } else if (updatedFamilies.has(family)) {
                  if (tag === ClassComponent) {
                    needsRemount = true;
                  } else {
                    needsRender = true;
                  }
                }
              }
            }
            if (failedBoundaries !== null) {
              if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                needsRemount = true;
              }
            }
            if (needsRemount) {
              fiber._debugNeedsRemount = true;
            }
            if (needsRemount || needsRender) {
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            }
            if (child !== null && !needsRemount) {
              scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
            }
            if (sibling !== null) {
              scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
            }
          }
        }
        var findHostInstancesForRefresh = function (root2, families) {
          {
            var hostInstances = new Set();
            var types = new Set(families.map(function (family) {
              return family.current;
            }));
            findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
            return hostInstances;
          }
        };
        function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
          {
            var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            var didMatch = false;
            if (candidateType !== null) {
              if (types.has(candidateType)) {
                didMatch = true;
              }
            }
            if (didMatch) {
              findHostInstancesForFiberShallowly(fiber, hostInstances);
            } else {
              if (child !== null) {
                findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
              }
            }
            if (sibling !== null) {
              findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
            }
          }
        }
        function findHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
            if (foundHostInstances) {
              return;
            }
            var node = fiber;
            while (true) {
              switch (node.tag) {
                case HostComponent:
                  hostInstances.add(node.stateNode);
                  return;
                case HostPortal:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
                case HostRoot:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
              }
              if (node.return === null) {
                throw new Error("Expected to reach root first.");
              }
              node = node.return;
            }
          }
        }
        function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var node = fiber;
            var foundHostInstances = false;
            while (true) {
              if (node.tag === HostComponent) {
                foundHostInstances = true;
                hostInstances.add(node.stateNode);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === fiber) {
                return foundHostInstances;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === fiber) {
                  return foundHostInstances;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          return false;
        }
        var hasBadMapPolyfill;
        {
          hasBadMapPolyfill = false;
          try {
            var nonExtensibleObject = Object.preventExtensions({});
            new Map([[nonExtensibleObject, null]]);
            new Set([nonExtensibleObject]);
          } catch (e) {
            hasBadMapPolyfill = true;
          }
        }
        var debugCounter = 1;
        function FiberNode(tag, pendingProps, key, mode) {
          this.tag = tag;
          this.key = key;
          this.elementType = null;
          this.type = null;
          this.stateNode = null;
          this.return = null;
          this.child = null;
          this.sibling = null;
          this.index = 0;
          this.ref = null;
          this.pendingProps = pendingProps;
          this.memoizedProps = null;
          this.updateQueue = null;
          this.memoizedState = null;
          this.dependencies = null;
          this.mode = mode;
          this.flags = NoFlags;
          this.nextEffect = null;
          this.firstEffect = null;
          this.lastEffect = null;
          this.lanes = NoLanes;
          this.childLanes = NoLanes;
          this.alternate = null;
          {
            this.actualDuration = Number.NaN;
            this.actualStartTime = Number.NaN;
            this.selfBaseDuration = Number.NaN;
            this.treeBaseDuration = Number.NaN;
            this.actualDuration = 0;
            this.actualStartTime = -1;
            this.selfBaseDuration = 0;
            this.treeBaseDuration = 0;
          }
          {
            this._debugID = debugCounter++;
            this._debugSource = null;
            this._debugOwner = null;
            this._debugNeedsRemount = false;
            this._debugHookTypes = null;
            if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
              Object.preventExtensions(this);
            }
          }
        }
        var createFiber = function (tag, pendingProps, key, mode) {
          return new FiberNode(tag, pendingProps, key, mode);
        };
        function shouldConstruct$1(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function isSimpleFunctionComponent(type) {
          return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
        }
        function resolveLazyComponentTag(Component) {
          if (typeof Component === "function") {
            return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
          } else if (Component !== void 0 && Component !== null) {
            var $$typeof = Component.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) {
              return ForwardRef;
            }
            if ($$typeof === REACT_MEMO_TYPE) {
              return MemoComponent;
            }
          }
          return IndeterminateComponent;
        }
        function createWorkInProgress(current2, pendingProps) {
          var workInProgress2 = current2.alternate;
          if (workInProgress2 === null) {
            workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
            workInProgress2.elementType = current2.elementType;
            workInProgress2.type = current2.type;
            workInProgress2.stateNode = current2.stateNode;
            {
              workInProgress2._debugID = current2._debugID;
              workInProgress2._debugSource = current2._debugSource;
              workInProgress2._debugOwner = current2._debugOwner;
              workInProgress2._debugHookTypes = current2._debugHookTypes;
            }
            workInProgress2.alternate = current2;
            current2.alternate = workInProgress2;
          } else {
            workInProgress2.pendingProps = pendingProps;
            workInProgress2.type = current2.type;
            workInProgress2.flags = NoFlags;
            workInProgress2.nextEffect = null;
            workInProgress2.firstEffect = null;
            workInProgress2.lastEffect = null;
            {
              workInProgress2.actualDuration = 0;
              workInProgress2.actualStartTime = -1;
            }
          }
          workInProgress2.childLanes = current2.childLanes;
          workInProgress2.lanes = current2.lanes;
          workInProgress2.child = current2.child;
          workInProgress2.memoizedProps = current2.memoizedProps;
          workInProgress2.memoizedState = current2.memoizedState;
          workInProgress2.updateQueue = current2.updateQueue;
          var currentDependencies = current2.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
          };
          workInProgress2.sibling = current2.sibling;
          workInProgress2.index = current2.index;
          workInProgress2.ref = current2.ref;
          {
            workInProgress2.selfBaseDuration = current2.selfBaseDuration;
            workInProgress2.treeBaseDuration = current2.treeBaseDuration;
          }
          {
            workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case FunctionComponent:
              case SimpleMemoComponent:
                workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                break;
              case ClassComponent:
                workInProgress2.type = resolveClassForHotReloading(current2.type);
                break;
              case ForwardRef:
                workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                break;
            }
          }
          return workInProgress2;
        }
        function resetWorkInProgress(workInProgress2, renderLanes2) {
          workInProgress2.flags &= Placement;
          workInProgress2.nextEffect = null;
          workInProgress2.firstEffect = null;
          workInProgress2.lastEffect = null;
          var current2 = workInProgress2.alternate;
          if (current2 === null) {
            workInProgress2.childLanes = NoLanes;
            workInProgress2.lanes = renderLanes2;
            workInProgress2.child = null;
            workInProgress2.memoizedProps = null;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.dependencies = null;
            workInProgress2.stateNode = null;
            {
              workInProgress2.selfBaseDuration = 0;
              workInProgress2.treeBaseDuration = 0;
            }
          } else {
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            workInProgress2.type = current2.type;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
          }
          return workInProgress2;
        }
        function createHostRootFiber(tag) {
          var mode;
          if (tag === ConcurrentRoot) {
            mode = ConcurrentMode | BlockingMode | StrictMode;
          } else if (tag === BlockingRoot) {
            mode = BlockingMode | StrictMode;
          } else {
            mode = NoMode;
          }
          if (isDevToolsPresent) {
            mode |= ProfileMode;
          }
          return createFiber(HostRoot, null, null, mode);
        }
        function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
          var fiberTag = IndeterminateComponent;
          var resolvedType = type;
          if (typeof type === "function") {
            if (shouldConstruct$1(type)) {
              fiberTag = ClassComponent;
              {
                resolvedType = resolveClassForHotReloading(resolvedType);
              }
            } else {
              {
                resolvedType = resolveFunctionForHotReloading(resolvedType);
              }
            }
          } else if (typeof type === "string") {
            fiberTag = HostComponent;
          } else {
            getTag: switch (type) {
              case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(pendingProps.children, mode, lanes, key);
              case REACT_DEBUG_TRACING_MODE_TYPE:
                fiberTag = Mode;
                mode |= DebugTracingMode;
                break;
              case REACT_STRICT_MODE_TYPE:
                fiberTag = Mode;
                mode |= StrictMode;
                break;
              case REACT_PROFILER_TYPE:
                return createFiberFromProfiler(pendingProps, mode, lanes, key);
              case REACT_SUSPENSE_TYPE:
                return createFiberFromSuspense(pendingProps, mode, lanes, key);
              case REACT_SUSPENSE_LIST_TYPE:
                return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
              case REACT_OFFSCREEN_TYPE:
                return createFiberFromOffscreen(pendingProps, mode, lanes, key);
              case REACT_LEGACY_HIDDEN_TYPE:
                return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);
              case REACT_SCOPE_TYPE:
              default:
                {
                  if (typeof type === "object" && type !== null) {
                    switch (type.$$typeof) {
                      case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                      case REACT_CONTEXT_TYPE:
                        fiberTag = ContextConsumer;
                        break getTag;
                      case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        {
                          resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        }
                        break getTag;
                      case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                      case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                      case REACT_BLOCK_TYPE:
                        fiberTag = Block;
                        break getTag;
                    }
                  }
                  var info = "";
                  {
                    if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                      info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                    }
                    var ownerName = owner ? getComponentName(owner.type) : null;
                    if (ownerName) {
                      info += "\n\nCheck the render method of `" + ownerName + "`.";
                    }
                  }
                  {
                    {
                      throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
                    }
                  }
                }
            }
          }
          var fiber = createFiber(fiberTag, pendingProps, key, mode);
          fiber.elementType = type;
          fiber.type = resolvedType;
          fiber.lanes = lanes;
          {
            fiber._debugOwner = owner;
          }
          return fiber;
        }
        function createFiberFromElement(element, mode, lanes) {
          var owner = null;
          {
            owner = element._owner;
          }
          var type = element.type;
          var key = element.key;
          var pendingProps = element.props;
          var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
          {
            fiber._debugSource = element._source;
            fiber._debugOwner = element._owner;
          }
          return fiber;
        }
        function createFiberFromFragment(elements, mode, lanes, key) {
          var fiber = createFiber(Fragment, elements, key, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromProfiler(pendingProps, mode, lanes, key) {
          {
            if (typeof pendingProps.id !== "string") {
              error('Profiler must specify an "id" as a prop');
            }
          }
          var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
          fiber.elementType = REACT_PROFILER_TYPE;
          fiber.type = REACT_PROFILER_TYPE;
          fiber.lanes = lanes;
          {
            fiber.stateNode = {
              effectDuration: 0,
              passiveEffectDuration: 0
            };
          }
          return fiber;
        }
        function createFiberFromSuspense(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
          fiber.type = REACT_SUSPENSE_TYPE;
          fiber.elementType = REACT_SUSPENSE_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
          {
            fiber.type = REACT_SUSPENSE_LIST_TYPE;
          }
          fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
          var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
          {
            fiber.type = REACT_OFFSCREEN_TYPE;
          }
          fiber.elementType = REACT_OFFSCREEN_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
          var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);
          {
            fiber.type = REACT_LEGACY_HIDDEN_TYPE;
          }
          fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromText(content, mode, lanes) {
          var fiber = createFiber(HostText, content, null, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromHostInstanceForDeletion() {
          var fiber = createFiber(HostComponent, null, null, NoMode);
          fiber.elementType = "DELETED";
          fiber.type = "DELETED";
          return fiber;
        }
        function createFiberFromPortal(portal, mode, lanes) {
          var pendingProps = portal.children !== null ? portal.children : [];
          var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
          fiber.lanes = lanes;
          fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            implementation: portal.implementation
          };
          return fiber;
        }
        function assignFiberPropertiesInDEV(target, source) {
          if (target === null) {
            target = createFiber(IndeterminateComponent, null, null, NoMode);
          }
          target.tag = source.tag;
          target.key = source.key;
          target.elementType = source.elementType;
          target.type = source.type;
          target.stateNode = source.stateNode;
          target.return = source.return;
          target.child = source.child;
          target.sibling = source.sibling;
          target.index = source.index;
          target.ref = source.ref;
          target.pendingProps = source.pendingProps;
          target.memoizedProps = source.memoizedProps;
          target.updateQueue = source.updateQueue;
          target.memoizedState = source.memoizedState;
          target.dependencies = source.dependencies;
          target.mode = source.mode;
          target.flags = source.flags;
          target.nextEffect = source.nextEffect;
          target.firstEffect = source.firstEffect;
          target.lastEffect = source.lastEffect;
          target.lanes = source.lanes;
          target.childLanes = source.childLanes;
          target.alternate = source.alternate;
          {
            target.actualDuration = source.actualDuration;
            target.actualStartTime = source.actualStartTime;
            target.selfBaseDuration = source.selfBaseDuration;
            target.treeBaseDuration = source.treeBaseDuration;
          }
          target._debugID = source._debugID;
          target._debugSource = source._debugSource;
          target._debugOwner = source._debugOwner;
          target._debugNeedsRemount = source._debugNeedsRemount;
          target._debugHookTypes = source._debugHookTypes;
          return target;
        }
        function FiberRootNode(containerInfo, tag, hydrate2) {
          this.tag = tag;
          this.containerInfo = containerInfo;
          this.pendingChildren = null;
          this.current = null;
          this.pingCache = null;
          this.finishedWork = null;
          this.timeoutHandle = noTimeout;
          this.context = null;
          this.pendingContext = null;
          this.hydrate = hydrate2;
          this.callbackNode = null;
          this.callbackPriority = NoLanePriority;
          this.eventTimes = createLaneMap(NoLanes);
          this.expirationTimes = createLaneMap(NoTimestamp);
          this.pendingLanes = NoLanes;
          this.suspendedLanes = NoLanes;
          this.pingedLanes = NoLanes;
          this.expiredLanes = NoLanes;
          this.mutableReadLanes = NoLanes;
          this.finishedLanes = NoLanes;
          this.entangledLanes = NoLanes;
          this.entanglements = createLaneMap(NoLanes);
          {
            this.mutableSourceEagerHydrationData = null;
          }
          {
            this.interactionThreadID = tracing.unstable_getThreadID();
            this.memoizedInteractions = new Set();
            this.pendingInteractionMap = new Map();
          }
          {
            switch (tag) {
              case BlockingRoot:
                this._debugRootType = "createBlockingRoot()";
                break;
              case ConcurrentRoot:
                this._debugRootType = "createRoot()";
                break;
              case LegacyRoot:
                this._debugRootType = "createLegacyRoot()";
                break;
            }
          }
        }
        function createFiberRoot(containerInfo, tag, hydrate2, hydrationCallbacks) {
          var root2 = new FiberRootNode(containerInfo, tag, hydrate2);
          var uninitializedFiber = createHostRootFiber(tag);
          root2.current = uninitializedFiber;
          uninitializedFiber.stateNode = root2;
          initializeUpdateQueue(uninitializedFiber);
          return root2;
        }
        function registerMutableSourceForHydration(root2, mutableSource) {
          var getVersion = mutableSource._getVersion;
          var version = getVersion(mutableSource._source);
          if (root2.mutableSourceEagerHydrationData == null) {
            root2.mutableSourceEagerHydrationData = [mutableSource, version];
          } else {
            root2.mutableSourceEagerHydrationData.push(mutableSource, version);
          }
        }
        function createPortal(children, containerInfo, implementation) {
          var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
          return {
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : "" + key,
            children,
            containerInfo,
            implementation
          };
        }
        var didWarnAboutNestedUpdates;
        var didWarnAboutFindNodeInStrictMode;
        {
          didWarnAboutNestedUpdates = false;
          didWarnAboutFindNodeInStrictMode = {};
        }
        function getContextForSubtree(parentComponent) {
          if (!parentComponent) {
            return emptyContextObject;
          }
          var fiber = get(parentComponent);
          var parentContext = findCurrentUnmaskedContext(fiber);
          if (fiber.tag === ClassComponent) {
            var Component = fiber.type;
            if (isContextProvider(Component)) {
              return processChildContext(fiber, Component, parentContext);
            }
          }
          return parentContext;
        }
        function findHostInstanceWithWarning(component, methodName) {
          {
            var fiber = get(component);
            if (fiber === void 0) {
              if (typeof component.render === "function") {
                {
                  {
                    throw Error("Unable to find node on an unmounted component.");
                  }
                }
              } else {
                {
                  {
                    throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
                  }
                }
              }
            }
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.mode & StrictMode) {
              var componentName = getComponentName(fiber.type) || "Component";
              if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                var previousFiber = current;
                try {
                  setCurrentFiber(hostFiber);
                  if (fiber.mode & StrictMode) {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  } else {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  }
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(previousFiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
            return hostFiber.stateNode;
          }
        }
        function createContainer(containerInfo, tag, hydrate2, hydrationCallbacks) {
          return createFiberRoot(containerInfo, tag, hydrate2);
        }
        function updateContainer(element, container, parentComponent, callback) {
          {
            onScheduleRoot(container, element);
          }
          var current$1 = container.current;
          var eventTime = requestEventTime();
          {
            if (typeof jest !== "undefined") {
              warnIfUnmockedScheduler(current$1);
              warnIfNotScopedWithMatchingAct(current$1);
            }
          }
          var lane = requestUpdateLane(current$1);
          var context = getContextForSubtree(parentComponent);
          if (container.context === null) {
            container.context = context;
          } else {
            container.pendingContext = context;
          }
          {
            if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
              didWarnAboutNestedUpdates = true;
              error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName(current.type) || "Unknown");
            }
          }
          var update = createUpdate(eventTime, lane);
          update.payload = {
            element
          };
          callback = callback === void 0 ? null : callback;
          if (callback !== null) {
            {
              if (typeof callback !== "function") {
                error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
              }
            }
            update.callback = callback;
          }
          enqueueUpdate(current$1, update);
          scheduleUpdateOnFiber(current$1, lane, eventTime);
          return lane;
        }
        function getPublicRootInstance(container) {
          var containerFiber = container.current;
          if (!containerFiber.child) {
            return null;
          }
          switch (containerFiber.child.tag) {
            case HostComponent:
              return getPublicInstance(containerFiber.child.stateNode);
            default:
              return containerFiber.child.stateNode;
          }
        }
        function markRetryLaneImpl(fiber, retryLane) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState !== null && suspenseState.dehydrated !== null) {
            suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
          }
        }
        function markRetryLaneIfNotHydrated(fiber, retryLane) {
          markRetryLaneImpl(fiber, retryLane);
          var alternate = fiber.alternate;
          if (alternate) {
            markRetryLaneImpl(alternate, retryLane);
          }
        }
        function attemptUserBlockingHydration$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var eventTime = requestEventTime();
          var lane = InputDiscreteHydrationLane;
          scheduleUpdateOnFiber(fiber, lane, eventTime);
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function attemptContinuousHydration$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var eventTime = requestEventTime();
          var lane = SelectiveHydrationLane;
          scheduleUpdateOnFiber(fiber, lane, eventTime);
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function attemptHydrationAtCurrentPriority$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          scheduleUpdateOnFiber(fiber, lane, eventTime);
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function runWithPriority$2(priority, fn) {
          try {
            setCurrentUpdateLanePriority(priority);
            return fn();
          } finally {}
        }
        function findHostInstanceWithNoPortals(fiber) {
          var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
          if (hostFiber === null) {
            return null;
          }
          if (hostFiber.tag === FundamentalComponent) {
            return hostFiber.stateNode.instance;
          }
          return hostFiber.stateNode;
        }
        var shouldSuspendImpl = function (fiber) {
          return false;
        };
        function shouldSuspend(fiber) {
          return shouldSuspendImpl(fiber);
        }
        var overrideHookState = null;
        var overrideHookStateDeletePath = null;
        var overrideHookStateRenamePath = null;
        var overrideProps = null;
        var overridePropsDeletePath = null;
        var overridePropsRenamePath = null;
        var scheduleUpdate = null;
        var setSuspenseHandler = null;
        {
          var copyWithDeleteImpl = function (obj, path, index2) {
            var key = path[index2];
            var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
            if (index2 + 1 === path.length) {
              if (Array.isArray(updated)) {
                updated.splice(key, 1);
              } else {
                delete updated[key];
              }
              return updated;
            }
            updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
            return updated;
          };
          var copyWithDelete = function (obj, path) {
            return copyWithDeleteImpl(obj, path, 0);
          };
          var copyWithRenameImpl = function (obj, oldPath, newPath, index2) {
            var oldKey = oldPath[index2];
            var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
            if (index2 + 1 === oldPath.length) {
              var newKey = newPath[index2];
              updated[newKey] = updated[oldKey];
              if (Array.isArray(updated)) {
                updated.splice(oldKey, 1);
              } else {
                delete updated[oldKey];
              }
            } else {
              updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index2 + 1);
            }
            return updated;
          };
          var copyWithRename = function (obj, oldPath, newPath) {
            if (oldPath.length !== newPath.length) {
              warn("copyWithRename() expects paths of the same length");
              return;
            } else {
              for (var i = 0; i < newPath.length - 1; i++) {
                if (oldPath[i] !== newPath[i]) {
                  warn("copyWithRename() expects paths to be the same except for the deepest key");
                  return;
                }
              }
            }
            return copyWithRenameImpl(obj, oldPath, newPath, 0);
          };
          var copyWithSetImpl = function (obj, path, index2, value) {
            if (index2 >= path.length) {
              return value;
            }
            var key = path[index2];
            var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
            updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
            return updated;
          };
          var copyWithSet = function (obj, path, value) {
            return copyWithSetImpl(obj, path, 0, value);
          };
          var findHook = function (fiber, id) {
            var currentHook2 = fiber.memoizedState;
            while (currentHook2 !== null && id > 0) {
              currentHook2 = currentHook2.next;
              id--;
            }
            return currentHook2;
          };
          overrideHookState = function (fiber, id, path, value) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithSet(hook.memoizedState, path, value);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = _assign({}, fiber.memoizedProps);
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            }
          };
          overrideHookStateDeletePath = function (fiber, id, path) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithDelete(hook.memoizedState, path);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = _assign({}, fiber.memoizedProps);
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            }
          };
          overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = _assign({}, fiber.memoizedProps);
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            }
          };
          overrideProps = function (fiber, path, value) {
            fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          };
          overridePropsDeletePath = function (fiber, path) {
            fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          };
          overridePropsRenamePath = function (fiber, oldPath, newPath) {
            fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          };
          scheduleUpdate = function (fiber) {
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          };
          setSuspenseHandler = function (newShouldSuspendImpl) {
            shouldSuspendImpl = newShouldSuspendImpl;
          };
        }
        function findHostInstanceByFiber(fiber) {
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        function emptyFindFiberByHostInstance(instance) {
          return null;
        }
        function getCurrentFiberForDevTools() {
          return current;
        }
        function injectIntoDevTools(devToolsConfig) {
          var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
          var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
          return injectInternals({
            bundleType: devToolsConfig.bundleType,
            version: devToolsConfig.version,
            rendererPackageName: devToolsConfig.rendererPackageName,
            rendererConfig: devToolsConfig.rendererConfig,
            overrideHookState,
            overrideHookStateDeletePath,
            overrideHookStateRenamePath,
            overrideProps,
            overridePropsDeletePath,
            overridePropsRenamePath,
            setSuspenseHandler,
            scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher2,
            findHostInstanceByFiber,
            findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
            findHostInstancesForRefresh,
            scheduleRefresh,
            scheduleRoot,
            setRefreshHandler,
            getCurrentFiber: getCurrentFiberForDevTools
          });
        }
        function ReactDOMRoot(container, options2) {
          this._internalRoot = createRootImpl(container, ConcurrentRoot, options2);
        }
        function ReactDOMBlockingRoot(container, tag, options2) {
          this._internalRoot = createRootImpl(container, tag, options2);
        }
        ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function (children) {
          var root2 = this._internalRoot;
          {
            if (typeof arguments[1] === "function") {
              error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            }
            var container = root2.containerInfo;
            if (container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(root2.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                }
              }
            }
          }
          updateContainer(children, root2, null, null);
        };
        ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function () {
          {
            if (typeof arguments[0] === "function") {
              error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            }
          }
          var root2 = this._internalRoot;
          var container = root2.containerInfo;
          updateContainer(null, root2, null, function () {
            unmarkContainerAsRoot(container);
          });
        };
        function createRootImpl(container, tag, options2) {
          var hydrate2 = options2 != null && options2.hydrate === true;
          var hydrationCallbacks = options2 != null && options2.hydrationOptions || null;
          var mutableSources = options2 != null && options2.hydrationOptions != null && options2.hydrationOptions.mutableSources || null;
          var root2 = createContainer(container, tag, hydrate2);
          markContainerAsRoot(root2.current, container);
          var containerNodeType = container.nodeType;
          {
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
          }
          if (mutableSources) {
            for (var i = 0; i < mutableSources.length; i++) {
              var mutableSource = mutableSources[i];
              registerMutableSourceForHydration(root2, mutableSource);
            }
          }
          return root2;
        }
        function createLegacyRoot(container, options2) {
          return new ReactDOMBlockingRoot(container, LegacyRoot, options2);
        }
        function isValidContainer(node) {
          return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
        }
        var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
        var topLevelUpdateWarnings;
        var warnedAboutHydrateAPI = false;
        {
          topLevelUpdateWarnings = function (container) {
            if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                }
              }
            }
            var isRootRenderedBySomeReact = !!container._reactRootContainer;
            var rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
            if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
              error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
            }
            if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
              error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
            }
          };
        }
        function getReactRootElementInContainer(container) {
          if (!container) {
            return null;
          }
          if (container.nodeType === DOCUMENT_NODE) {
            return container.documentElement;
          } else {
            return container.firstChild;
          }
        }
        function shouldHydrateDueToLegacyHeuristic(container) {
          var rootElement = getReactRootElementInContainer(container);
          return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
        }
        function legacyCreateRootFromDOMContainer(container, forceHydrate) {
          var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
          if (!shouldHydrate) {
            var warned = false;
            var rootSibling;
            while (rootSibling = container.lastChild) {
              {
                if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                  warned = true;
                  error("render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.");
                }
              }
              container.removeChild(rootSibling);
            }
          }
          {
            if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
              warnedAboutHydrateAPI = true;
              warn("render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v18. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.");
            }
          }
          return createLegacyRoot(container, shouldHydrate ? {
            hydrate: true
          } : void 0);
        }
        function warnOnInvalidCallback$1(callback, callerName) {
          {
            if (callback !== null && typeof callback !== "function") {
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          }
        }
        function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
          {
            topLevelUpdateWarnings(container);
            warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
          }
          var root2 = container._reactRootContainer;
          var fiberRoot;
          if (!root2) {
            root2 = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
            fiberRoot = root2._internalRoot;
            if (typeof callback === "function") {
              var originalCallback = callback;
              callback = function () {
                var instance = getPublicRootInstance(fiberRoot);
                originalCallback.call(instance);
              };
            }
            unbatchedUpdates(function () {
              updateContainer(children, fiberRoot, parentComponent, callback);
            });
          } else {
            fiberRoot = root2._internalRoot;
            if (typeof callback === "function") {
              var _originalCallback = callback;
              callback = function () {
                var instance = getPublicRootInstance(fiberRoot);
                _originalCallback.call(instance);
              };
            }
            updateContainer(children, fiberRoot, parentComponent, callback);
          }
          return getPublicRootInstance(fiberRoot);
        }
        function findDOMNode(componentOrElement) {
          {
            var owner = ReactCurrentOwner$3.current;
            if (owner !== null && owner.stateNode !== null) {
              var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
              if (!warnedAboutRefsInRender) {
                error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(owner.type) || "A component");
              }
              owner.stateNode._warnedAboutRefsInRender = true;
            }
          }
          if (componentOrElement == null) {
            return null;
          }
          if (componentOrElement.nodeType === ELEMENT_NODE) {
            return componentOrElement;
          }
          {
            return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
          }
        }
        function hydrate(element, container, callback) {
          if (!isValidContainer(container)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
        }
        function render(element, container, callback) {
          if (!isValidContainer(container)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
        }
        function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          if (!isValidContainer(containerNode)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          }
          if (!(parentComponent != null && has(parentComponent))) {
            {
              throw Error("parentComponent must be a valid React Component");
            }
          }
          return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
        }
        function unmountComponentAtNode(container) {
          if (!isValidContainer(container)) {
            {
              throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?");
            }
          }
          if (container._reactRootContainer) {
            {
              var rootEl = getReactRootElementInContainer(container);
              var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
              if (renderedByDifferentReact) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
              }
            }
            unbatchedUpdates(function () {
              legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
                container._reactRootContainer = null;
                unmarkContainerAsRoot(container);
              });
            });
            return true;
          } else {
            {
              var _rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
              var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
              if (hasNonRootReactChild) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
              }
            }
            return false;
          }
        }
        setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
        setAttemptContinuousHydration(attemptContinuousHydration$1);
        setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
        setAttemptHydrationAtPriority(runWithPriority$2);
        var didWarnAboutUnstableCreatePortal = false;
        {
          if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
            error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
          }
        }
        setRestoreImplementation(restoreControlledState$3);
        setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
        function createPortal$1(children, container) {
          var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          if (!isValidContainer(container)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          }
          return createPortal(children, container, null, key);
        }
        function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
        }
        function unstable_createPortal(children, container) {
          var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          {
            if (!didWarnAboutUnstableCreatePortal) {
              didWarnAboutUnstableCreatePortal = true;
              warn('The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 18+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the "unstable_" prefix.');
            }
          }
          return createPortal$1(children, container, key);
        }
        var Internals = {
          Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, flushPassiveEffects, IsThisRendererActing]
        };
        var foundDevTools = injectIntoDevTools({
          findFiberByHostInstance: getClosestInstanceFromNode,
          bundleType: 1,
          version: ReactVersion,
          rendererPackageName: "react-dom"
        });
        {
          if (!foundDevTools && canUseDOM && window.top === window.self) {
            if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
              var protocol = window.location.protocol;
              if ((/^(https?|file):$/).test(protocol)) {
                console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
              }
            }
          }
        }
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
        exports.createPortal = createPortal$1;
        exports.findDOMNode = findDOMNode;
        exports.flushSync = flushSync;
        exports.hydrate = hydrate;
        exports.render = render;
        exports.unmountComponentAtNode = unmountComponentAtNode;
        exports.unstable_batchedUpdates = batchedUpdates$1;
        exports.unstable_createPortal = unstable_createPortal;
        exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
        exports.version = ReactVersion;
      })();
    }
  });
  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS((exports, module) => {
    "use strict";
    if (false) {
      checkDCE();
      module.exports = null;
    } else {
      module.exports = require_react_dom_development();
    }
  });
  // ../../.esy/3/b/melange-388c5d45/default/lib/js/caml_option.js
  var require_caml_option = __commonJS(exports => {
    "use strict";
    function isNested(x) {
      return x.BS_PRIVATE_NESTED_SOME_NONE !== void 0;
    }
    function some(x) {
      if (x === void 0) {
        return {
          BS_PRIVATE_NESTED_SOME_NONE: 0
        };
      } else if (x !== null && x.BS_PRIVATE_NESTED_SOME_NONE !== void 0) {
        return {
          BS_PRIVATE_NESTED_SOME_NONE: x.BS_PRIVATE_NESTED_SOME_NONE + 1 | 0
        };
      } else {
        return x;
      }
    }
    function nullable_to_opt(x) {
      if (x == null) {
        return;
      } else {
        return some(x);
      }
    }
    function undefined_to_opt(x) {
      if (x === void 0) {
        return;
      } else {
        return some(x);
      }
    }
    function null_to_opt(x) {
      if (x === null) {
        return;
      } else {
        return some(x);
      }
    }
    function valFromOption(x) {
      if (!(x !== null && x.BS_PRIVATE_NESTED_SOME_NONE !== void 0)) {
        return x;
      }
      var depth = x.BS_PRIVATE_NESTED_SOME_NONE;
      if (depth === 0) {
        return;
      } else {
        return {
          BS_PRIVATE_NESTED_SOME_NONE: depth - 1 | 0
        };
      }
    }
    function option_get(x) {
      if (x === void 0) {
        return;
      } else {
        return valFromOption(x);
      }
    }
    function option_unwrap(x) {
      if (x !== void 0) {
        return x.VAL;
      } else {
        return x;
      }
    }
    exports.nullable_to_opt = nullable_to_opt;
    exports.undefined_to_opt = undefined_to_opt;
    exports.null_to_opt = null_to_opt;
    exports.valFromOption = valFromOption;
    exports.some = some;
    exports.isNested = isNested;
    exports.option_get = option_get;
    exports.option_unwrap = option_unwrap;
  });
  // _build/default/node_modules/reason-react/src/legacy/ReactDOMRe.bs.js
  var require_ReactDOMRe_bs = __commonJS(exports => {
    "use strict";
    var React2 = require_react();
    var ReactDom = require_react_dom();
    var Caml_option = require_caml_option();
    function renderToElementWithClassName(reactElement, className) {
      var elements = document.getElementsByClassName(className);
      if (elements.length) {
        ReactDom.render(reactElement, elements[0]);
      } else {
        console.error("ReactDOMRe.renderToElementWithClassName: no element of class " + (className + " found in the HTML."));
      }
    }
    function renderToElementWithId(reactElement, id) {
      var element = document.getElementById(id);
      if (element == null) {
        console.error("ReactDOMRe.renderToElementWithId : no element of id " + (id + " found in the HTML."));
      } else {
        ReactDom.render(reactElement, element);
      }
    }
    function createRootWithClassName(className) {
      var elements = document.getElementsByClassName(className);
      if (elements.length) {
        return Caml_option.some(ReactDom.createRoot(elements[0]));
      }
    }
    function createRootWithId(id) {
      var element = document.getElementById(id);
      if (!(element == null)) {
        return Caml_option.some(ReactDom.createRoot(element));
      }
    }
    var Experimental = {
      createRootWithClassName,
      createRootWithId
    };
    function hydrateToElementWithClassName(reactElement, className) {
      var elements = document.getElementsByClassName(className);
      if (elements.length) {
        ReactDom.hydrate(reactElement, elements[0]);
      } else {
        console.error("ReactDOMRe.hydrateToElementWithClassName: no element of class " + (className + " found in the HTML."));
      }
    }
    function hydrateToElementWithId(reactElement, id) {
      var element = document.getElementById(id);
      if (element == null) {
        console.error("ReactDOMRe.hydrateToElementWithId : no element of id " + (id + " found in the HTML."));
      } else {
        ReactDom.hydrate(reactElement, element);
      }
    }
    var Ref = {};
    function createElementVariadic(domClassName, props, children) {
      var variadicArguments = [domClassName, props].concat(children);
      return React2.createElement.apply(null, variadicArguments);
    }
    exports.renderToElementWithClassName = renderToElementWithClassName;
    exports.renderToElementWithId = renderToElementWithId;
    exports.Experimental = Experimental;
    exports.hydrateToElementWithClassName = hydrateToElementWithClassName;
    exports.hydrateToElementWithId = hydrateToElementWithId;
    exports.Ref = Ref;
    exports.createElementVariadic = createElementVariadic;
  });
  // ../../.esy/3/b/melange-388c5d45/default/lib/js/caml_sys.js
  var require_caml_sys = __commonJS(exports => {
    "use strict";
    function caml_sys_getenv(s) {
      if (typeof process === "undefined" || process.env === void 0) {
        throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
      }
      var x = process.env[s];
      if (x !== void 0) {
        return x;
      }
      throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
    }
    var os_type = function (_) {
      if (typeof process !== "undefined" && process.platform === "win32") {
        return "Win32";
      } else {
        return "Unix";
      }
    };
    function caml_sys_time(param) {
      if (typeof process === "undefined" || process.uptime === void 0) {
        return -1;
      } else {
        return process.uptime();
      }
    }
    function caml_sys_system_command(_cmd) {
      return 127;
    }
    var caml_sys_getcwd = function (param) {
      if (typeof process === "undefined" || process.cwd === void 0) {
        return "/";
      }
      return process.cwd();
    };
    function caml_sys_executable_name(param) {
      if (typeof process === "undefined") {
        return "";
      }
      var argv = process.argv;
      if (argv == null) {
        return "";
      } else {
        return argv[0];
      }
    }
    function caml_sys_argv(param) {
      if (typeof process === "undefined") {
        return ["", [""]];
      }
      var argv = process.argv;
      if (argv == null) {
        return ["", [""]];
      } else {
        return [argv[0], argv];
      }
    }
    function caml_sys_exit(exit_code) {
      if (typeof process !== "undefined") {
        return process.exit(exit_code);
      }
    }
    function caml_sys_is_directory(_s) {
      throw {
        RE_EXN_ID: "Failure",
        _1: "caml_sys_is_directory not implemented",
        Error: new Error()
      };
    }
    function caml_sys_file_exists(_s) {
      throw {
        RE_EXN_ID: "Failure",
        _1: "caml_sys_file_exists not implemented",
        Error: new Error()
      };
    }
    exports.caml_sys_getenv = caml_sys_getenv;
    exports.caml_sys_time = caml_sys_time;
    exports.os_type = os_type;
    exports.caml_sys_system_command = caml_sys_system_command;
    exports.caml_sys_getcwd = caml_sys_getcwd;
    exports.caml_sys_executable_name = caml_sys_executable_name;
    exports.caml_sys_argv = caml_sys_argv;
    exports.caml_sys_exit = caml_sys_exit;
    exports.caml_sys_is_directory = caml_sys_is_directory;
    exports.caml_sys_file_exists = caml_sys_file_exists;
  });
  // ../../.esy/3/b/melange-388c5d45/default/lib/js/caml_exceptions.js
  var require_caml_exceptions = __commonJS(exports => {
    "use strict";
    var id = {
      contents: 0
    };
    function create(str) {
      id.contents = id.contents + 1 | 0;
      return str + ("/" + id.contents);
    }
    function caml_is_extension(e) {
      if (e == null) {
        return false;
      } else {
        return typeof e.RE_EXN_ID === "string";
      }
    }
    function caml_exn_slot_name(x) {
      return x.RE_EXN_ID;
    }
    exports.id = id;
    exports.create = create;
    exports.caml_is_extension = caml_is_extension;
    exports.caml_exn_slot_name = caml_exn_slot_name;
  });
  // ../../.esy/3/b/melange-388c5d45/default/lib/js/caml_external_polyfill.js
  var require_caml_external_polyfill = __commonJS(exports => {
    "use strict";
    var getGlobalThis = function () {
      if (typeof globalThis !== "undefined") return globalThis;
      if (typeof self !== "undefined") return self;
      if (typeof window !== "undefined") return window;
      if (typeof global !== "undefined") return global;
      if (typeof this !== "undefined") return this;
      throw new Error("Unable to locate global `this`");
    };
    var resolve = function (s) {
      var myGlobal = getGlobalThis();
      if (myGlobal[s] === void 0) {
        throw new Error(s + " not polyfilled by ReScript yet\n");
      }
      return myGlobal[s];
    };
    var register = function (s, fn) {
      var myGlobal = getGlobalThis();
      myGlobal[s] = fn;
      return 0;
    };
    exports.getGlobalThis = getGlobalThis;
    exports.resolve = resolve;
    exports.register = register;
  });
  // ../../.esy/3/b/melange-388c5d45/default/lib/js/sys.js
  var require_sys = __commonJS(exports => {
    "use strict";
    var Caml_sys = require_caml_sys();
    var Caml_exceptions = require_caml_exceptions();
    var Caml_external_polyfill = require_caml_external_polyfill();
    var executable_name = Caml_sys.caml_sys_executable_name(void 0);
    var os_type = Caml_sys.os_type(void 0);
    var backend_type = {
      _0: "BS"
    };
    var big_endian = false;
    var unix = Caml_sys.os_type(void 0) === "Unix";
    var win32 = Caml_sys.os_type(void 0) === "Win32";
    function getenv_opt(s) {
      var x = typeof process === "undefined" ? void 0 : process;
      if (x !== void 0) {
        return x.env[s];
      }
    }
    var interactive = {
      contents: false
    };
    function set_signal(sig_num, sig_beh) {}
    var Break = /*@__PURE__*/Caml_exceptions.create("Sys.Break");
    function catch_break(on) {}
    function Make(Immediate, Non_immediate) {
      var repr = 1;
      return {
        repr
      };
    }
    var Immediate64 = {
      Make
    };
    var cygwin = false;
    var word_size = 32;
    var int_size = 32;
    var max_string_length = 2147483647;
    var max_array_length = 2147483647;
    var max_floatarray_length = 2147483647;
    var sigabrt = -1;
    var sigalrm = -2;
    var sigfpe = -3;
    var sighup = -4;
    var sigill = -5;
    var sigint = -6;
    var sigkill = -7;
    var sigpipe = -8;
    var sigquit = -9;
    var sigsegv = -10;
    var sigterm = -11;
    var sigusr1 = -12;
    var sigusr2 = -13;
    var sigchld = -14;
    var sigcont = -15;
    var sigstop = -16;
    var sigtstp = -17;
    var sigttin = -18;
    var sigttou = -19;
    var sigvtalrm = -20;
    var sigprof = -21;
    var sigbus = -22;
    var sigpoll = -23;
    var sigsys = -24;
    var sigtrap = -25;
    var sigurg = -26;
    var sigxcpu = -27;
    var sigxfsz = -28;
    var ocaml_version = "4.12.0+BS";
    function enable_runtime_warnings(prim) {
      return Caml_external_polyfill.resolve("caml_ml_enable_runtime_warnings")(prim);
    }
    function runtime_warnings_enabled(prim) {
      return Caml_external_polyfill.resolve("caml_ml_runtime_warnings_enabled")(prim);
    }
    exports.executable_name = executable_name;
    exports.getenv_opt = getenv_opt;
    exports.interactive = interactive;
    exports.os_type = os_type;
    exports.backend_type = backend_type;
    exports.unix = unix;
    exports.win32 = win32;
    exports.cygwin = cygwin;
    exports.word_size = word_size;
    exports.int_size = int_size;
    exports.big_endian = big_endian;
    exports.max_string_length = max_string_length;
    exports.max_array_length = max_array_length;
    exports.max_floatarray_length = max_floatarray_length;
    exports.set_signal = set_signal;
    exports.sigabrt = sigabrt;
    exports.sigalrm = sigalrm;
    exports.sigfpe = sigfpe;
    exports.sighup = sighup;
    exports.sigill = sigill;
    exports.sigint = sigint;
    exports.sigkill = sigkill;
    exports.sigpipe = sigpipe;
    exports.sigquit = sigquit;
    exports.sigsegv = sigsegv;
    exports.sigterm = sigterm;
    exports.sigusr1 = sigusr1;
    exports.sigusr2 = sigusr2;
    exports.sigchld = sigchld;
    exports.sigcont = sigcont;
    exports.sigstop = sigstop;
    exports.sigtstp = sigtstp;
    exports.sigttin = sigttin;
    exports.sigttou = sigttou;
    exports.sigvtalrm = sigvtalrm;
    exports.sigprof = sigprof;
    exports.sigbus = sigbus;
    exports.sigpoll = sigpoll;
    exports.sigsys = sigsys;
    exports.sigtrap = sigtrap;
    exports.sigurg = sigurg;
    exports.sigxcpu = sigxcpu;
    exports.sigxfsz = sigxfsz;
    exports.Break = Break;
    exports.catch_break = catch_break;
    exports.ocaml_version = ocaml_version;
    exports.enable_runtime_warnings = enable_runtime_warnings;
    exports.runtime_warnings_enabled = runtime_warnings_enabled;
    exports.Immediate64 = Immediate64;
  });
  // ../../.esy/3/b/melange-388c5d45/default/lib/js/caml.js
  var require_caml = __commonJS(exports => {
    "use strict";
    function caml_int_compare(x, y) {
      if (x < y) {
        return -1;
      } else if (x === y) {
        return 0;
      } else {
        return 1;
      }
    }
    function caml_bool_compare(x, y) {
      if (x) {
        if (y) {
          return 0;
        } else {
          return 1;
        }
      } else if (y) {
        return -1;
      } else {
        return 0;
      }
    }
    function caml_float_compare(x, y) {
      if (x === y) {
        return 0;
      } else if (x < y) {
        return -1;
      } else if (x > y || x === x) {
        return 1;
      } else if (y === y) {
        return -1;
      } else {
        return 0;
      }
    }
    function caml_string_compare(s1, s2) {
      if (s1 === s2) {
        return 0;
      } else if (s1 < s2) {
        return -1;
      } else {
        return 1;
      }
    }
    function caml_bool_min(x, y) {
      if (x) {
        return y;
      } else {
        return x;
      }
    }
    function caml_int_min(x, y) {
      if (x < y) {
        return x;
      } else {
        return y;
      }
    }
    function caml_float_min(x, y) {
      if (x < y) {
        return x;
      } else {
        return y;
      }
    }
    function caml_string_min(x, y) {
      if (x < y) {
        return x;
      } else {
        return y;
      }
    }
    function caml_int32_min(x, y) {
      if (x < y) {
        return x;
      } else {
        return y;
      }
    }
    function caml_bool_max(x, y) {
      if (x) {
        return x;
      } else {
        return y;
      }
    }
    function caml_int_max(x, y) {
      if (x > y) {
        return x;
      } else {
        return y;
      }
    }
    function caml_float_max(x, y) {
      if (x > y) {
        return x;
      } else {
        return y;
      }
    }
    function caml_string_max(x, y) {
      if (x > y) {
        return x;
      } else {
        return y;
      }
    }
    function caml_int32_max(x, y) {
      if (x > y) {
        return x;
      } else {
        return y;
      }
    }
    function i64_eq(x, y) {
      if (x[1] === y[1]) {
        return x[0] === y[0];
      } else {
        return false;
      }
    }
    function i64_ge(param, param$1) {
      var other_hi = param$1[0];
      var hi = param[0];
      if (hi > other_hi) {
        return true;
      } else if (hi < other_hi) {
        return false;
      } else {
        return param[1] >= param$1[1];
      }
    }
    function i64_neq(x, y) {
      return !i64_eq(x, y);
    }
    function i64_lt(x, y) {
      return !i64_ge(x, y);
    }
    function i64_gt(x, y) {
      if (x[0] > y[0]) {
        return true;
      } else if (x[0] < y[0]) {
        return false;
      } else {
        return x[1] > y[1];
      }
    }
    function i64_le(x, y) {
      return !i64_gt(x, y);
    }
    function i64_min(x, y) {
      if (i64_ge(x, y)) {
        return y;
      } else {
        return x;
      }
    }
    function i64_max(x, y) {
      if (i64_gt(x, y)) {
        return x;
      } else {
        return y;
      }
    }
    exports.caml_int_compare = caml_int_compare;
    exports.caml_bool_compare = caml_bool_compare;
    exports.caml_float_compare = caml_float_compare;
    exports.caml_string_compare = caml_string_compare;
    exports.caml_bool_min = caml_bool_min;
    exports.caml_int_min = caml_int_min;
    exports.caml_float_min = caml_float_min;
    exports.caml_string_min = caml_string_min;
    exports.caml_int32_min = caml_int32_min;
    exports.caml_bool_max = caml_bool_max;
    exports.caml_int_max = caml_int_max;
    exports.caml_float_max = caml_float_max;
    exports.caml_string_max = caml_string_max;
    exports.caml_int32_max = caml_int32_max;
    exports.i64_eq = i64_eq;
    exports.i64_neq = i64_neq;
    exports.i64_lt = i64_lt;
    exports.i64_gt = i64_gt;
    exports.i64_le = i64_le;
    exports.i64_ge = i64_ge;
    exports.i64_min = i64_min;
    exports.i64_max = i64_max;
  });
  // ../../.esy/3/b/melange-388c5d45/default/lib/js/caml_array.js
  var require_caml_array = __commonJS(exports => {
    "use strict";
    function sub(x, offset, len2) {
      var result = new Array(len2);
      var j = 0;
      var i = offset;
      while (j < len2) {
        result[j] = x[i];
        j = j + 1 | 0;
        i = i + 1 | 0;
      }
      ;
      return result;
    }
    function len(_acc, _l) {
      while (true) {
        var l = _l;
        var acc = _acc;
        if (!l) {
          return acc;
        }
        _l = l.tl;
        _acc = l.hd.length + acc | 0;
        continue;
      }
      ;
    }
    function fill(arr, _i, _l) {
      while (true) {
        var l = _l;
        var i = _i;
        if (!l) {
          return;
        }
        var x = l.hd;
        var l$1 = x.length;
        var k = i;
        var j = 0;
        while (j < l$1) {
          arr[k] = x[j];
          k = k + 1 | 0;
          j = j + 1 | 0;
        }
        ;
        _l = l.tl;
        _i = k;
        continue;
      }
      ;
    }
    function concat(l) {
      var v = len(0, l);
      var result = new Array(v);
      fill(result, 0, l);
      return result;
    }
    function set(xs, index, newval) {
      if (index < 0 || index >= xs.length) {
        throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "index out of bounds",
          Error: new Error()
        };
      }
      xs[index] = newval;
    }
    function get(xs, index) {
      if (index < 0 || index >= xs.length) {
        throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "index out of bounds",
          Error: new Error()
        };
      }
      return xs[index];
    }
    function make(len2, init) {
      var b = new Array(len2);
      for (var i = 0; i < len2; ++i) {
        b[i] = init;
      }
      return b;
    }
    function make_float(len2) {
      var b = new Array(len2);
      for (var i = 0; i < len2; ++i) {
        b[i] = 0;
      }
      return b;
    }
    function blit(a1, i1, a2, i2, len2) {
      if (i2 <= i1) {
        for (var j = 0; j < len2; ++j) {
          a2[j + i2 | 0] = a1[j + i1 | 0];
        }
        return;
      }
      for (var j$1 = len2 - 1 | 0; j$1 >= 0; --j$1) {
        a2[j$1 + i2 | 0] = a1[j$1 + i1 | 0];
      }
    }
    function dup(prim) {
      return prim.slice(0);
    }
    exports.dup = dup;
    exports.sub = sub;
    exports.concat = concat;
    exports.make = make;
    exports.make_float = make_float;
    exports.blit = blit;
    exports.get = get;
    exports.set = set;
  });
  // ../../.esy/3/b/melange-388c5d45/default/lib/js/curry.js
  var require_curry = __commonJS(exports => {
    "use strict";
    var Caml_array = require_caml_array();
    function app(_f, _args) {
      while (true) {
        var args = _args;
        var f = _f;
        var init_arity = f.length;
        var arity = init_arity === 0 ? 1 : init_arity;
        var len = args.length;
        var d = arity - len | 0;
        if (d === 0) {
          return f.apply(null, args);
        }
        if (d >= 0) {
          return (function (f2, args2) {
            return function (x) {
              return app(f2, args2.concat([x]));
            };
          })(f, args);
        }
        _args = Caml_array.sub(args, arity, -d | 0);
        _f = f.apply(null, Caml_array.sub(args, 0, arity));
        continue;
      }
      ;
    }
    function _1(o, a0) {
      var arity = o.length;
      if (arity === 1) {
        return o(a0);
      } else {
        switch (arity) {
          case 1:
            return o(a0);
          case 2:
            return function (param) {
              return o(a0, param);
            };
          case 3:
            return function (param, param$1) {
              return o(a0, param, param$1);
            };
          case 4:
            return function (param, param$1, param$2) {
              return o(a0, param, param$1, param$2);
            };
          case 5:
            return function (param, param$1, param$2, param$3) {
              return o(a0, param, param$1, param$2, param$3);
            };
          case 6:
            return function (param, param$1, param$2, param$3, param$4) {
              return o(a0, param, param$1, param$2, param$3, param$4);
            };
          case 7:
            return function (param, param$1, param$2, param$3, param$4, param$5) {
              return o(a0, param, param$1, param$2, param$3, param$4, param$5);
            };
          default:
            return app(o, [a0]);
        }
      }
    }
    function __1(o) {
      var arity = o.length;
      if (arity === 1) {
        return o;
      } else {
        return function (a0) {
          return _1(o, a0);
        };
      }
    }
    function _2(o, a0, a1) {
      var arity = o.length;
      if (arity === 2) {
        return o(a0, a1);
      } else {
        switch (arity) {
          case 1:
            return app(o(a0), [a1]);
          case 2:
            return o(a0, a1);
          case 3:
            return function (param) {
              return o(a0, a1, param);
            };
          case 4:
            return function (param, param$1) {
              return o(a0, a1, param, param$1);
            };
          case 5:
            return function (param, param$1, param$2) {
              return o(a0, a1, param, param$1, param$2);
            };
          case 6:
            return function (param, param$1, param$2, param$3) {
              return o(a0, a1, param, param$1, param$2, param$3);
            };
          case 7:
            return function (param, param$1, param$2, param$3, param$4) {
              return o(a0, a1, param, param$1, param$2, param$3, param$4);
            };
          default:
            return app(o, [a0, a1]);
        }
      }
    }
    function __2(o) {
      var arity = o.length;
      if (arity === 2) {
        return o;
      } else {
        return function (a0, a1) {
          return _2(o, a0, a1);
        };
      }
    }
    function _3(o, a0, a1, a2) {
      var arity = o.length;
      if (arity === 3) {
        return o(a0, a1, a2);
      } else {
        switch (arity) {
          case 1:
            return app(o(a0), [a1, a2]);
          case 2:
            return app(o(a0, a1), [a2]);
          case 3:
            return o(a0, a1, a2);
          case 4:
            return function (param) {
              return o(a0, a1, a2, param);
            };
          case 5:
            return function (param, param$1) {
              return o(a0, a1, a2, param, param$1);
            };
          case 6:
            return function (param, param$1, param$2) {
              return o(a0, a1, a2, param, param$1, param$2);
            };
          case 7:
            return function (param, param$1, param$2, param$3) {
              return o(a0, a1, a2, param, param$1, param$2, param$3);
            };
          default:
            return app(o, [a0, a1, a2]);
        }
      }
    }
    function __3(o) {
      var arity = o.length;
      if (arity === 3) {
        return o;
      } else {
        return function (a0, a1, a2) {
          return _3(o, a0, a1, a2);
        };
      }
    }
    function _4(o, a0, a1, a2, a3) {
      var arity = o.length;
      if (arity === 4) {
        return o(a0, a1, a2, a3);
      } else {
        switch (arity) {
          case 1:
            return app(o(a0), [a1, a2, a3]);
          case 2:
            return app(o(a0, a1), [a2, a3]);
          case 3:
            return app(o(a0, a1, a2), [a3]);
          case 4:
            return o(a0, a1, a2, a3);
          case 5:
            return function (param) {
              return o(a0, a1, a2, a3, param);
            };
          case 6:
            return function (param, param$1) {
              return o(a0, a1, a2, a3, param, param$1);
            };
          case 7:
            return function (param, param$1, param$2) {
              return o(a0, a1, a2, a3, param, param$1, param$2);
            };
          default:
            return app(o, [a0, a1, a2, a3]);
        }
      }
    }
    function __4(o) {
      var arity = o.length;
      if (arity === 4) {
        return o;
      } else {
        return function (a0, a1, a2, a3) {
          return _4(o, a0, a1, a2, a3);
        };
      }
    }
    function _5(o, a0, a1, a2, a3, a4) {
      var arity = o.length;
      if (arity === 5) {
        return o(a0, a1, a2, a3, a4);
      } else {
        switch (arity) {
          case 1:
            return app(o(a0), [a1, a2, a3, a4]);
          case 2:
            return app(o(a0, a1), [a2, a3, a4]);
          case 3:
            return app(o(a0, a1, a2), [a3, a4]);
          case 4:
            return app(o(a0, a1, a2, a3), [a4]);
          case 5:
            return o(a0, a1, a2, a3, a4);
          case 6:
            return function (param) {
              return o(a0, a1, a2, a3, a4, param);
            };
          case 7:
            return function (param, param$1) {
              return o(a0, a1, a2, a3, a4, param, param$1);
            };
          default:
            return app(o, [a0, a1, a2, a3, a4]);
        }
      }
    }
    function __5(o) {
      var arity = o.length;
      if (arity === 5) {
        return o;
      } else {
        return function (a0, a1, a2, a3, a4) {
          return _5(o, a0, a1, a2, a3, a4);
        };
      }
    }
    function _6(o, a0, a1, a2, a3, a4, a5) {
      var arity = o.length;
      if (arity === 6) {
        return o(a0, a1, a2, a3, a4, a5);
      } else {
        switch (arity) {
          case 1:
            return app(o(a0), [a1, a2, a3, a4, a5]);
          case 2:
            return app(o(a0, a1), [a2, a3, a4, a5]);
          case 3:
            return app(o(a0, a1, a2), [a3, a4, a5]);
          case 4:
            return app(o(a0, a1, a2, a3), [a4, a5]);
          case 5:
            return app(o(a0, a1, a2, a3, a4), [a5]);
          case 6:
            return o(a0, a1, a2, a3, a4, a5);
          case 7:
            return function (param) {
              return o(a0, a1, a2, a3, a4, a5, param);
            };
          default:
            return app(o, [a0, a1, a2, a3, a4, a5]);
        }
      }
    }
    function __6(o) {
      var arity = o.length;
      if (arity === 6) {
        return o;
      } else {
        return function (a0, a1, a2, a3, a4, a5) {
          return _6(o, a0, a1, a2, a3, a4, a5);
        };
      }
    }
    function _7(o, a0, a1, a2, a3, a4, a5, a6) {
      var arity = o.length;
      if (arity === 7) {
        return o(a0, a1, a2, a3, a4, a5, a6);
      } else {
        switch (arity) {
          case 1:
            return app(o(a0), [a1, a2, a3, a4, a5, a6]);
          case 2:
            return app(o(a0, a1), [a2, a3, a4, a5, a6]);
          case 3:
            return app(o(a0, a1, a2), [a3, a4, a5, a6]);
          case 4:
            return app(o(a0, a1, a2, a3), [a4, a5, a6]);
          case 5:
            return app(o(a0, a1, a2, a3, a4), [a5, a6]);
          case 6:
            return app(o(a0, a1, a2, a3, a4, a5), [a6]);
          case 7:
            return o(a0, a1, a2, a3, a4, a5, a6);
          default:
            return app(o, [a0, a1, a2, a3, a4, a5, a6]);
        }
      }
    }
    function __7(o) {
      var arity = o.length;
      if (arity === 7) {
        return o;
      } else {
        return function (a0, a1, a2, a3, a4, a5, a6) {
          return _7(o, a0, a1, a2, a3, a4, a5, a6);
        };
      }
    }
    function _8(o, a0, a1, a2, a3, a4, a5, a6, a7) {
      var arity = o.length;
      if (arity === 8) {
        return o(a0, a1, a2, a3, a4, a5, a6, a7);
      } else {
        switch (arity) {
          case 1:
            return app(o(a0), [a1, a2, a3, a4, a5, a6, a7]);
          case 2:
            return app(o(a0, a1), [a2, a3, a4, a5, a6, a7]);
          case 3:
            return app(o(a0, a1, a2), [a3, a4, a5, a6, a7]);
          case 4:
            return app(o(a0, a1, a2, a3), [a4, a5, a6, a7]);
          case 5:
            return app(o(a0, a1, a2, a3, a4), [a5, a6, a7]);
          case 6:
            return app(o(a0, a1, a2, a3, a4, a5), [a6, a7]);
          case 7:
            return app(o(a0, a1, a2, a3, a4, a5, a6), [a7]);
          default:
            return app(o, [a0, a1, a2, a3, a4, a5, a6, a7]);
        }
      }
    }
    function __8(o) {
      var arity = o.length;
      if (arity === 8) {
        return o;
      } else {
        return function (a0, a1, a2, a3, a4, a5, a6, a7) {
          return _8(o, a0, a1, a2, a3, a4, a5, a6, a7);
        };
      }
    }
    exports.app = app;
    exports._1 = _1;
    exports.__1 = __1;
    exports._2 = _2;
    exports.__2 = __2;
    exports._3 = _3;
    exports.__3 = __3;
    exports._4 = _4;
    exports.__4 = __4;
    exports._5 = _5;
    exports.__5 = __5;
    exports._6 = _6;
    exports.__6 = __6;
    exports._7 = _7;
    exports.__7 = __7;
    exports._8 = _8;
    exports.__8 = __8;
  });
  // ../../.esy/3/b/melange-388c5d45/default/lib/js/js_dict.js
  var require_js_dict = __commonJS(exports => {
    "use strict";
    var Caml_option = require_caml_option();
    function get(dict, k) {
      if ((k in dict)) {
        return Caml_option.some(dict[k]);
      }
    }
    var unsafeDeleteKey = function (dict, key) {
      delete dict[key];
    };
    function entries(dict) {
      var keys = Object.keys(dict);
      var l = keys.length;
      var values2 = new Array(l);
      for (var i = 0; i < l; ++i) {
        var key = keys[i];
        values2[i] = [key, dict[key]];
      }
      return values2;
    }
    function values(dict) {
      var keys = Object.keys(dict);
      var l = keys.length;
      var values$1 = new Array(l);
      for (var i = 0; i < l; ++i) {
        values$1[i] = dict[keys[i]];
      }
      return values$1;
    }
    function fromList(entries2) {
      var dict = {};
      var _param = entries2;
      while (true) {
        var param = _param;
        if (!param) {
          return dict;
        }
        var match = param.hd;
        dict[match[0]] = match[1];
        _param = param.tl;
        continue;
      }
      ;
    }
    function fromArray(entries2) {
      var dict = {};
      var l = entries2.length;
      for (var i = 0; i < l; ++i) {
        var match = entries2[i];
        dict[match[0]] = match[1];
      }
      return dict;
    }
    function map(f, source) {
      var target = {};
      var keys = Object.keys(source);
      var l = keys.length;
      for (var i = 0; i < l; ++i) {
        var key = keys[i];
        target[key] = f(source[key]);
      }
      return target;
    }
    exports.get = get;
    exports.unsafeDeleteKey = unsafeDeleteKey;
    exports.entries = entries;
    exports.values = values;
    exports.fromList = fromList;
    exports.fromArray = fromArray;
    exports.map = map;
  });
  // ../../.esy/3/b/melange-388c5d45/default/lib/js/js_int.js
  var require_js_int = __commonJS(exports => {
    "use strict";
    function equal(x, y) {
      return x === y;
    }
    var max = 2147483647;
    var min = -2147483648;
    exports.equal = equal;
    exports.max = max;
    exports.min = min;
  });
  // ../../.esy/3/b/melange-388c5d45/default/lib/js/js_math.js
  var require_js_math = __commonJS(exports => {
    "use strict";
    var Js_int = require_js_int();
    function unsafe_ceil(prim) {
      return Math.ceil(prim);
    }
    function ceil_int(f) {
      if (f > Js_int.max) {
        return Js_int.max;
      } else if (f < Js_int.min) {
        return Js_int.min;
      } else {
        return Math.ceil(f);
      }
    }
    function unsafe_floor(prim) {
      return Math.floor(prim);
    }
    function floor_int(f) {
      if (f > Js_int.max) {
        return Js_int.max;
      } else if (f < Js_int.min) {
        return Js_int.min;
      } else {
        return Math.floor(f);
      }
    }
    function random_int(min, max) {
      return floor_int(Math.random() * (max - min | 0)) + min | 0;
    }
    var ceil = ceil_int;
    var floor = floor_int;
    exports.unsafe_ceil = unsafe_ceil;
    exports.ceil_int = ceil_int;
    exports.ceil = ceil;
    exports.unsafe_floor = unsafe_floor;
    exports.floor_int = floor_int;
    exports.floor = floor;
    exports.random_int = random_int;
  });
  // ../../.esy/3/b/melange-388c5d45/default/lib/js/belt_Array.js
  var require_belt_Array = __commonJS(exports => {
    "use strict";
    var Caml = require_caml();
    var Curry = require_curry();
    var Js_math = require_js_math();
    var Caml_option = require_caml_option();
    function get(arr, i) {
      if (i >= 0 && i < arr.length) {
        return Caml_option.some(arr[i]);
      }
    }
    function getExn(arr, i) {
      if (!(i >= 0 && i < arr.length)) {
        throw {
          RE_EXN_ID: "Assert_failure",
          _1: ["belt_Array.ml", 27, 4],
          Error: new Error()
        };
      }
      return arr[i];
    }
    function set(arr, i, v) {
      if (i >= 0 && i < arr.length) {
        arr[i] = v;
        return true;
      } else {
        return false;
      }
    }
    function setExn(arr, i, v) {
      if (!(i >= 0 && i < arr.length)) {
        throw {
          RE_EXN_ID: "Assert_failure",
          _1: ["belt_Array.ml", 33, 2],
          Error: new Error()
        };
      }
      arr[i] = v;
    }
    function swapUnsafe(xs, i, j) {
      var tmp = xs[i];
      xs[i] = xs[j];
      xs[j] = tmp;
    }
    function shuffleInPlace(xs) {
      var len = xs.length;
      for (var i = 0; i < len; ++i) {
        swapUnsafe(xs, i, Js_math.random_int(i, len));
      }
    }
    function shuffle(xs) {
      var result = xs.slice(0);
      shuffleInPlace(result);
      return result;
    }
    function reverseInPlace(xs) {
      var len = xs.length;
      var ofs = 0;
      for (var i = 0, i_finish = len / 2 | 0; i < i_finish; ++i) {
        swapUnsafe(xs, ofs + i | 0, ((ofs + len | 0) - i | 0) - 1 | 0);
      }
    }
    function reverse(xs) {
      var len = xs.length;
      var result = new Array(len);
      for (var i = 0; i < len; ++i) {
        result[i] = xs[(len - 1 | 0) - i | 0];
      }
      return result;
    }
    function make(l, f) {
      if (l <= 0) {
        return [];
      }
      var res = new Array(l);
      for (var i = 0; i < l; ++i) {
        res[i] = f;
      }
      return res;
    }
    function makeByU(l, f) {
      if (l <= 0) {
        return [];
      }
      var res = new Array(l);
      for (var i = 0; i < l; ++i) {
        res[i] = f(i);
      }
      return res;
    }
    function makeBy(l, f) {
      return makeByU(l, Curry.__1(f));
    }
    function makeByAndShuffleU(l, f) {
      var u = makeByU(l, f);
      shuffleInPlace(u);
      return u;
    }
    function makeByAndShuffle(l, f) {
      return makeByAndShuffleU(l, Curry.__1(f));
    }
    function range(start, finish) {
      var cut = finish - start | 0;
      if (cut < 0) {
        return [];
      }
      var arr = new Array(cut + 1 | 0);
      for (var i = 0; i <= cut; ++i) {
        arr[i] = start + i | 0;
      }
      return arr;
    }
    function rangeBy(start, finish, step) {
      var cut = finish - start | 0;
      if (cut < 0 || step <= 0) {
        return [];
      }
      var nb = (cut / step | 0) + 1 | 0;
      var arr = new Array(nb);
      var cur = start;
      for (var i = 0; i < nb; ++i) {
        arr[i] = cur;
        cur = cur + step | 0;
      }
      return arr;
    }
    function zip(xs, ys) {
      var lenx = xs.length;
      var leny = ys.length;
      var len = lenx < leny ? lenx : leny;
      var s = new Array(len);
      for (var i = 0; i < len; ++i) {
        s[i] = [xs[i], ys[i]];
      }
      return s;
    }
    function zipByU(xs, ys, f) {
      var lenx = xs.length;
      var leny = ys.length;
      var len = lenx < leny ? lenx : leny;
      var s = new Array(len);
      for (var i = 0; i < len; ++i) {
        s[i] = f(xs[i], ys[i]);
      }
      return s;
    }
    function zipBy(xs, ys, f) {
      return zipByU(xs, ys, Curry.__2(f));
    }
    function concat(a1, a2) {
      var l1 = a1.length;
      var l2 = a2.length;
      var a1a2 = new Array(l1 + l2 | 0);
      for (var i = 0; i < l1; ++i) {
        a1a2[i] = a1[i];
      }
      for (var i$1 = 0; i$1 < l2; ++i$1) {
        a1a2[l1 + i$1 | 0] = a2[i$1];
      }
      return a1a2;
    }
    function concatMany(arrs) {
      var lenArrs = arrs.length;
      var totalLen = 0;
      for (var i = 0; i < lenArrs; ++i) {
        totalLen = totalLen + arrs[i].length | 0;
      }
      var result = new Array(totalLen);
      totalLen = 0;
      for (var j = 0; j < lenArrs; ++j) {
        var cur = arrs[j];
        for (var k = 0, k_finish = cur.length; k < k_finish; ++k) {
          result[totalLen] = cur[k];
          totalLen = totalLen + 1 | 0;
        }
      }
      return result;
    }
    function slice(a, offset, len) {
      if (len <= 0) {
        return [];
      }
      var lena = a.length;
      var ofs = offset < 0 ? Caml.caml_int_max(lena + offset | 0, 0) : offset;
      var hasLen = lena - ofs | 0;
      var copyLength = hasLen < len ? hasLen : len;
      if (copyLength <= 0) {
        return [];
      }
      var result = new Array(copyLength);
      for (var i = 0; i < copyLength; ++i) {
        result[i] = a[ofs + i | 0];
      }
      return result;
    }
    function sliceToEnd(a, offset) {
      var lena = a.length;
      var ofs = offset < 0 ? Caml.caml_int_max(lena + offset | 0, 0) : offset;
      var len = lena - ofs | 0;
      var result = new Array(len);
      for (var i = 0; i < len; ++i) {
        result[i] = a[ofs + i | 0];
      }
      return result;
    }
    function fill(a, offset, len, v) {
      if (len <= 0) {
        return;
      }
      var lena = a.length;
      var ofs = offset < 0 ? Caml.caml_int_max(lena + offset | 0, 0) : offset;
      var hasLen = lena - ofs | 0;
      var fillLength = hasLen < len ? hasLen : len;
      if (fillLength <= 0) {
        return;
      }
      for (var i = ofs, i_finish = ofs + fillLength | 0; i < i_finish; ++i) {
        a[i] = v;
      }
    }
    function blitUnsafe(a1, srcofs1, a2, srcofs2, blitLength) {
      if (srcofs2 <= srcofs1) {
        for (var j = 0; j < blitLength; ++j) {
          a2[j + srcofs2 | 0] = a1[j + srcofs1 | 0];
        }
        return;
      }
      for (var j$1 = blitLength - 1 | 0; j$1 >= 0; --j$1) {
        a2[j$1 + srcofs2 | 0] = a1[j$1 + srcofs1 | 0];
      }
    }
    function blit(a1, ofs1, a2, ofs2, len) {
      var lena1 = a1.length;
      var lena2 = a2.length;
      var srcofs1 = ofs1 < 0 ? Caml.caml_int_max(lena1 + ofs1 | 0, 0) : ofs1;
      var srcofs2 = ofs2 < 0 ? Caml.caml_int_max(lena2 + ofs2 | 0, 0) : ofs2;
      var blitLength = Caml.caml_int_min(len, Caml.caml_int_min(lena1 - srcofs1 | 0, lena2 - srcofs2 | 0));
      if (srcofs2 <= srcofs1) {
        for (var j = 0; j < blitLength; ++j) {
          a2[j + srcofs2 | 0] = a1[j + srcofs1 | 0];
        }
        return;
      }
      for (var j$1 = blitLength - 1 | 0; j$1 >= 0; --j$1) {
        a2[j$1 + srcofs2 | 0] = a1[j$1 + srcofs1 | 0];
      }
    }
    function forEachU(a, f) {
      for (var i = 0, i_finish = a.length; i < i_finish; ++i) {
        f(a[i]);
      }
    }
    function forEach(a, f) {
      return forEachU(a, Curry.__1(f));
    }
    function mapU(a, f) {
      var l = a.length;
      var r = new Array(l);
      for (var i = 0; i < l; ++i) {
        r[i] = f(a[i]);
      }
      return r;
    }
    function map(a, f) {
      return mapU(a, Curry.__1(f));
    }
    function getByU(a, p) {
      var l = a.length;
      var i = 0;
      var r;
      while (r === void 0 && i < l) {
        var v = a[i];
        if (p(v)) {
          r = Caml_option.some(v);
        }
        i = i + 1 | 0;
      }
      ;
      return r;
    }
    function getBy(a, p) {
      return getByU(a, Curry.__1(p));
    }
    function getIndexByU(a, p) {
      var l = a.length;
      var i = 0;
      var r;
      while (r === void 0 && i < l) {
        var v = a[i];
        if (p(v)) {
          r = i;
        }
        i = i + 1 | 0;
      }
      ;
      return r;
    }
    function getIndexBy(a, p) {
      return getIndexByU(a, Curry.__1(p));
    }
    function keepU(a, f) {
      var l = a.length;
      var r = new Array(l);
      var j = 0;
      for (var i = 0; i < l; ++i) {
        var v = a[i];
        if (f(v)) {
          r[j] = v;
          j = j + 1 | 0;
        }
      }
      r.length = j;
      return r;
    }
    function keep(a, f) {
      return keepU(a, Curry.__1(f));
    }
    function keepWithIndexU(a, f) {
      var l = a.length;
      var r = new Array(l);
      var j = 0;
      for (var i = 0; i < l; ++i) {
        var v = a[i];
        if (f(v, i)) {
          r[j] = v;
          j = j + 1 | 0;
        }
      }
      r.length = j;
      return r;
    }
    function keepWithIndex(a, f) {
      return keepWithIndexU(a, Curry.__2(f));
    }
    function keepMapU(a, f) {
      var l = a.length;
      var r = new Array(l);
      var j = 0;
      for (var i = 0; i < l; ++i) {
        var v = a[i];
        var v$1 = f(v);
        if (v$1 !== void 0) {
          r[j] = Caml_option.valFromOption(v$1);
          j = j + 1 | 0;
        }
      }
      r.length = j;
      return r;
    }
    function keepMap(a, f) {
      return keepMapU(a, Curry.__1(f));
    }
    function forEachWithIndexU(a, f) {
      for (var i = 0, i_finish = a.length; i < i_finish; ++i) {
        f(i, a[i]);
      }
    }
    function forEachWithIndex(a, f) {
      return forEachWithIndexU(a, Curry.__2(f));
    }
    function mapWithIndexU(a, f) {
      var l = a.length;
      var r = new Array(l);
      for (var i = 0; i < l; ++i) {
        r[i] = f(i, a[i]);
      }
      return r;
    }
    function mapWithIndex(a, f) {
      return mapWithIndexU(a, Curry.__2(f));
    }
    function reduceU(a, x, f) {
      var r = x;
      for (var i = 0, i_finish = a.length; i < i_finish; ++i) {
        r = f(r, a[i]);
      }
      return r;
    }
    function reduce(a, x, f) {
      return reduceU(a, x, Curry.__2(f));
    }
    function reduceReverseU(a, x, f) {
      var r = x;
      for (var i = a.length - 1 | 0; i >= 0; --i) {
        r = f(r, a[i]);
      }
      return r;
    }
    function reduceReverse(a, x, f) {
      return reduceReverseU(a, x, Curry.__2(f));
    }
    function reduceReverse2U(a, b, x, f) {
      var r = x;
      var len = Caml.caml_int_min(a.length, b.length);
      for (var i = len - 1 | 0; i >= 0; --i) {
        r = f(r, a[i], b[i]);
      }
      return r;
    }
    function reduceReverse2(a, b, x, f) {
      return reduceReverse2U(a, b, x, Curry.__3(f));
    }
    function reduceWithIndexU(a, x, f) {
      var r = x;
      for (var i = 0, i_finish = a.length; i < i_finish; ++i) {
        r = f(r, a[i], i);
      }
      return r;
    }
    function reduceWithIndex(a, x, f) {
      return reduceWithIndexU(a, x, Curry.__3(f));
    }
    function everyU(arr, b) {
      var len = arr.length;
      var _i = 0;
      while (true) {
        var i = _i;
        if (i === len) {
          return true;
        }
        if (!b(arr[i])) {
          return false;
        }
        _i = i + 1 | 0;
        continue;
      }
      ;
    }
    function every(arr, f) {
      return everyU(arr, Curry.__1(f));
    }
    function someU(arr, b) {
      var len = arr.length;
      var _i = 0;
      while (true) {
        var i = _i;
        if (i === len) {
          return false;
        }
        if (b(arr[i])) {
          return true;
        }
        _i = i + 1 | 0;
        continue;
      }
      ;
    }
    function some(arr, f) {
      return someU(arr, Curry.__1(f));
    }
    function everyAux2(arr1, arr2, _i, b, len) {
      while (true) {
        var i = _i;
        if (i === len) {
          return true;
        }
        if (!b(arr1[i], arr2[i])) {
          return false;
        }
        _i = i + 1 | 0;
        continue;
      }
      ;
    }
    function every2U(a, b, p) {
      return everyAux2(a, b, 0, p, Caml.caml_int_min(a.length, b.length));
    }
    function every2(a, b, p) {
      return every2U(a, b, Curry.__2(p));
    }
    function some2U(a, b, p) {
      var _i = 0;
      var len = Caml.caml_int_min(a.length, b.length);
      while (true) {
        var i = _i;
        if (i === len) {
          return false;
        }
        if (p(a[i], b[i])) {
          return true;
        }
        _i = i + 1 | 0;
        continue;
      }
      ;
    }
    function some2(a, b, p) {
      return some2U(a, b, Curry.__2(p));
    }
    function eqU(a, b, p) {
      var lena = a.length;
      var lenb = b.length;
      if (lena === lenb) {
        return everyAux2(a, b, 0, p, lena);
      } else {
        return false;
      }
    }
    function eq(a, b, p) {
      return eqU(a, b, Curry.__2(p));
    }
    function cmpU(a, b, p) {
      var lena = a.length;
      var lenb = b.length;
      if (lena > lenb) {
        return 1;
      } else if (lena < lenb) {
        return -1;
      } else {
        var _i = 0;
        while (true) {
          var i = _i;
          if (i === lena) {
            return 0;
          }
          var c = p(a[i], b[i]);
          if (c !== 0) {
            return c;
          }
          _i = i + 1 | 0;
          continue;
        }
        ;
      }
    }
    function cmp(a, b, p) {
      return cmpU(a, b, Curry.__2(p));
    }
    function partitionU(a, f) {
      var l = a.length;
      var i = 0;
      var j = 0;
      var a1 = new Array(l);
      var a2 = new Array(l);
      for (var ii = 0; ii < l; ++ii) {
        var v = a[ii];
        if (f(v)) {
          a1[i] = v;
          i = i + 1 | 0;
        } else {
          a2[j] = v;
          j = j + 1 | 0;
        }
      }
      a1.length = i;
      a2.length = j;
      return [a1, a2];
    }
    function partition(a, f) {
      return partitionU(a, Curry.__1(f));
    }
    function unzip(a) {
      var l = a.length;
      var a1 = new Array(l);
      var a2 = new Array(l);
      for (var i = 0; i < l; ++i) {
        var match = a[i];
        a1[i] = match[0];
        a2[i] = match[1];
      }
      return [a1, a2];
    }
    function joinWithU(a, sep, toString) {
      var l = a.length;
      if (l === 0) {
        return "";
      }
      var lastIndex = l - 1 | 0;
      var _i = 0;
      var _res = "";
      while (true) {
        var res = _res;
        var i = _i;
        if (i === lastIndex) {
          return res + toString(a[i]);
        }
        _res = res + (toString(a[i]) + sep);
        _i = i + 1 | 0;
        continue;
      }
      ;
    }
    function joinWith(a, sep, toString) {
      return joinWithU(a, sep, Curry.__1(toString));
    }
    exports.get = get;
    exports.getExn = getExn;
    exports.set = set;
    exports.setExn = setExn;
    exports.shuffleInPlace = shuffleInPlace;
    exports.shuffle = shuffle;
    exports.reverseInPlace = reverseInPlace;
    exports.reverse = reverse;
    exports.make = make;
    exports.range = range;
    exports.rangeBy = rangeBy;
    exports.makeByU = makeByU;
    exports.makeBy = makeBy;
    exports.makeByAndShuffleU = makeByAndShuffleU;
    exports.makeByAndShuffle = makeByAndShuffle;
    exports.zip = zip;
    exports.zipByU = zipByU;
    exports.zipBy = zipBy;
    exports.unzip = unzip;
    exports.concat = concat;
    exports.concatMany = concatMany;
    exports.slice = slice;
    exports.sliceToEnd = sliceToEnd;
    exports.fill = fill;
    exports.blit = blit;
    exports.blitUnsafe = blitUnsafe;
    exports.forEachU = forEachU;
    exports.forEach = forEach;
    exports.mapU = mapU;
    exports.map = map;
    exports.getByU = getByU;
    exports.getBy = getBy;
    exports.getIndexByU = getIndexByU;
    exports.getIndexBy = getIndexBy;
    exports.keepU = keepU;
    exports.keep = keep;
    exports.keepWithIndexU = keepWithIndexU;
    exports.keepWithIndex = keepWithIndex;
    exports.keepMapU = keepMapU;
    exports.keepMap = keepMap;
    exports.forEachWithIndexU = forEachWithIndexU;
    exports.forEachWithIndex = forEachWithIndex;
    exports.mapWithIndexU = mapWithIndexU;
    exports.mapWithIndex = mapWithIndex;
    exports.partitionU = partitionU;
    exports.partition = partition;
    exports.reduceU = reduceU;
    exports.reduce = reduce;
    exports.reduceReverseU = reduceReverseU;
    exports.reduceReverse = reduceReverse;
    exports.reduceReverse2U = reduceReverse2U;
    exports.reduceReverse2 = reduceReverse2;
    exports.reduceWithIndexU = reduceWithIndexU;
    exports.reduceWithIndex = reduceWithIndex;
    exports.joinWithU = joinWithU;
    exports.joinWith = joinWith;
    exports.someU = someU;
    exports.some = some;
    exports.everyU = everyU;
    exports.every = every;
    exports.every2U = every2U;
    exports.every2 = every2;
    exports.some2U = some2U;
    exports.some2 = some2;
    exports.cmpU = cmpU;
    exports.cmp = cmp;
    exports.eqU = eqU;
    exports.eq = eq;
  });
  // ../../.esy/3/b/melange-388c5d45/default/lib/js/belt_SortArray.js
  var require_belt_SortArray = __commonJS(exports => {
    "use strict";
    var Curry = require_curry();
    var Belt_Array = require_belt_Array();
    function sortedLengthAuxMore(xs, _prec, _acc, len, lt) {
      while (true) {
        var acc = _acc;
        var prec = _prec;
        if (acc >= len) {
          return acc;
        }
        var v = xs[acc];
        if (!lt(v, prec)) {
          return acc;
        }
        _acc = acc + 1 | 0;
        _prec = v;
        continue;
      }
      ;
    }
    function strictlySortedLengthU(xs, lt) {
      var len = xs.length;
      if (len === 0 || len === 1) {
        return len;
      }
      var x0 = xs[0];
      var x1 = xs[1];
      if (lt(x0, x1)) {
        var _prec = x1;
        var _acc = 2;
        while (true) {
          var acc = _acc;
          var prec = _prec;
          if (acc >= len) {
            return acc;
          }
          var v = xs[acc];
          if (!lt(prec, v)) {
            return acc;
          }
          _acc = acc + 1 | 0;
          _prec = v;
          continue;
        }
        ;
      } else if (lt(x1, x0)) {
        return -sortedLengthAuxMore(xs, x1, 2, len, lt) | 0;
      } else {
        return 1;
      }
    }
    function strictlySortedLength(xs, lt) {
      return strictlySortedLengthU(xs, Curry.__2(lt));
    }
    function isSortedU(a, cmp) {
      var len = a.length;
      if (len === 0) {
        return true;
      } else {
        var _i = 0;
        var last_bound = len - 1 | 0;
        while (true) {
          var i = _i;
          if (i === last_bound) {
            return true;
          }
          if (cmp(a[i], a[i + 1 | 0]) > 0) {
            return false;
          }
          _i = i + 1 | 0;
          continue;
        }
        ;
      }
    }
    function isSorted(a, cmp) {
      return isSortedU(a, Curry.__2(cmp));
    }
    function merge(src, src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs, cmp) {
      var src1r = src1ofs + src1len | 0;
      var src2r = src2ofs + src2len | 0;
      var _i1 = src1ofs;
      var _s1 = src[src1ofs];
      var _i2 = src2ofs;
      var _s2 = src2[src2ofs];
      var _d = dstofs;
      while (true) {
        var d = _d;
        var s2 = _s2;
        var i2 = _i2;
        var s1 = _s1;
        var i1 = _i1;
        if (cmp(s1, s2) <= 0) {
          dst[d] = s1;
          var i1$1 = i1 + 1 | 0;
          if (i1$1 >= src1r) {
            return Belt_Array.blitUnsafe(src2, i2, dst, d + 1 | 0, src2r - i2 | 0);
          }
          _d = d + 1 | 0;
          _s1 = src[i1$1];
          _i1 = i1$1;
          continue;
        }
        dst[d] = s2;
        var i2$1 = i2 + 1 | 0;
        if (i2$1 >= src2r) {
          return Belt_Array.blitUnsafe(src, i1, dst, d + 1 | 0, src1r - i1 | 0);
        }
        _d = d + 1 | 0;
        _s2 = src2[i2$1];
        _i2 = i2$1;
        continue;
      }
      ;
    }
    function unionU(src, src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs, cmp) {
      var src1r = src1ofs + src1len | 0;
      var src2r = src2ofs + src2len | 0;
      var _i1 = src1ofs;
      var _s1 = src[src1ofs];
      var _i2 = src2ofs;
      var _s2 = src2[src2ofs];
      var _d = dstofs;
      while (true) {
        var d = _d;
        var s2 = _s2;
        var i2 = _i2;
        var s1 = _s1;
        var i1 = _i1;
        var c = cmp(s1, s2);
        if (c < 0) {
          dst[d] = s1;
          var i1$1 = i1 + 1 | 0;
          var d$1 = d + 1 | 0;
          if (i1$1 < src1r) {
            _d = d$1;
            _s1 = src[i1$1];
            _i1 = i1$1;
            continue;
          }
          Belt_Array.blitUnsafe(src2, i2, dst, d$1, src2r - i2 | 0);
          return (d$1 + src2r | 0) - i2 | 0;
        }
        if (c === 0) {
          dst[d] = s1;
          var i1$2 = i1 + 1 | 0;
          var i2$1 = i2 + 1 | 0;
          var d$2 = d + 1 | 0;
          if (!(i1$2 < src1r && i2$1 < src2r)) {
            if (i1$2 === src1r) {
              Belt_Array.blitUnsafe(src2, i2$1, dst, d$2, src2r - i2$1 | 0);
              return (d$2 + src2r | 0) - i2$1 | 0;
            } else {
              Belt_Array.blitUnsafe(src, i1$2, dst, d$2, src1r - i1$2 | 0);
              return (d$2 + src1r | 0) - i1$2 | 0;
            }
          }
          _d = d$2;
          _s2 = src2[i2$1];
          _i2 = i2$1;
          _s1 = src[i1$2];
          _i1 = i1$2;
          continue;
        }
        dst[d] = s2;
        var i2$2 = i2 + 1 | 0;
        var d$3 = d + 1 | 0;
        if (i2$2 < src2r) {
          _d = d$3;
          _s2 = src2[i2$2];
          _i2 = i2$2;
          continue;
        }
        Belt_Array.blitUnsafe(src, i1, dst, d$3, src1r - i1 | 0);
        return (d$3 + src1r | 0) - i1 | 0;
      }
      ;
    }
    function union(src, src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs, cmp) {
      return unionU(src, src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs, Curry.__2(cmp));
    }
    function intersectU(src, src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs, cmp) {
      var src1r = src1ofs + src1len | 0;
      var src2r = src2ofs + src2len | 0;
      var _i1 = src1ofs;
      var _s1 = src[src1ofs];
      var _i2 = src2ofs;
      var _s2 = src2[src2ofs];
      var _d = dstofs;
      while (true) {
        var d = _d;
        var s2 = _s2;
        var i2 = _i2;
        var s1 = _s1;
        var i1 = _i1;
        var c = cmp(s1, s2);
        if (c < 0) {
          var i1$1 = i1 + 1 | 0;
          if (i1$1 >= src1r) {
            return d;
          }
          _s1 = src[i1$1];
          _i1 = i1$1;
          continue;
        }
        if (c === 0) {
          dst[d] = s1;
          var i1$2 = i1 + 1 | 0;
          var i2$1 = i2 + 1 | 0;
          var d$1 = d + 1 | 0;
          if (!(i1$2 < src1r && i2$1 < src2r)) {
            return d$1;
          }
          _d = d$1;
          _s2 = src2[i2$1];
          _i2 = i2$1;
          _s1 = src[i1$2];
          _i1 = i1$2;
          continue;
        }
        var i2$2 = i2 + 1 | 0;
        if (i2$2 >= src2r) {
          return d;
        }
        _s2 = src2[i2$2];
        _i2 = i2$2;
        continue;
      }
      ;
    }
    function intersect(src, src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs, cmp) {
      return intersectU(src, src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs, Curry.__2(cmp));
    }
    function diffU(src, src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs, cmp) {
      var src1r = src1ofs + src1len | 0;
      var src2r = src2ofs + src2len | 0;
      var _i1 = src1ofs;
      var _s1 = src[src1ofs];
      var _i2 = src2ofs;
      var _s2 = src2[src2ofs];
      var _d = dstofs;
      while (true) {
        var d = _d;
        var s2 = _s2;
        var i2 = _i2;
        var s1 = _s1;
        var i1 = _i1;
        var c = cmp(s1, s2);
        if (c < 0) {
          dst[d] = s1;
          var d$1 = d + 1 | 0;
          var i1$1 = i1 + 1 | 0;
          if (i1$1 >= src1r) {
            return d$1;
          }
          _d = d$1;
          _s1 = src[i1$1];
          _i1 = i1$1;
          continue;
        }
        if (c === 0) {
          var i1$2 = i1 + 1 | 0;
          var i2$1 = i2 + 1 | 0;
          if (!(i1$2 < src1r && i2$1 < src2r)) {
            if (i1$2 === src1r) {
              return d;
            } else {
              Belt_Array.blitUnsafe(src, i1$2, dst, d, src1r - i1$2 | 0);
              return (d + src1r | 0) - i1$2 | 0;
            }
          }
          _s2 = src2[i2$1];
          _i2 = i2$1;
          _s1 = src[i1$2];
          _i1 = i1$2;
          continue;
        }
        var i2$2 = i2 + 1 | 0;
        if (i2$2 < src2r) {
          _s2 = src2[i2$2];
          _i2 = i2$2;
          continue;
        }
        Belt_Array.blitUnsafe(src, i1, dst, d, src1r - i1 | 0);
        return (d + src1r | 0) - i1 | 0;
      }
      ;
    }
    function diff(src, src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs, cmp) {
      return diffU(src, src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs, Curry.__2(cmp));
    }
    function insertionSort(src, srcofs, dst, dstofs, len, cmp) {
      for (var i = 0; i < len; ++i) {
        var e = src[srcofs + i | 0];
        var j = (dstofs + i | 0) - 1 | 0;
        while (j >= dstofs && cmp(dst[j], e) > 0) {
          dst[j + 1 | 0] = dst[j];
          j = j - 1 | 0;
        }
        ;
        dst[j + 1 | 0] = e;
      }
    }
    function sortTo(src, srcofs, dst, dstofs, len, cmp) {
      if (len <= 5) {
        return insertionSort(src, srcofs, dst, dstofs, len, cmp);
      }
      var l1 = len / 2 | 0;
      var l2 = len - l1 | 0;
      sortTo(src, srcofs + l1 | 0, dst, dstofs + l1 | 0, l2, cmp);
      sortTo(src, srcofs, src, srcofs + l2 | 0, l1, cmp);
      return merge(src, srcofs + l2 | 0, l1, dst, dstofs + l1 | 0, l2, dst, dstofs, cmp);
    }
    function stableSortInPlaceByU(a, cmp) {
      var l = a.length;
      if (l <= 5) {
        return insertionSort(a, 0, a, 0, l, cmp);
      }
      var l1 = l / 2 | 0;
      var l2 = l - l1 | 0;
      var t = new Array(l2);
      sortTo(a, l1, t, 0, l2, cmp);
      sortTo(a, 0, a, l2, l1, cmp);
      return merge(a, l2, l1, t, 0, l2, a, 0, cmp);
    }
    function stableSortInPlaceBy(a, cmp) {
      return stableSortInPlaceByU(a, Curry.__2(cmp));
    }
    function stableSortByU(a, cmp) {
      var b = a.slice(0);
      stableSortInPlaceByU(b, cmp);
      return b;
    }
    function stableSortBy(a, cmp) {
      return stableSortByU(a, Curry.__2(cmp));
    }
    function binarySearchByU(sorted, key, cmp) {
      var len = sorted.length;
      if (len === 0) {
        return -1;
      }
      var lo = sorted[0];
      var c = cmp(key, lo);
      if (c < 0) {
        return -1;
      }
      var hi = sorted[len - 1 | 0];
      var c2 = cmp(key, hi);
      if (c2 > 0) {
        return -(len + 1 | 0) | 0;
      } else {
        var _lo = 0;
        var _hi = len - 1 | 0;
        while (true) {
          var hi$1 = _hi;
          var lo$1 = _lo;
          var mid = (lo$1 + hi$1 | 0) / 2 | 0;
          var midVal = sorted[mid];
          var c$1 = cmp(key, midVal);
          if (c$1 === 0) {
            return mid;
          }
          if (c$1 < 0) {
            if (hi$1 === mid) {
              if (cmp(sorted[lo$1], key) === 0) {
                return lo$1;
              } else {
                return -(hi$1 + 1 | 0) | 0;
              }
            }
            _hi = mid;
            continue;
          }
          if (lo$1 === mid) {
            if (cmp(sorted[hi$1], key) === 0) {
              return hi$1;
            } else {
              return -(hi$1 + 1 | 0) | 0;
            }
          }
          _lo = mid;
          continue;
        }
        ;
      }
    }
    function binarySearchBy(sorted, key, cmp) {
      return binarySearchByU(sorted, key, Curry.__2(cmp));
    }
    exports.strictlySortedLengthU = strictlySortedLengthU;
    exports.strictlySortedLength = strictlySortedLength;
    exports.isSortedU = isSortedU;
    exports.isSorted = isSorted;
    exports.stableSortInPlaceByU = stableSortInPlaceByU;
    exports.stableSortInPlaceBy = stableSortInPlaceBy;
    exports.stableSortByU = stableSortByU;
    exports.stableSortBy = stableSortBy;
    exports.binarySearchByU = binarySearchByU;
    exports.binarySearchBy = binarySearchBy;
    exports.unionU = unionU;
    exports.union = union;
    exports.intersectU = intersectU;
    exports.intersect = intersect;
    exports.diffU = diffU;
    exports.diff = diff;
  });
  // ../../.esy/3/b/melange-388c5d45/default/lib/js/belt_List.js
  var require_belt_List = __commonJS(exports => {
    "use strict";
    var Curry = require_curry();
    var Belt_Array = require_belt_Array();
    var Caml_option = require_caml_option();
    var Belt_SortArray = require_belt_SortArray();
    function head(x) {
      if (x) {
        return Caml_option.some(x.hd);
      }
    }
    function headExn(x) {
      if (x) {
        return x.hd;
      }
      throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
    }
    function tail(x) {
      if (x) {
        return x.tl;
      }
    }
    function tailExn(x) {
      if (x) {
        return x.tl;
      }
      throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
    }
    function add(xs, x) {
      return {
        hd: x,
        tl: xs
      };
    }
    function get(x, n) {
      if (n < 0) {
        return;
      } else {
        var _x = x;
        var _n = n;
        while (true) {
          var n$1 = _n;
          var x$1 = _x;
          if (!x$1) {
            return;
          }
          if (n$1 === 0) {
            return Caml_option.some(x$1.hd);
          }
          _n = n$1 - 1 | 0;
          _x = x$1.tl;
          continue;
        }
        ;
      }
    }
    function getExn(x, n) {
      if (n < 0) {
        throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
      }
      var _x = x;
      var _n = n;
      while (true) {
        var n$1 = _n;
        var x$1 = _x;
        if (x$1) {
          if (n$1 === 0) {
            return x$1.hd;
          }
          _n = n$1 - 1 | 0;
          _x = x$1.tl;
          continue;
        }
        throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
      }
      ;
    }
    function partitionAux(p, _cell, _precX, _precY) {
      while (true) {
        var precY = _precY;
        var precX = _precX;
        var cell = _cell;
        if (!cell) {
          return;
        }
        var t = cell.tl;
        var h = cell.hd;
        var next = {
          hd: h,
          tl: 0
        };
        if (p(h)) {
          precX.tl = next;
          _precX = next;
          _cell = t;
          continue;
        }
        precY.tl = next;
        _precY = next;
        _cell = t;
        continue;
      }
      ;
    }
    function splitAux(_cell, _precX, _precY) {
      while (true) {
        var precY = _precY;
        var precX = _precX;
        var cell = _cell;
        if (!cell) {
          return;
        }
        var match = cell.hd;
        var nextA = {
          hd: match[0],
          tl: 0
        };
        var nextB = {
          hd: match[1],
          tl: 0
        };
        precX.tl = nextA;
        precY.tl = nextB;
        _precY = nextB;
        _precX = nextA;
        _cell = cell.tl;
        continue;
      }
      ;
    }
    function copyAuxCont(_cellX, _prec) {
      while (true) {
        var prec = _prec;
        var cellX = _cellX;
        if (!cellX) {
          return prec;
        }
        var next = {
          hd: cellX.hd,
          tl: 0
        };
        prec.tl = next;
        _prec = next;
        _cellX = cellX.tl;
        continue;
      }
      ;
    }
    function copyAuxWitFilter(f, _cellX, _prec) {
      while (true) {
        var prec = _prec;
        var cellX = _cellX;
        if (!cellX) {
          return;
        }
        var t = cellX.tl;
        var h = cellX.hd;
        if (f(h)) {
          var next = {
            hd: h,
            tl: 0
          };
          prec.tl = next;
          _prec = next;
          _cellX = t;
          continue;
        }
        _cellX = t;
        continue;
      }
      ;
    }
    function copyAuxWithFilterIndex(f, _cellX, _prec, _i) {
      while (true) {
        var i = _i;
        var prec = _prec;
        var cellX = _cellX;
        if (!cellX) {
          return;
        }
        var t = cellX.tl;
        var h = cellX.hd;
        if (f(h, i)) {
          var next = {
            hd: h,
            tl: 0
          };
          prec.tl = next;
          _i = i + 1 | 0;
          _prec = next;
          _cellX = t;
          continue;
        }
        _i = i + 1 | 0;
        _cellX = t;
        continue;
      }
      ;
    }
    function copyAuxWitFilterMap(f, _cellX, _prec) {
      while (true) {
        var prec = _prec;
        var cellX = _cellX;
        if (!cellX) {
          return;
        }
        var t = cellX.tl;
        var h = f(cellX.hd);
        if (h !== void 0) {
          var next = {
            hd: Caml_option.valFromOption(h),
            tl: 0
          };
          prec.tl = next;
          _prec = next;
          _cellX = t;
          continue;
        }
        _cellX = t;
        continue;
      }
      ;
    }
    function removeAssocAuxWithMap(_cellX, x, _prec, f) {
      while (true) {
        var prec = _prec;
        var cellX = _cellX;
        if (!cellX) {
          return false;
        }
        var t = cellX.tl;
        var h = cellX.hd;
        if (f(h[0], x)) {
          prec.tl = t;
          return true;
        }
        var next = {
          hd: h,
          tl: 0
        };
        prec.tl = next;
        _prec = next;
        _cellX = t;
        continue;
      }
      ;
    }
    function setAssocAuxWithMap(_cellX, x, k, _prec, eq2) {
      while (true) {
        var prec = _prec;
        var cellX = _cellX;
        if (!cellX) {
          return false;
        }
        var t = cellX.tl;
        var h = cellX.hd;
        if (eq2(h[0], x)) {
          prec.tl = {
            hd: [x, k],
            tl: t
          };
          return true;
        }
        var next = {
          hd: h,
          tl: 0
        };
        prec.tl = next;
        _prec = next;
        _cellX = t;
        continue;
      }
      ;
    }
    function copyAuxWithMap(_cellX, _prec, f) {
      while (true) {
        var prec = _prec;
        var cellX = _cellX;
        if (!cellX) {
          return;
        }
        var next = {
          hd: f(cellX.hd),
          tl: 0
        };
        prec.tl = next;
        _prec = next;
        _cellX = cellX.tl;
        continue;
      }
      ;
    }
    function zipAux(_cellX, _cellY, _prec) {
      while (true) {
        var prec = _prec;
        var cellY = _cellY;
        var cellX = _cellX;
        if (!cellX) {
          return;
        }
        if (!cellY) {
          return;
        }
        var next = {
          hd: [cellX.hd, cellY.hd],
          tl: 0
        };
        prec.tl = next;
        _prec = next;
        _cellY = cellY.tl;
        _cellX = cellX.tl;
        continue;
      }
      ;
    }
    function copyAuxWithMap2(f, _cellX, _cellY, _prec) {
      while (true) {
        var prec = _prec;
        var cellY = _cellY;
        var cellX = _cellX;
        if (!cellX) {
          return;
        }
        if (!cellY) {
          return;
        }
        var next = {
          hd: f(cellX.hd, cellY.hd),
          tl: 0
        };
        prec.tl = next;
        _prec = next;
        _cellY = cellY.tl;
        _cellX = cellX.tl;
        continue;
      }
      ;
    }
    function copyAuxWithMapI(f, _i, _cellX, _prec) {
      while (true) {
        var prec = _prec;
        var cellX = _cellX;
        var i = _i;
        if (!cellX) {
          return;
        }
        var next = {
          hd: f(i, cellX.hd),
          tl: 0
        };
        prec.tl = next;
        _prec = next;
        _cellX = cellX.tl;
        _i = i + 1 | 0;
        continue;
      }
      ;
    }
    function takeAux(_n, _cell, _prec) {
      while (true) {
        var prec = _prec;
        var cell = _cell;
        var n = _n;
        if (n === 0) {
          return true;
        }
        if (!cell) {
          return false;
        }
        var cell$1 = {
          hd: cell.hd,
          tl: 0
        };
        prec.tl = cell$1;
        _prec = cell$1;
        _cell = cell.tl;
        _n = n - 1 | 0;
        continue;
      }
      ;
    }
    function splitAtAux(_n, _cell, _prec) {
      while (true) {
        var prec = _prec;
        var cell = _cell;
        var n = _n;
        if (n === 0) {
          return cell;
        }
        if (!cell) {
          return;
        }
        var cell$1 = {
          hd: cell.hd,
          tl: 0
        };
        prec.tl = cell$1;
        _prec = cell$1;
        _cell = cell.tl;
        _n = n - 1 | 0;
        continue;
      }
      ;
    }
    function take(lst, n) {
      if (n < 0) {
        return;
      }
      if (n === 0) {
        return 0;
      }
      if (!lst) {
        return;
      }
      var cell = {
        hd: lst.hd,
        tl: 0
      };
      var has2 = takeAux(n - 1 | 0, lst.tl, cell);
      if (has2) {
        return cell;
      }
    }
    function drop(lst, n) {
      if (n < 0) {
        return;
      } else {
        var _l = lst;
        var _n = n;
        while (true) {
          var n$1 = _n;
          var l = _l;
          if (n$1 === 0) {
            return l;
          }
          if (!l) {
            return;
          }
          _n = n$1 - 1 | 0;
          _l = l.tl;
          continue;
        }
        ;
      }
    }
    function splitAt(lst, n) {
      if (n < 0) {
        return;
      }
      if (n === 0) {
        return [0, lst];
      }
      if (!lst) {
        return;
      }
      var cell = {
        hd: lst.hd,
        tl: 0
      };
      var rest = splitAtAux(n - 1 | 0, lst.tl, cell);
      if (rest !== void 0) {
        return [cell, rest];
      }
    }
    function concat(xs, ys) {
      if (!xs) {
        return ys;
      }
      var cell = {
        hd: xs.hd,
        tl: 0
      };
      copyAuxCont(xs.tl, cell).tl = ys;
      return cell;
    }
    function mapU(xs, f) {
      if (!xs) {
        return 0;
      }
      var cell = {
        hd: f(xs.hd),
        tl: 0
      };
      copyAuxWithMap(xs.tl, cell, f);
      return cell;
    }
    function map(xs, f) {
      return mapU(xs, Curry.__1(f));
    }
    function zipByU(l1, l2, f) {
      if (!l1) {
        return 0;
      }
      if (!l2) {
        return 0;
      }
      var cell = {
        hd: f(l1.hd, l2.hd),
        tl: 0
      };
      copyAuxWithMap2(f, l1.tl, l2.tl, cell);
      return cell;
    }
    function zipBy(l1, l2, f) {
      return zipByU(l1, l2, Curry.__2(f));
    }
    function mapWithIndexU(xs, f) {
      if (!xs) {
        return 0;
      }
      var cell = {
        hd: f(0, xs.hd),
        tl: 0
      };
      copyAuxWithMapI(f, 1, xs.tl, cell);
      return cell;
    }
    function mapWithIndex(xs, f) {
      return mapWithIndexU(xs, Curry.__2(f));
    }
    function makeByU(n, f) {
      if (n <= 0) {
        return 0;
      }
      var headX = {
        hd: f(0),
        tl: 0
      };
      var cur = headX;
      var i = 1;
      while (i < n) {
        var v = {
          hd: f(i),
          tl: 0
        };
        cur.tl = v;
        cur = v;
        i = i + 1 | 0;
      }
      ;
      return headX;
    }
    function makeBy(n, f) {
      return makeByU(n, Curry.__1(f));
    }
    function make(n, v) {
      if (n <= 0) {
        return 0;
      }
      var headX = {
        hd: v,
        tl: 0
      };
      var cur = headX;
      var i = 1;
      while (i < n) {
        var v$1 = {
          hd: v,
          tl: 0
        };
        cur.tl = v$1;
        cur = v$1;
        i = i + 1 | 0;
      }
      ;
      return headX;
    }
    function length(xs) {
      var _x = xs;
      var _acc = 0;
      while (true) {
        var acc = _acc;
        var x = _x;
        if (!x) {
          return acc;
        }
        _acc = acc + 1 | 0;
        _x = x.tl;
        continue;
      }
      ;
    }
    function fillAux(arr, _i, _x) {
      while (true) {
        var x = _x;
        var i = _i;
        if (!x) {
          return;
        }
        arr[i] = x.hd;
        _x = x.tl;
        _i = i + 1 | 0;
        continue;
      }
      ;
    }
    function fromArray(a) {
      var _i = a.length - 1 | 0;
      var _res = 0;
      while (true) {
        var res = _res;
        var i = _i;
        if (i < 0) {
          return res;
        }
        _res = {
          hd: a[i],
          tl: res
        };
        _i = i - 1 | 0;
        continue;
      }
      ;
    }
    function toArray(x) {
      var len = length(x);
      var arr = new Array(len);
      fillAux(arr, 0, x);
      return arr;
    }
    function shuffle(xs) {
      var v = toArray(xs);
      Belt_Array.shuffleInPlace(v);
      return fromArray(v);
    }
    function reverseConcat(_l1, _l2) {
      while (true) {
        var l2 = _l2;
        var l1 = _l1;
        if (!l1) {
          return l2;
        }
        _l2 = {
          hd: l1.hd,
          tl: l2
        };
        _l1 = l1.tl;
        continue;
      }
      ;
    }
    function reverse(l) {
      return reverseConcat(l, 0);
    }
    function flattenAux(_prec, _xs) {
      while (true) {
        var xs = _xs;
        var prec = _prec;
        if (xs) {
          _xs = xs.tl;
          _prec = copyAuxCont(xs.hd, prec);
          continue;
        }
        prec.tl = 0;
        return;
      }
      ;
    }
    function flatten(_xs) {
      while (true) {
        var xs = _xs;
        if (!xs) {
          return 0;
        }
        var match = xs.hd;
        if (match) {
          var cell = {
            hd: match.hd,
            tl: 0
          };
          flattenAux(copyAuxCont(match.tl, cell), xs.tl);
          return cell;
        }
        _xs = xs.tl;
        continue;
      }
      ;
    }
    function concatMany(xs) {
      var len = xs.length;
      if (len === 1) {
        return xs[0];
      }
      if (!len) {
        return 0;
      }
      var len$1 = xs.length;
      var v = xs[len$1 - 1 | 0];
      for (var i = len$1 - 2 | 0; i >= 0; --i) {
        v = concat(xs[i], v);
      }
      return v;
    }
    function mapReverseU(l, f) {
      var _accu = 0;
      var _xs = l;
      while (true) {
        var xs = _xs;
        var accu = _accu;
        if (!xs) {
          return accu;
        }
        _xs = xs.tl;
        _accu = {
          hd: f(xs.hd),
          tl: accu
        };
        continue;
      }
      ;
    }
    function mapReverse(l, f) {
      return mapReverseU(l, Curry.__1(f));
    }
    function forEachU(_xs, f) {
      while (true) {
        var xs = _xs;
        if (!xs) {
          return;
        }
        f(xs.hd);
        _xs = xs.tl;
        continue;
      }
      ;
    }
    function forEach(xs, f) {
      return forEachU(xs, Curry.__1(f));
    }
    function forEachWithIndexU(l, f) {
      var _xs = l;
      var _i = 0;
      while (true) {
        var i = _i;
        var xs = _xs;
        if (!xs) {
          return;
        }
        f(i, xs.hd);
        _i = i + 1 | 0;
        _xs = xs.tl;
        continue;
      }
      ;
    }
    function forEachWithIndex(l, f) {
      return forEachWithIndexU(l, Curry.__2(f));
    }
    function reduceU(_l, _accu, f) {
      while (true) {
        var accu = _accu;
        var l = _l;
        if (!l) {
          return accu;
        }
        _accu = f(accu, l.hd);
        _l = l.tl;
        continue;
      }
      ;
    }
    function reduce(l, accu, f) {
      return reduceU(l, accu, Curry.__2(f));
    }
    function reduceReverseUnsafeU(l, accu, f) {
      if (l) {
        return f(reduceReverseUnsafeU(l.tl, accu, f), l.hd);
      } else {
        return accu;
      }
    }
    function reduceReverseU(l, acc, f) {
      var len = length(l);
      if (len < 1e3) {
        return reduceReverseUnsafeU(l, acc, f);
      } else {
        return Belt_Array.reduceReverseU(toArray(l), acc, f);
      }
    }
    function reduceReverse(l, accu, f) {
      return reduceReverseU(l, accu, Curry.__2(f));
    }
    function reduceWithIndexU(l, acc, f) {
      var _l = l;
      var _acc = acc;
      var _i = 0;
      while (true) {
        var i = _i;
        var acc$1 = _acc;
        var l$1 = _l;
        if (!l$1) {
          return acc$1;
        }
        _i = i + 1 | 0;
        _acc = f(acc$1, l$1.hd, i);
        _l = l$1.tl;
        continue;
      }
      ;
    }
    function reduceWithIndex(l, acc, f) {
      return reduceWithIndexU(l, acc, Curry.__3(f));
    }
    function mapReverse2U(l1, l2, f) {
      var _l1 = l1;
      var _l2 = l2;
      var _accu = 0;
      while (true) {
        var accu = _accu;
        var l2$1 = _l2;
        var l1$1 = _l1;
        if (!l1$1) {
          return accu;
        }
        if (!l2$1) {
          return accu;
        }
        _accu = {
          hd: f(l1$1.hd, l2$1.hd),
          tl: accu
        };
        _l2 = l2$1.tl;
        _l1 = l1$1.tl;
        continue;
      }
      ;
    }
    function mapReverse2(l1, l2, f) {
      return mapReverse2U(l1, l2, Curry.__2(f));
    }
    function forEach2U(_l1, _l2, f) {
      while (true) {
        var l2 = _l2;
        var l1 = _l1;
        if (!l1) {
          return;
        }
        if (!l2) {
          return;
        }
        f(l1.hd, l2.hd);
        _l2 = l2.tl;
        _l1 = l1.tl;
        continue;
      }
      ;
    }
    function forEach2(l1, l2, f) {
      return forEach2U(l1, l2, Curry.__2(f));
    }
    function reduce2U(_l1, _l2, _accu, f) {
      while (true) {
        var accu = _accu;
        var l2 = _l2;
        var l1 = _l1;
        if (!l1) {
          return accu;
        }
        if (!l2) {
          return accu;
        }
        _accu = f(accu, l1.hd, l2.hd);
        _l2 = l2.tl;
        _l1 = l1.tl;
        continue;
      }
      ;
    }
    function reduce2(l1, l2, acc, f) {
      return reduce2U(l1, l2, acc, Curry.__3(f));
    }
    function reduceReverse2UnsafeU(l1, l2, accu, f) {
      if (l1 && l2) {
        return f(reduceReverse2UnsafeU(l1.tl, l2.tl, accu, f), l1.hd, l2.hd);
      } else {
        return accu;
      }
    }
    function reduceReverse2U(l1, l2, acc, f) {
      var len = length(l1);
      if (len < 1e3) {
        return reduceReverse2UnsafeU(l1, l2, acc, f);
      } else {
        return Belt_Array.reduceReverse2U(toArray(l1), toArray(l2), acc, f);
      }
    }
    function reduceReverse2(l1, l2, acc, f) {
      return reduceReverse2U(l1, l2, acc, Curry.__3(f));
    }
    function everyU(_xs, p) {
      while (true) {
        var xs = _xs;
        if (!xs) {
          return true;
        }
        if (!p(xs.hd)) {
          return false;
        }
        _xs = xs.tl;
        continue;
      }
      ;
    }
    function every(xs, p) {
      return everyU(xs, Curry.__1(p));
    }
    function someU(_xs, p) {
      while (true) {
        var xs = _xs;
        if (!xs) {
          return false;
        }
        if (p(xs.hd)) {
          return true;
        }
        _xs = xs.tl;
        continue;
      }
      ;
    }
    function some(xs, p) {
      return someU(xs, Curry.__1(p));
    }
    function every2U(_l1, _l2, p) {
      while (true) {
        var l2 = _l2;
        var l1 = _l1;
        if (!l1) {
          return true;
        }
        if (!l2) {
          return true;
        }
        if (!p(l1.hd, l2.hd)) {
          return false;
        }
        _l2 = l2.tl;
        _l1 = l1.tl;
        continue;
      }
      ;
    }
    function every2(l1, l2, p) {
      return every2U(l1, l2, Curry.__2(p));
    }
    function cmpByLength(_l1, _l2) {
      while (true) {
        var l2 = _l2;
        var l1 = _l1;
        if (!l1) {
          if (l2) {
            return -1;
          } else {
            return 0;
          }
        }
        if (!l2) {
          return 1;
        }
        _l2 = l2.tl;
        _l1 = l1.tl;
        continue;
      }
      ;
    }
    function cmpU(_l1, _l2, p) {
      while (true) {
        var l2 = _l2;
        var l1 = _l1;
        if (!l1) {
          if (l2) {
            return -1;
          } else {
            return 0;
          }
        }
        if (!l2) {
          return 1;
        }
        var c = p(l1.hd, l2.hd);
        if (c !== 0) {
          return c;
        }
        _l2 = l2.tl;
        _l1 = l1.tl;
        continue;
      }
      ;
    }
    function cmp(l1, l2, f) {
      return cmpU(l1, l2, Curry.__2(f));
    }
    function eqU(_l1, _l2, p) {
      while (true) {
        var l2 = _l2;
        var l1 = _l1;
        if (!l1) {
          if (l2) {
            return false;
          } else {
            return true;
          }
        }
        if (!l2) {
          return false;
        }
        if (!p(l1.hd, l2.hd)) {
          return false;
        }
        _l2 = l2.tl;
        _l1 = l1.tl;
        continue;
      }
      ;
    }
    function eq(l1, l2, f) {
      return eqU(l1, l2, Curry.__2(f));
    }
    function some2U(_l1, _l2, p) {
      while (true) {
        var l2 = _l2;
        var l1 = _l1;
        if (!l1) {
          return false;
        }
        if (!l2) {
          return false;
        }
        if (p(l1.hd, l2.hd)) {
          return true;
        }
        _l2 = l2.tl;
        _l1 = l1.tl;
        continue;
      }
      ;
    }
    function some2(l1, l2, p) {
      return some2U(l1, l2, Curry.__2(p));
    }
    function hasU(_xs, x, eq2) {
      while (true) {
        var xs = _xs;
        if (!xs) {
          return false;
        }
        if (eq2(xs.hd, x)) {
          return true;
        }
        _xs = xs.tl;
        continue;
      }
      ;
    }
    function has(xs, x, eq2) {
      return hasU(xs, x, Curry.__2(eq2));
    }
    function getAssocU(_xs, x, eq2) {
      while (true) {
        var xs = _xs;
        if (!xs) {
          return;
        }
        var match = xs.hd;
        if (eq2(match[0], x)) {
          return Caml_option.some(match[1]);
        }
        _xs = xs.tl;
        continue;
      }
      ;
    }
    function getAssoc(xs, x, eq2) {
      return getAssocU(xs, x, Curry.__2(eq2));
    }
    function hasAssocU(_xs, x, eq2) {
      while (true) {
        var xs = _xs;
        if (!xs) {
          return false;
        }
        if (eq2(xs.hd[0], x)) {
          return true;
        }
        _xs = xs.tl;
        continue;
      }
      ;
    }
    function hasAssoc(xs, x, eq2) {
      return hasAssocU(xs, x, Curry.__2(eq2));
    }
    function removeAssocU(xs, x, eq2) {
      if (!xs) {
        return 0;
      }
      var l = xs.tl;
      var pair = xs.hd;
      if (eq2(pair[0], x)) {
        return l;
      }
      var cell = {
        hd: pair,
        tl: 0
      };
      var removed = removeAssocAuxWithMap(l, x, cell, eq2);
      if (removed) {
        return cell;
      } else {
        return xs;
      }
    }
    function removeAssoc(xs, x, eq2) {
      return removeAssocU(xs, x, Curry.__2(eq2));
    }
    function setAssocU(xs, x, k, eq2) {
      if (!xs) {
        return {
          hd: [x, k],
          tl: 0
        };
      }
      var l = xs.tl;
      var pair = xs.hd;
      if (eq2(pair[0], x)) {
        return {
          hd: [x, k],
          tl: l
        };
      }
      var cell = {
        hd: pair,
        tl: 0
      };
      var replaced = setAssocAuxWithMap(l, x, k, cell, eq2);
      if (replaced) {
        return cell;
      } else {
        return {
          hd: [x, k],
          tl: xs
        };
      }
    }
    function setAssoc(xs, x, k, eq2) {
      return setAssocU(xs, x, k, Curry.__2(eq2));
    }
    function sortU(xs, cmp2) {
      var arr = toArray(xs);
      Belt_SortArray.stableSortInPlaceByU(arr, cmp2);
      return fromArray(arr);
    }
    function sort(xs, cmp2) {
      return sortU(xs, Curry.__2(cmp2));
    }
    function getByU(_xs, p) {
      while (true) {
        var xs = _xs;
        if (!xs) {
          return;
        }
        var x = xs.hd;
        if (p(x)) {
          return Caml_option.some(x);
        }
        _xs = xs.tl;
        continue;
      }
      ;
    }
    function getBy(xs, p) {
      return getByU(xs, Curry.__1(p));
    }
    function keepU(_xs, p) {
      while (true) {
        var xs = _xs;
        if (!xs) {
          return 0;
        }
        var t = xs.tl;
        var h = xs.hd;
        if (p(h)) {
          var cell = {
            hd: h,
            tl: 0
          };
          copyAuxWitFilter(p, t, cell);
          return cell;
        }
        _xs = t;
        continue;
      }
      ;
    }
    function keep(xs, p) {
      return keepU(xs, Curry.__1(p));
    }
    function keepWithIndexU(xs, p) {
      var _xs = xs;
      var _i = 0;
      while (true) {
        var i = _i;
        var xs$1 = _xs;
        if (!xs$1) {
          return 0;
        }
        var t = xs$1.tl;
        var h = xs$1.hd;
        if (p(h, i)) {
          var cell = {
            hd: h,
            tl: 0
          };
          copyAuxWithFilterIndex(p, t, cell, i + 1 | 0);
          return cell;
        }
        _i = i + 1 | 0;
        _xs = t;
        continue;
      }
      ;
    }
    function keepWithIndex(xs, p) {
      return keepWithIndexU(xs, Curry.__2(p));
    }
    function keepMapU(_xs, p) {
      while (true) {
        var xs = _xs;
        if (!xs) {
          return 0;
        }
        var t = xs.tl;
        var h = p(xs.hd);
        if (h !== void 0) {
          var cell = {
            hd: Caml_option.valFromOption(h),
            tl: 0
          };
          copyAuxWitFilterMap(p, t, cell);
          return cell;
        }
        _xs = t;
        continue;
      }
      ;
    }
    function keepMap(xs, p) {
      return keepMapU(xs, Curry.__1(p));
    }
    function partitionU(l, p) {
      if (!l) {
        return [0, 0];
      }
      var h = l.hd;
      var nextX = {
        hd: h,
        tl: 0
      };
      var nextY = {
        hd: h,
        tl: 0
      };
      var b = p(h);
      partitionAux(p, l.tl, nextX, nextY);
      if (b) {
        return [nextX, nextY.tl];
      } else {
        return [nextX.tl, nextY];
      }
    }
    function partition(l, p) {
      return partitionU(l, Curry.__1(p));
    }
    function unzip(xs) {
      if (!xs) {
        return [0, 0];
      }
      var match = xs.hd;
      var cellX = {
        hd: match[0],
        tl: 0
      };
      var cellY = {
        hd: match[1],
        tl: 0
      };
      splitAux(xs.tl, cellX, cellY);
      return [cellX, cellY];
    }
    function zip(l1, l2) {
      if (!l1) {
        return 0;
      }
      if (!l2) {
        return 0;
      }
      var cell = {
        hd: [l1.hd, l2.hd],
        tl: 0
      };
      zipAux(l1.tl, l2.tl, cell);
      return cell;
    }
    var size = length;
    var filter = keep;
    var filterWithIndex = keepWithIndex;
    exports.length = length;
    exports.size = size;
    exports.head = head;
    exports.headExn = headExn;
    exports.tail = tail;
    exports.tailExn = tailExn;
    exports.add = add;
    exports.get = get;
    exports.getExn = getExn;
    exports.make = make;
    exports.makeByU = makeByU;
    exports.makeBy = makeBy;
    exports.shuffle = shuffle;
    exports.drop = drop;
    exports.take = take;
    exports.splitAt = splitAt;
    exports.concat = concat;
    exports.concatMany = concatMany;
    exports.reverseConcat = reverseConcat;
    exports.flatten = flatten;
    exports.mapU = mapU;
    exports.map = map;
    exports.zip = zip;
    exports.zipByU = zipByU;
    exports.zipBy = zipBy;
    exports.mapWithIndexU = mapWithIndexU;
    exports.mapWithIndex = mapWithIndex;
    exports.fromArray = fromArray;
    exports.toArray = toArray;
    exports.reverse = reverse;
    exports.mapReverseU = mapReverseU;
    exports.mapReverse = mapReverse;
    exports.forEachU = forEachU;
    exports.forEach = forEach;
    exports.forEachWithIndexU = forEachWithIndexU;
    exports.forEachWithIndex = forEachWithIndex;
    exports.reduceU = reduceU;
    exports.reduce = reduce;
    exports.reduceWithIndexU = reduceWithIndexU;
    exports.reduceWithIndex = reduceWithIndex;
    exports.reduceReverseU = reduceReverseU;
    exports.reduceReverse = reduceReverse;
    exports.mapReverse2U = mapReverse2U;
    exports.mapReverse2 = mapReverse2;
    exports.forEach2U = forEach2U;
    exports.forEach2 = forEach2;
    exports.reduce2U = reduce2U;
    exports.reduce2 = reduce2;
    exports.reduceReverse2U = reduceReverse2U;
    exports.reduceReverse2 = reduceReverse2;
    exports.everyU = everyU;
    exports.every = every;
    exports.someU = someU;
    exports.some = some;
    exports.every2U = every2U;
    exports.every2 = every2;
    exports.some2U = some2U;
    exports.some2 = some2;
    exports.cmpByLength = cmpByLength;
    exports.cmpU = cmpU;
    exports.cmp = cmp;
    exports.eqU = eqU;
    exports.eq = eq;
    exports.hasU = hasU;
    exports.has = has;
    exports.getByU = getByU;
    exports.getBy = getBy;
    exports.keepU = keepU;
    exports.keep = keep;
    exports.filter = filter;
    exports.keepWithIndexU = keepWithIndexU;
    exports.keepWithIndex = keepWithIndex;
    exports.filterWithIndex = filterWithIndex;
    exports.keepMapU = keepMapU;
    exports.keepMap = keepMap;
    exports.partitionU = partitionU;
    exports.partition = partition;
    exports.unzip = unzip;
    exports.getAssocU = getAssocU;
    exports.getAssoc = getAssoc;
    exports.hasAssocU = hasAssocU;
    exports.hasAssoc = hasAssoc;
    exports.removeAssocU = removeAssocU;
    exports.removeAssoc = removeAssoc;
    exports.setAssocU = setAssocU;
    exports.setAssoc = setAssoc;
    exports.sortU = sortU;
    exports.sort = sort;
  });
  // node_modules/benchmark/benchmark.js
  var require_benchmark = __commonJS((exports, module) => {
    (function () {
      "use strict";
      var undefined2;
      var objectTypes = {
        function: true,
        object: true
      };
      var root = objectTypes[typeof window] && window || this;
      var freeDefine = typeof define == "function" && typeof define.amd == "object" && define.amd && define;
      var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;
      var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;
      var freeGlobal = freeExports && freeModule && typeof global == "object" && global;
      if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {
        root = freeGlobal;
      }
      var freeRequire = typeof require == "function" && require;
      var counter = 0;
      var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;
      var rePrimitive = /^(?:boolean|number|string|undefined)$/;
      var uidCounter = 0;
      var contextProps = ["Array", "Date", "Function", "Math", "Object", "RegExp", "String", "_", "clearTimeout", "chrome", "chromium", "document", "navigator", "phantom", "platform", "process", "runtime", "setTimeout"];
      var divisors = {
        "1": 4096,
        "2": 512,
        "3": 64,
        "4": 8,
        "5": 0
      };
      var tTable = {
        "1": 12.706,
        "2": 4.303,
        "3": 3.182,
        "4": 2.776,
        "5": 2.571,
        "6": 2.447,
        "7": 2.365,
        "8": 2.306,
        "9": 2.262,
        "10": 2.228,
        "11": 2.201,
        "12": 2.179,
        "13": 2.16,
        "14": 2.145,
        "15": 2.131,
        "16": 2.12,
        "17": 2.11,
        "18": 2.101,
        "19": 2.093,
        "20": 2.086,
        "21": 2.08,
        "22": 2.074,
        "23": 2.069,
        "24": 2.064,
        "25": 2.06,
        "26": 2.056,
        "27": 2.052,
        "28": 2.048,
        "29": 2.045,
        "30": 2.042,
        infinity: 1.96
      };
      var uTable = {
        "5": [0, 1, 2],
        "6": [1, 2, 3, 5],
        "7": [1, 3, 5, 6, 8],
        "8": [2, 4, 6, 8, 10, 13],
        "9": [2, 4, 7, 10, 12, 15, 17],
        "10": [3, 5, 8, 11, 14, 17, 20, 23],
        "11": [3, 6, 9, 13, 16, 19, 23, 26, 30],
        "12": [4, 7, 11, 14, 18, 22, 26, 29, 33, 37],
        "13": [4, 8, 12, 16, 20, 24, 28, 33, 37, 41, 45],
        "14": [5, 9, 13, 17, 22, 26, 31, 36, 40, 45, 50, 55],
        "15": [5, 10, 14, 19, 24, 29, 34, 39, 44, 49, 54, 59, 64],
        "16": [6, 11, 15, 21, 26, 31, 37, 42, 47, 53, 59, 64, 70, 75],
        "17": [6, 11, 17, 22, 28, 34, 39, 45, 51, 57, 63, 67, 75, 81, 87],
        "18": [7, 12, 18, 24, 30, 36, 42, 48, 55, 61, 67, 74, 80, 86, 93, 99],
        "19": [7, 13, 19, 25, 32, 38, 45, 52, 58, 65, 72, 78, 85, 92, 99, 106, 113],
        "20": [8, 14, 20, 27, 34, 41, 48, 55, 62, 69, 76, 83, 90, 98, 105, 112, 119, 127],
        "21": [8, 15, 22, 29, 36, 43, 50, 58, 65, 73, 80, 88, 96, 103, 111, 119, 126, 134, 142],
        "22": [9, 16, 23, 30, 38, 45, 53, 61, 69, 77, 85, 93, 101, 109, 117, 125, 133, 141, 150, 158],
        "23": [9, 17, 24, 32, 40, 48, 56, 64, 73, 81, 89, 98, 106, 115, 123, 132, 140, 149, 157, 166, 175],
        "24": [10, 17, 25, 33, 42, 50, 59, 67, 76, 85, 94, 102, 111, 120, 129, 138, 147, 156, 165, 174, 183, 192],
        "25": [10, 18, 27, 35, 44, 53, 62, 71, 80, 89, 98, 107, 117, 126, 135, 145, 154, 163, 173, 182, 192, 201, 211],
        "26": [11, 19, 28, 37, 46, 55, 64, 74, 83, 93, 102, 112, 122, 132, 141, 151, 161, 171, 181, 191, 200, 210, 220, 230],
        "27": [11, 20, 29, 38, 48, 57, 67, 77, 87, 97, 107, 118, 125, 138, 147, 158, 168, 178, 188, 199, 209, 219, 230, 240, 250],
        "28": [12, 21, 30, 40, 50, 60, 70, 80, 90, 101, 111, 122, 132, 143, 154, 164, 175, 186, 196, 207, 218, 228, 239, 250, 261, 272],
        "29": [13, 22, 32, 42, 52, 62, 73, 83, 94, 105, 116, 127, 138, 149, 160, 171, 182, 193, 204, 215, 226, 238, 249, 260, 271, 282, 294],
        "30": [13, 23, 33, 43, 54, 65, 76, 87, 98, 109, 120, 131, 143, 154, 166, 177, 189, 200, 212, 223, 235, 247, 258, 270, 282, 293, 305, 317]
      };
      function runInContext(context) {
        var _ = context && context._ || require2("lodash") || root._;
        if (!_) {
          Benchmark2.runInContext = runInContext;
          return Benchmark2;
        }
        context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;
        var Array2 = context.Array, Date2 = context.Date, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String;
        var arrayRef = [], objectProto = Object2.prototype;
        var abs = Math2.abs, clearTimeout2 = context.clearTimeout, floor = Math2.floor, log = Math2.log, max = Math2.max, min = Math2.min, pow = Math2.pow, push = arrayRef.push, setTimeout2 = context.setTimeout, shift = arrayRef.shift, slice = arrayRef.slice, sqrt = Math2.sqrt, toString = objectProto.toString, unshift = arrayRef.unshift;
        var req = require2;
        var doc = isHostType(context, "document") && context.document;
        var microtimeObject = req("microtime");
        var processObject = isHostType(context, "process") && context.process;
        var trash = doc && doc.createElement("div");
        var uid = "uid" + _.now();
        var calledBy = {};
        var support = {};
        (function () {
          support.browser = doc && isHostType(context, "navigator") && !isHostType(context, "phantom");
          support.timeout = isHostType(context, "setTimeout") && isHostType(context, "clearTimeout");
          try {
            support.decompilation = Function2(("return (" + (function (x) {
              return {
                x: "" + (1 + x) + "",
                y: 0
              };
            }) + ")").replace(/__cov__[^;]+;/g, ""))()(0).x === "1";
          } catch (e) {
            support.decompilation = false;
          }
        })();
        var timer = {
          ns: Date2,
          start: null,
          stop: null
        };
        function Benchmark2(name, fn, options) {
          var bench = this;
          if (!(bench instanceof Benchmark2)) {
            return new Benchmark2(name, fn, options);
          }
          if (_.isPlainObject(name)) {
            options = name;
          } else if (_.isFunction(name)) {
            options = fn;
            fn = name;
          } else if (_.isPlainObject(fn)) {
            options = fn;
            fn = null;
            bench.name = name;
          } else {
            bench.name = name;
          }
          setOptions(bench, options);
          bench.id || (bench.id = ++counter);
          bench.fn == null && (bench.fn = fn);
          bench.stats = cloneDeep(bench.stats);
          bench.times = cloneDeep(bench.times);
        }
        function Deferred(clone2) {
          var deferred = this;
          if (!(deferred instanceof Deferred)) {
            return new Deferred(clone2);
          }
          deferred.benchmark = clone2;
          clock(deferred);
        }
        function Event2(type) {
          var event = this;
          if (type instanceof Event2) {
            return type;
          }
          return event instanceof Event2 ? _.assign(event, {
            timeStamp: _.now()
          }, typeof type == "string" ? {
            type
          } : type) : new Event2(type);
        }
        function Suite(name, options) {
          var suite = this;
          if (!(suite instanceof Suite)) {
            return new Suite(name, options);
          }
          if (_.isPlainObject(name)) {
            options = name;
          } else {
            suite.name = name;
          }
          setOptions(suite, options);
        }
        var cloneDeep = _.partial(_.cloneDeepWith, _, function (value) {
          if (!_.isArray(value) && !_.isPlainObject(value)) {
            return value;
          }
        });
        function createFunction() {
          createFunction = function (args, body) {
            var result, anchor = freeDefine ? freeDefine.amd : Benchmark2, prop = uid + "createFunction";
            runScript((freeDefine ? "define.amd." : "Benchmark.") + prop + "=function(" + args + "){" + body + "}");
            result = anchor[prop];
            delete anchor[prop];
            return result;
          };
          createFunction = support.browser && (createFunction("", 'return"' + uid + '"') || _.noop)() == uid ? createFunction : Function2;
          return createFunction.apply(null, arguments);
        }
        function delay(bench, fn) {
          bench._timerId = _.delay(fn, bench.delay * 1e3);
        }
        function destroyElement(element) {
          trash.appendChild(element);
          trash.innerHTML = "";
        }
        function getFirstArgument(fn) {
          return !_.has(fn, "toString") && ((/^[\s(]*function[^(]*\(([^\s,)]+)/).exec(fn) || 0)[1] || "";
        }
        function getMean(sample) {
          return _.reduce(sample, function (sum, x) {
            return sum + x;
          }) / sample.length || 0;
        }
        function getSource(fn) {
          var result = "";
          if (isStringable(fn)) {
            result = String2(fn);
          } else if (support.decompilation) {
            result = _.result((/^[^{]+\{([\s\S]*)\}\s*$/).exec(fn), 1);
          }
          result = (result || "").replace(/^\s+|\s+$/g, "");
          return (/^(?:\/\*+[\w\W]*?\*\/|\/\/.*?[\n\r\u2028\u2029]|\s)*(["'])use strict\1;?$/).test(result) ? "" : result;
        }
        function isClassOf(value, name) {
          return value != null && toString.call(value) == "[object " + name + "]";
        }
        function isHostType(object, property) {
          if (object == null) {
            return false;
          }
          var type = typeof object[property];
          return !rePrimitive.test(type) && (type != "object" || !!object[property]);
        }
        function isStringable(value) {
          return _.isString(value) || _.has(value, "toString") && _.isFunction(value.toString);
        }
        function require2(id) {
          try {
            var result = freeExports && freeRequire(id);
          } catch (e) {}
          return result || null;
        }
        function runScript(code) {
          var anchor = freeDefine ? define.amd : Benchmark2, script = doc.createElement("script"), sibling = doc.getElementsByTagName("script")[0], parent = sibling.parentNode, prop = uid + "runScript", prefix = "(" + (freeDefine ? "define.amd." : "Benchmark.") + prop + "||function(){})();";
          try {
            script.appendChild(doc.createTextNode(prefix + code));
            anchor[prop] = function () {
              destroyElement(script);
            };
          } catch (e) {
            parent = parent.cloneNode(false);
            sibling = null;
            script.text = code;
          }
          parent.insertBefore(script, sibling);
          delete anchor[prop];
        }
        function setOptions(object, options) {
          options = object.options = _.assign({}, cloneDeep(object.constructor.options), cloneDeep(options));
          _.forOwn(options, function (value, key) {
            if (value != null) {
              if ((/^on[A-Z]/).test(key)) {
                _.each(key.split(" "), function (key2) {
                  object.on(key2.slice(2).toLowerCase(), value);
                });
              } else if (!_.has(object, key)) {
                object[key] = cloneDeep(value);
              }
            }
          });
        }
        function resolve() {
          var deferred = this, clone2 = deferred.benchmark, bench = clone2._original;
          if (bench.aborted) {
            deferred.teardown();
            clone2.running = false;
            cycle(deferred);
          } else if (++deferred.cycles < clone2.count) {
            clone2.compiled.call(deferred, context, timer);
          } else {
            timer.stop(deferred);
            deferred.teardown();
            delay(clone2, function () {
              cycle(deferred);
            });
          }
        }
        function filter(array, callback) {
          if (callback === "successful") {
            callback = function (bench) {
              return bench.cycles && _.isFinite(bench.hz) && !bench.error;
            };
          } else if (callback === "fastest" || callback === "slowest") {
            var result = filter(array, "successful").sort(function (a, b) {
              a = a.stats;
              b = b.stats;
              return (a.mean + a.moe > b.mean + b.moe ? 1 : -1) * (callback === "fastest" ? 1 : -1);
            });
            return _.filter(result, function (bench) {
              return result[0].compare(bench) == 0;
            });
          }
          return _.filter(array, callback);
        }
        function formatNumber(number) {
          number = String2(number).split(".");
          return number[0].replace(/(?=(?:\d{3})+$)(?!\b)/g, ",") + (number[1] ? "." + number[1] : "");
        }
        function invoke(benches, name) {
          var args, bench, queued, index = -1, eventProps = {
            currentTarget: benches
          }, options = {
            onStart: _.noop,
            onCycle: _.noop,
            onComplete: _.noop
          }, result = _.toArray(benches);
          function execute() {
            var listeners2, async = isAsync(bench);
            if (async) {
              bench.on("complete", getNext);
              listeners2 = bench.events.complete;
              listeners2.splice(0, 0, listeners2.pop());
            }
            result[index] = _.isFunction(bench && bench[name]) ? bench[name].apply(bench, args) : undefined2;
            return !async && getNext();
          }
          function getNext(event) {
            var cycleEvent, last = bench, async = isAsync(last);
            if (async) {
              last.off("complete", getNext);
              last.emit("complete");
            }
            eventProps.type = "cycle";
            eventProps.target = last;
            cycleEvent = Event2(eventProps);
            options.onCycle.call(benches, cycleEvent);
            if (!cycleEvent.aborted && raiseIndex() !== false) {
              bench = queued ? benches[0] : result[index];
              if (isAsync(bench)) {
                delay(bench, execute);
              } else if (async) {
                while (execute()) {}
              } else {
                return true;
              }
            } else {
              eventProps.type = "complete";
              options.onComplete.call(benches, Event2(eventProps));
            }
            if (event) {
              event.aborted = true;
            } else {
              return false;
            }
          }
          function isAsync(object) {
            var async = args[0] && args[0].async;
            return name == "run" && object instanceof Benchmark2 && ((async == null ? object.options.async : async) && support.timeout || object.defer);
          }
          function raiseIndex() {
            index++;
            if (queued && index > 0) {
              shift.call(benches);
            }
            return (queued ? benches.length : index < result.length) ? index : index = false;
          }
          if (_.isString(name)) {
            args = slice.call(arguments, 2);
          } else {
            options = _.assign(options, name);
            name = options.name;
            args = _.isArray(args = ("args" in options) ? options.args : []) ? args : [args];
            queued = options.queued;
          }
          if (raiseIndex() !== false) {
            bench = result[index];
            eventProps.type = "start";
            eventProps.target = bench;
            options.onStart.call(benches, Event2(eventProps));
            if (name == "run" && benches instanceof Suite && benches.aborted) {
              eventProps.type = "cycle";
              options.onCycle.call(benches, Event2(eventProps));
              eventProps.type = "complete";
              options.onComplete.call(benches, Event2(eventProps));
            } else {
              if (isAsync(bench)) {
                delay(bench, execute);
              } else {
                while (execute()) {}
              }
            }
          }
          return result;
        }
        function join(object, separator1, separator2) {
          var result = [], length = (object = Object2(object)).length, arrayLike = length === length >>> 0;
          separator2 || (separator2 = ": ");
          _.each(object, function (value, key) {
            result.push(arrayLike ? value : key + separator2 + value);
          });
          return result.join(separator1 || ",");
        }
        function abortSuite() {
          var event, suite = this, resetting = calledBy.resetSuite;
          if (suite.running) {
            event = Event2("abort");
            suite.emit(event);
            if (!event.cancelled || resetting) {
              calledBy.abortSuite = true;
              suite.reset();
              delete calledBy.abortSuite;
              if (!resetting) {
                suite.aborted = true;
                invoke(suite, "abort");
              }
            }
          }
          return suite;
        }
        function add(name, fn, options) {
          var suite = this, bench = new Benchmark2(name, fn, options), event = Event2({
            type: "add",
            target: bench
          });
          if ((suite.emit(event), !event.cancelled)) {
            suite.push(bench);
          }
          return suite;
        }
        function cloneSuite(options) {
          var suite = this, result = new suite.constructor(_.assign({}, suite.options, options));
          _.forOwn(suite, function (value, key) {
            if (!_.has(result, key)) {
              result[key] = _.isFunction(_.get(value, "clone")) ? value.clone() : cloneDeep(value);
            }
          });
          return result;
        }
        function filterSuite(callback) {
          var suite = this, result = new suite.constructor(suite.options);
          result.push.apply(result, filter(suite, callback));
          return result;
        }
        function resetSuite() {
          var event, suite = this, aborting = calledBy.abortSuite;
          if (suite.running && !aborting) {
            calledBy.resetSuite = true;
            suite.abort();
            delete calledBy.resetSuite;
          } else if ((suite.aborted || suite.running) && (suite.emit(event = Event2("reset")), !event.cancelled)) {
            suite.aborted = suite.running = false;
            if (!aborting) {
              invoke(suite, "reset");
            }
          }
          return suite;
        }
        function runSuite(options) {
          var suite = this;
          suite.reset();
          suite.running = true;
          options || (options = {});
          invoke(suite, {
            name: "run",
            args: options,
            queued: options.queued,
            onStart: function (event) {
              suite.emit(event);
            },
            onCycle: function (event) {
              var bench = event.target;
              if (bench.error) {
                suite.emit({
                  type: "error",
                  target: bench
                });
              }
              suite.emit(event);
              event.aborted = suite.aborted;
            },
            onComplete: function (event) {
              suite.running = false;
              suite.emit(event);
            }
          });
          return suite;
        }
        function emit(type) {
          var listeners2, object = this, event = Event2(type), events = object.events, args = (arguments[0] = event, arguments);
          event.currentTarget || (event.currentTarget = object);
          event.target || (event.target = object);
          delete event.result;
          if (events && (listeners2 = _.has(events, event.type) && events[event.type])) {
            _.each(listeners2.slice(), function (listener) {
              if ((event.result = listener.apply(object, args)) === false) {
                event.cancelled = true;
              }
              return !event.aborted;
            });
          }
          return event.result;
        }
        function listeners(type) {
          var object = this, events = object.events || (object.events = {});
          return _.has(events, type) ? events[type] : events[type] = [];
        }
        function off(type, listener) {
          var object = this, events = object.events;
          if (!events) {
            return object;
          }
          _.each(type ? type.split(" ") : events, function (listeners2, type2) {
            var index;
            if (typeof listeners2 == "string") {
              type2 = listeners2;
              listeners2 = _.has(events, type2) && events[type2];
            }
            if (listeners2) {
              if (listener) {
                index = _.indexOf(listeners2, listener);
                if (index > -1) {
                  listeners2.splice(index, 1);
                }
              } else {
                listeners2.length = 0;
              }
            }
          });
          return object;
        }
        function on(type, listener) {
          var object = this, events = object.events || (object.events = {});
          _.each(type.split(" "), function (type2) {
            (_.has(events, type2) ? events[type2] : events[type2] = []).push(listener);
          });
          return object;
        }
        function abort() {
          var event, bench = this, resetting = calledBy.reset;
          if (bench.running) {
            event = Event2("abort");
            bench.emit(event);
            if (!event.cancelled || resetting) {
              calledBy.abort = true;
              bench.reset();
              delete calledBy.abort;
              if (support.timeout) {
                clearTimeout2(bench._timerId);
                delete bench._timerId;
              }
              if (!resetting) {
                bench.aborted = true;
                bench.running = false;
              }
            }
          }
          return bench;
        }
        function clone(options) {
          var bench = this, result = new bench.constructor(_.assign({}, bench, options));
          result.options = _.assign({}, cloneDeep(bench.options), cloneDeep(options));
          _.forOwn(bench, function (value, key) {
            if (!_.has(result, key)) {
              result[key] = cloneDeep(value);
            }
          });
          return result;
        }
        function compare(other) {
          var bench = this;
          if (bench == other) {
            return 0;
          }
          var critical, zStat, sample1 = bench.stats.sample, sample2 = other.stats.sample, size1 = sample1.length, size2 = sample2.length, maxSize = max(size1, size2), minSize = min(size1, size2), u1 = getU(sample1, sample2), u2 = getU(sample2, sample1), u = min(u1, u2);
          function getScore(xA, sampleB) {
            return _.reduce(sampleB, function (total, xB) {
              return total + (xB > xA ? 0 : xB < xA ? 1 : 0.5);
            }, 0);
          }
          function getU(sampleA, sampleB) {
            return _.reduce(sampleA, function (total, xA) {
              return total + getScore(xA, sampleB);
            }, 0);
          }
          function getZ(u3) {
            return (u3 - size1 * size2 / 2) / sqrt(size1 * size2 * (size1 + size2 + 1) / 12);
          }
          if (size1 + size2 > 30) {
            zStat = getZ(u);
            return abs(zStat) > 1.96 ? u == u1 ? 1 : -1 : 0;
          }
          critical = maxSize < 5 || minSize < 3 ? 0 : uTable[maxSize][minSize - 3];
          return u <= critical ? u == u1 ? 1 : -1 : 0;
        }
        function reset() {
          var bench = this;
          if (bench.running && !calledBy.abort) {
            calledBy.reset = true;
            bench.abort();
            delete calledBy.reset;
            return bench;
          }
          var event, index = 0, changes = [], queue = [];
          var data = {
            destination: bench,
            source: _.assign({}, cloneDeep(bench.constructor.prototype), cloneDeep(bench.options))
          };
          do {
            _.forOwn(data.source, function (value, key) {
              var changed, destination = data.destination, currValue = destination[key];
              if ((/^_|^events$|^on[A-Z]/).test(key)) {
                return;
              }
              if (_.isObjectLike(value)) {
                if (_.isArray(value)) {
                  if (!_.isArray(currValue)) {
                    changed = true;
                    currValue = [];
                  }
                  if (currValue.length != value.length) {
                    changed = true;
                    currValue = currValue.slice(0, value.length);
                    currValue.length = value.length;
                  }
                } else if (!_.isObjectLike(currValue)) {
                  changed = true;
                  currValue = {};
                }
                if (changed) {
                  changes.push({
                    destination,
                    key,
                    value: currValue
                  });
                }
                queue.push({
                  destination: currValue,
                  source: value
                });
              } else if (!_.eq(currValue, value) && value !== undefined2) {
                changes.push({
                  destination,
                  key,
                  value
                });
              }
            });
          } while (data = queue[index++]);
          if (changes.length && (bench.emit(event = Event2("reset")), !event.cancelled)) {
            _.each(changes, function (data2) {
              data2.destination[data2.key] = data2.value;
            });
          }
          return bench;
        }
        function toStringBench() {
          var bench = this, error = bench.error, hz = bench.hz, id = bench.id, stats = bench.stats, size = stats.sample.length, pm = "\xB1", result = bench.name || (_.isNaN(id) ? id : "<Test #" + id + ">");
          if (error) {
            var errorStr;
            if (!_.isObject(error)) {
              errorStr = String2(error);
            } else if (!_.isError(Error)) {
              errorStr = join(error);
            } else {
              errorStr = join(_.assign({
                name: error.name,
                message: error.message
              }, error));
            }
            result += ": " + errorStr;
          } else {
            result += " x " + formatNumber(hz.toFixed(hz < 100 ? 2 : 0)) + " ops/sec " + pm + stats.rme.toFixed(2) + "% (" + size + " run" + (size == 1 ? "" : "s") + " sampled)";
          }
          return result;
        }
        function clock() {
          var options = Benchmark2.options, templateData = {}, timers = [{
            ns: timer.ns,
            res: max(15e-4, getRes("ms")),
            unit: "ms"
          }];
          clock = function (clone2) {
            var deferred;
            if (clone2 instanceof Deferred) {
              deferred = clone2;
              clone2 = deferred.benchmark;
            }
            var bench = clone2._original, stringable = isStringable(bench.fn), count = bench.count = clone2.count, decompilable = stringable || support.decompilation && (clone2.setup !== _.noop || clone2.teardown !== _.noop), id = bench.id, name = bench.name || (typeof id == "number" ? "<Test #" + id + ">" : id), result = 0;
            clone2.minTime = bench.minTime || (bench.minTime = bench.options.minTime = options.minTime);
            var funcBody = deferred ? 'var d#=this,${fnArg}=d#,m#=d#.benchmark._original,f#=m#.fn,su#=m#.setup,td#=m#.teardown;if(!d#.cycles){d#.fn=function(){var ${fnArg}=d#;if(typeof f#=="function"){try{${fn}\n}catch(e#){f#(d#)}}else{${fn}\n}};d#.teardown=function(){d#.cycles=0;if(typeof td#=="function"){try{${teardown}\n}catch(e#){td#()}}else{${teardown}\n}};if(typeof su#=="function"){try{${setup}\n}catch(e#){su#()}}else{${setup}\n};t#.start(d#);}d#.fn();return{uid:"${uid}"}' : 'var r#,s#,m#=this,f#=m#.fn,i#=m#.count,n#=t#.ns;${setup}\n${begin};while(i#--){${fn}\n}${end};${teardown}\nreturn{elapsed:r#,uid:"${uid}"}';
            var compiled = bench.compiled = clone2.compiled = createCompiled(bench, decompilable, deferred, funcBody), isEmpty = !(templateData.fn || stringable);
            try {
              if (isEmpty) {
                throw new Error('The test "' + name + '" is empty. This may be the result of dead code removal.');
              } else if (!deferred) {
                bench.count = 1;
                compiled = decompilable && (compiled.call(bench, context, timer) || ({})).uid == templateData.uid && compiled;
                bench.count = count;
              }
            } catch (e) {
              compiled = null;
              clone2.error = e || new Error(String2(e));
              bench.count = count;
            }
            if (!compiled && !deferred && !isEmpty) {
              funcBody = (stringable || decompilable && !clone2.error ? "function f#(){${fn}\n}var r#,s#,m#=this,i#=m#.count" : "var r#,s#,m#=this,f#=m#.fn,i#=m#.count") + ",n#=t#.ns;${setup}\n${begin};m#.f#=f#;while(i#--){m#.f#()}${end};delete m#.f#;${teardown}\nreturn{elapsed:r#}";
              compiled = createCompiled(bench, decompilable, deferred, funcBody);
              try {
                bench.count = 1;
                compiled.call(bench, context, timer);
                bench.count = count;
                delete clone2.error;
              } catch (e) {
                bench.count = count;
                if (!clone2.error) {
                  clone2.error = e || new Error(String2(e));
                }
              }
            }
            if (!clone2.error) {
              compiled = bench.compiled = clone2.compiled = createCompiled(bench, decompilable, deferred, funcBody);
              result = compiled.call(deferred || bench, context, timer).elapsed;
            }
            return result;
          };
          function createCompiled(bench, decompilable, deferred, body) {
            var fn = bench.fn, fnArg = deferred ? getFirstArgument(fn) || "deferred" : "";
            templateData.uid = uid + uidCounter++;
            _.assign(templateData, {
              setup: decompilable ? getSource(bench.setup) : interpolate("m#.setup()"),
              fn: decompilable ? getSource(fn) : interpolate("m#.fn(" + fnArg + ")"),
              fnArg,
              teardown: decompilable ? getSource(bench.teardown) : interpolate("m#.teardown()")
            });
            if (timer.unit == "ns") {
              _.assign(templateData, {
                begin: interpolate("s#=n#()"),
                end: interpolate("r#=n#(s#);r#=r#[0]+(r#[1]/1e9)")
              });
            } else if (timer.unit == "us") {
              if (timer.ns.stop) {
                _.assign(templateData, {
                  begin: interpolate("s#=n#.start()"),
                  end: interpolate("r#=n#.microseconds()/1e6")
                });
              } else {
                _.assign(templateData, {
                  begin: interpolate("s#=n#()"),
                  end: interpolate("r#=(n#()-s#)/1e6")
                });
              }
            } else if (timer.ns.now) {
              _.assign(templateData, {
                begin: interpolate("s#=n#.now()"),
                end: interpolate("r#=(n#.now()-s#)/1e3")
              });
            } else {
              _.assign(templateData, {
                begin: interpolate("s#=new n#().getTime()"),
                end: interpolate("r#=(new n#().getTime()-s#)/1e3")
              });
            }
            timer.start = createFunction(interpolate("o#"), interpolate("var n#=this.ns,${begin};o#.elapsed=0;o#.timeStamp=s#"));
            timer.stop = createFunction(interpolate("o#"), interpolate("var n#=this.ns,s#=o#.timeStamp,${end};o#.elapsed=r#"));
            return createFunction(interpolate("window,t#"), "var global = window, clearTimeout = global.clearTimeout, setTimeout = global.setTimeout;\n" + interpolate(body));
          }
          function getRes(unit) {
            var measured, begin, count = 30, divisor = 1e3, ns = timer.ns, sample = [];
            while (count--) {
              if (unit == "us") {
                divisor = 1e6;
                if (ns.stop) {
                  ns.start();
                  while (!(measured = ns.microseconds())) {}
                } else {
                  begin = ns();
                  while (!(measured = ns() - begin)) {}
                }
              } else if (unit == "ns") {
                divisor = 1e9;
                begin = (begin = ns())[0] + begin[1] / divisor;
                while (!(measured = (measured = ns())[0] + measured[1] / divisor - begin)) {}
                divisor = 1;
              } else if (ns.now) {
                begin = ns.now();
                while (!(measured = ns.now() - begin)) {}
              } else {
                begin = new ns().getTime();
                while (!(measured = new ns().getTime() - begin)) {}
              }
              if (measured > 0) {
                sample.push(measured);
              } else {
                sample.push(Infinity);
                break;
              }
            }
            return getMean(sample) / divisor;
          }
          function interpolate(string) {
            return _.template(string.replace(/\#/g, (/\d+/).exec(templateData.uid)))(templateData);
          }
          try {
            if (timer.ns = new (context.chrome || context.chromium).Interval()) {
              timers.push({
                ns: timer.ns,
                res: getRes("us"),
                unit: "us"
              });
            }
          } catch (e) {}
          if (processObject && typeof (timer.ns = processObject.hrtime) == "function") {
            timers.push({
              ns: timer.ns,
              res: getRes("ns"),
              unit: "ns"
            });
          }
          if (microtimeObject && typeof (timer.ns = microtimeObject.now) == "function") {
            timers.push({
              ns: timer.ns,
              res: getRes("us"),
              unit: "us"
            });
          }
          timer = _.minBy(timers, "res");
          if (timer.res == Infinity) {
            throw new Error("Benchmark.js was unable to find a working timer.");
          }
          options.minTime || (options.minTime = max(timer.res / 2 / 0.01, 0.05));
          return clock.apply(null, arguments);
        }
        function compute(bench, options) {
          options || (options = {});
          var async = options.async, elapsed = 0, initCount = bench.initCount, minSamples = bench.minSamples, queue = [], sample = bench.stats.sample;
          function enqueue() {
            queue.push(_.assign(bench.clone(), {
              _original: bench,
              events: {
                abort: [update],
                cycle: [update],
                error: [update],
                start: [update]
              }
            }));
          }
          function update(event) {
            var clone2 = this, type = event.type;
            if (bench.running) {
              if (type == "start") {
                clone2.count = bench.initCount;
              } else {
                if (type == "error") {
                  bench.error = clone2.error;
                }
                if (type == "abort") {
                  bench.abort();
                  bench.emit("cycle");
                } else {
                  event.currentTarget = event.target = bench;
                  bench.emit(event);
                }
              }
            } else if (bench.aborted) {
              clone2.events.abort.length = 0;
              clone2.abort();
            }
          }
          function evaluate(event) {
            var critical, df, mean, moe, rme, sd, sem, variance, clone2 = event.target, done = bench.aborted, now = _.now(), size = sample.push(clone2.times.period), maxedOut = size >= minSamples && (elapsed += now - clone2.times.timeStamp) / 1e3 > bench.maxTime, times = bench.times, varOf = function (sum, x) {
              return sum + pow(x - mean, 2);
            };
            if (done || clone2.hz == Infinity) {
              maxedOut = !(size = sample.length = queue.length = 0);
            }
            if (!done) {
              mean = getMean(sample);
              variance = _.reduce(sample, varOf, 0) / (size - 1) || 0;
              sd = sqrt(variance);
              sem = sd / sqrt(size);
              df = size - 1;
              critical = tTable[Math2.round(df) || 1] || tTable.infinity;
              moe = sem * critical;
              rme = moe / mean * 100 || 0;
              _.assign(bench.stats, {
                deviation: sd,
                mean,
                moe,
                rme,
                sem,
                variance
              });
              if (maxedOut) {
                bench.initCount = initCount;
                bench.running = false;
                done = true;
                times.elapsed = (now - times.timeStamp) / 1e3;
              }
              if (bench.hz != Infinity) {
                bench.hz = 1 / mean;
                times.cycle = mean * bench.count;
                times.period = mean;
              }
            }
            if (queue.length < 2 && !maxedOut) {
              enqueue();
            }
            event.aborted = done;
          }
          enqueue();
          invoke(queue, {
            name: "run",
            args: {
              async
            },
            queued: true,
            onCycle: evaluate,
            onComplete: function () {
              bench.emit("complete");
            }
          });
        }
        function cycle(clone2, options) {
          options || (options = {});
          var deferred;
          if (clone2 instanceof Deferred) {
            deferred = clone2;
            clone2 = clone2.benchmark;
          }
          var clocked, cycles, divisor, event, minTime, period, async = options.async, bench = clone2._original, count = clone2.count, times = clone2.times;
          if (clone2.running) {
            cycles = ++clone2.cycles;
            clocked = deferred ? deferred.elapsed : clock(clone2);
            minTime = clone2.minTime;
            if (cycles > bench.cycles) {
              bench.cycles = cycles;
            }
            if (clone2.error) {
              event = Event2("error");
              event.message = clone2.error;
              clone2.emit(event);
              if (!event.cancelled) {
                clone2.abort();
              }
            }
          }
          if (clone2.running) {
            bench.times.cycle = times.cycle = clocked;
            period = bench.times.period = times.period = clocked / count;
            bench.hz = clone2.hz = 1 / period;
            bench.initCount = clone2.initCount = count;
            clone2.running = clocked < minTime;
            if (clone2.running) {
              if (!clocked && (divisor = divisors[clone2.cycles]) != null) {
                count = floor(4e6 / divisor);
              }
              if (count <= clone2.count) {
                count += Math2.ceil((minTime - clocked) / period);
              }
              clone2.running = count != Infinity;
            }
          }
          event = Event2("cycle");
          clone2.emit(event);
          if (event.aborted) {
            clone2.abort();
          }
          if (clone2.running) {
            clone2.count = count;
            if (deferred) {
              clone2.compiled.call(deferred, context, timer);
            } else if (async) {
              delay(clone2, function () {
                cycle(clone2, options);
              });
            } else {
              cycle(clone2);
            }
          } else {
            if (support.browser) {
              runScript(uid + "=1;delete " + uid);
            }
            clone2.emit("complete");
          }
        }
        function run(options) {
          var bench = this, event = Event2("start");
          bench.running = false;
          bench.reset();
          bench.running = true;
          bench.count = bench.initCount;
          bench.times.timeStamp = _.now();
          bench.emit(event);
          if (!event.cancelled) {
            options = {
              async: ((options = options && options.async) == null ? bench.async : options) && support.timeout
            };
            if (bench._original) {
              if (bench.defer) {
                Deferred(bench);
              } else {
                cycle(bench, options);
              }
            } else {
              compute(bench, options);
            }
          }
          return bench;
        }
        _.assign(Benchmark2, {
          options: {
            async: false,
            defer: false,
            delay: 5e-3,
            id: undefined2,
            initCount: 1,
            maxTime: 5,
            minSamples: 5,
            minTime: 0,
            name: undefined2,
            onAbort: undefined2,
            onComplete: undefined2,
            onCycle: undefined2,
            onError: undefined2,
            onReset: undefined2,
            onStart: undefined2
          },
          platform: context.platform || require2("platform") || ({
            description: context.navigator && context.navigator.userAgent || null,
            layout: null,
            product: null,
            name: null,
            manufacturer: null,
            os: null,
            prerelease: null,
            version: null,
            toString: function () {
              return this.description || "";
            }
          }),
          version: "2.1.4"
        });
        _.assign(Benchmark2, {
          filter,
          formatNumber,
          invoke,
          join,
          runInContext,
          support
        });
        _.each(["each", "forEach", "forOwn", "has", "indexOf", "map", "reduce"], function (methodName) {
          Benchmark2[methodName] = _[methodName];
        });
        _.assign(Benchmark2.prototype, {
          count: 0,
          cycles: 0,
          hz: 0,
          compiled: undefined2,
          error: undefined2,
          fn: undefined2,
          aborted: false,
          running: false,
          setup: _.noop,
          teardown: _.noop,
          stats: {
            moe: 0,
            rme: 0,
            sem: 0,
            deviation: 0,
            mean: 0,
            sample: [],
            variance: 0
          },
          times: {
            cycle: 0,
            elapsed: 0,
            period: 0,
            timeStamp: 0
          }
        });
        _.assign(Benchmark2.prototype, {
          abort,
          clone,
          compare,
          emit,
          listeners,
          off,
          on,
          reset,
          run,
          toString: toStringBench
        });
        _.assign(Deferred.prototype, {
          benchmark: null,
          cycles: 0,
          elapsed: 0,
          timeStamp: 0
        });
        _.assign(Deferred.prototype, {
          resolve
        });
        _.assign(Event2.prototype, {
          aborted: false,
          cancelled: false,
          currentTarget: undefined2,
          result: undefined2,
          target: undefined2,
          timeStamp: 0,
          type: ""
        });
        Suite.options = {
          name: undefined2
        };
        _.assign(Suite.prototype, {
          length: 0,
          aborted: false,
          running: false
        });
        _.assign(Suite.prototype, {
          abort: abortSuite,
          add,
          clone: cloneSuite,
          emit,
          filter: filterSuite,
          join: arrayRef.join,
          listeners,
          off,
          on,
          pop: arrayRef.pop,
          push,
          reset: resetSuite,
          run: runSuite,
          reverse: arrayRef.reverse,
          shift,
          slice,
          sort: arrayRef.sort,
          splice: arrayRef.splice,
          unshift
        });
        _.assign(Benchmark2, {
          Deferred,
          Event: Event2,
          Suite
        });
        _.each(["each", "forEach", "indexOf", "map", "reduce"], function (methodName) {
          var func = _[methodName];
          Suite.prototype[methodName] = function () {
            var args = [this];
            push.apply(args, arguments);
            return func.apply(_, args);
          };
        });
        _.each(["pop", "shift", "splice"], function (methodName) {
          var func = arrayRef[methodName];
          Suite.prototype[methodName] = function () {
            var value = this, result = func.apply(value, arguments);
            if (value.length === 0) {
              delete value[0];
            }
            return result;
          };
        });
        Suite.prototype.unshift = function () {
          var value = this;
          unshift.apply(value, arguments);
          return value.length;
        };
        return Benchmark2;
      }
      if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
        define(["lodash", "platform"], function (_, platform) {
          return runInContext({
            _,
            platform
          });
        });
      } else {
        var Benchmark = runInContext();
        if (freeExports && freeModule) {
          if (moduleExports) {
            (freeModule.exports = Benchmark).Benchmark = Benchmark;
          }
          freeExports.Benchmark = Benchmark;
        } else {
          root.Benchmark = Benchmark;
        }
      }
    }).call(exports);
  });
  // _build/default/node_modules/reason-react/src/ReasonReactRouter.bs.js
  var require_ReasonReactRouter_bs = __commonJS(exports => {
    "use strict";
    var _s23 = $RefreshSig$();
    var Curry = require_curry();
    var React2 = require_react();
    function safeMakeEvent(eventName) {
      if (typeof Event === "function") {
        return new Event(eventName);
      }
      var $$event = document.createEvent("Event");
      $$event.initEvent(eventName, true, true);
      return $$event;
    }
    function path(param) {
      var $$window = typeof window === "undefined" ? void 0 : window;
      if ($$window === void 0) {
        return 0;
      }
      var raw = $$window.location.pathname;
      switch (raw) {
        case "":
        case "/":
          return 0;
        default:
          var raw$1 = raw.slice(1);
          var match = raw$1[raw$1.length - 1 | 0];
          var raw$2 = match === "/" ? raw$1.slice(0, -1) : raw$1;
          var a = raw$2.split("/");
          var _i = a.length - 1 | 0;
          var _res = 0;
          while (true) {
            var res = _res;
            var i = _i;
            if (i < 0) {
              return res;
            }
            _res = {
              hd: a[i],
              tl: res
            };
            _i = i - 1 | 0;
            continue;
          }
          ;
      }
    }
    function hash(param) {
      var $$window = typeof window === "undefined" ? void 0 : window;
      if ($$window === void 0) {
        return "";
      }
      var raw = $$window.location.hash;
      switch (raw) {
        case "":
        case "#":
          return "";
        default:
          return raw.slice(1);
      }
    }
    function search(param) {
      var $$window = typeof window === "undefined" ? void 0 : window;
      if ($$window === void 0) {
        return "";
      }
      var raw = $$window.location.search;
      switch (raw) {
        case "":
        case "?":
          return "";
        default:
          return raw.slice(1);
      }
    }
    function push(path2) {
      var match = typeof history === "undefined" ? void 0 : history;
      var match$1 = typeof window === "undefined" ? void 0 : window;
      if (match !== void 0 && match$1 !== void 0) {
        match.pushState(null, "", path2);
        match$1.dispatchEvent(safeMakeEvent("popstate"));
        return;
      }
    }
    function replace(path2) {
      var match = typeof history === "undefined" ? void 0 : history;
      var match$1 = typeof window === "undefined" ? void 0 : window;
      if (match !== void 0 && match$1 !== void 0) {
        match.replaceState(null, "", path2);
        match$1.dispatchEvent(safeMakeEvent("popstate"));
        return;
      }
    }
    function urlNotEqual(a, b) {
      if (a.hash !== b.hash || a.search !== b.search) {
        return true;
      } else {
        var _aList = a.path;
        var _bList = b.path;
        while (true) {
          var bList = _bList;
          var aList = _aList;
          if (!aList) {
            if (bList) {
              return true;
            } else {
              return false;
            }
          }
          if (!bList) {
            return true;
          }
          if (aList.hd !== bList.hd) {
            return true;
          }
          _bList = bList.tl;
          _aList = aList.tl;
          continue;
        }
        ;
      }
    }
    function url(param) {
      return {
        path: path(void 0),
        hash: hash(void 0),
        search: search(void 0)
      };
    }
    function watchUrl(callback) {
      var $$window = typeof window === "undefined" ? void 0 : window;
      if ($$window === void 0) {
        return function (param) {};
      }
      var watcherID = function (param) {
        return Curry._1(callback, url(void 0));
      };
      $$window.addEventListener("popstate", watcherID);
      return watcherID;
    }
    function unwatchUrl(watcherID) {
      var $$window = typeof window === "undefined" ? void 0 : window;
      if ($$window !== void 0) {
        $$window.removeEventListener("popstate", watcherID);
        return;
      }
    }
    function useUrl(serverUrl, param) {
      _s23();
      var match = React2.useState(function () {
        if (serverUrl !== void 0) {
          return serverUrl;
        } else {
          return url(void 0);
        }
      });
      var setUrl = match[1];
      var url$1 = match[0];
      React2.useEffect(function () {
        var watcherId = watchUrl(function (url2) {
          return Curry._1(setUrl, function (param2) {
            return url2;
          });
        });
        var newUrl = url(void 0);
        if (urlNotEqual(newUrl, url$1)) {
          Curry._1(setUrl, function (param2) {
            return newUrl;
          });
        }
        return function (param2) {
          return unwatchUrl(watcherId);
        };
      }, []);
      return url$1;
    }
    _s23(useUrl, "/JKNK9SWjeaSTdgg7cz97+LeRSM=");
    var dangerouslyGetInitialUrl = url;
    exports.push = push;
    exports.replace = replace;
    exports.watchUrl = watchUrl;
    exports.unwatchUrl = unwatchUrl;
    exports.dangerouslyGetInitialUrl = dangerouslyGetInitialUrl;
    exports.useUrl = useUrl;
  });
  // node_modules/mori/mori.js
  var require_mori = __commonJS((exports, module) => {
    (function (definition) {
      if (typeof exports === "object") {
        module.exports = definition();
      } else if (typeof define === "function" && define.amd) {
        define(definition);
      } else {
        mori = definition();
      }
    })(function () {
      return (function () {
        if (typeof Math.imul == "undefined" || Math.imul(4294967295, 5) == 0) {
          Math.imul = function (a, b) {
            var ah2 = a >>> 16 & 65535;
            var al = a & 65535;
            var bh2 = b >>> 16 & 65535;
            var bl = b & 65535;
            return al * bl + (ah2 * bl + al * bh2 << 16 >>> 0) | 0;
          };
        }
        var k, aa = this;
        function n(a) {
          var b = typeof a;
          if (b == "object") if (a) {
            if (a instanceof Array) return "array";
            if (a instanceof Object) return b;
            var c = Object.prototype.toString.call(a);
            if (c == "[object Window]") return "object";
            if (c == "[object Array]" || typeof a.length == "number" && typeof a.splice != "undefined" && typeof a.propertyIsEnumerable != "undefined" && !a.propertyIsEnumerable("splice")) return "array";
            if (c == "[object Function]" || typeof a.call != "undefined" && typeof a.propertyIsEnumerable != "undefined" && !a.propertyIsEnumerable("call")) return "function";
          } else return "null"; else if (b == "function" && typeof a.call == "undefined") return "object";
          return b;
        }
        var ba = "closure_uid_" + (1e9 * Math.random() >>> 0), ca = 0;
        function r(a, b) {
          var c = a.split("."), d = aa;
          (c[0] in d) || !d.execScript || d.execScript("var " + c[0]);
          for (var e; c.length && (e = c.shift()); ) c.length || b === void 0 ? d = d[e] ? d[e] : d[e] = {} : d[e] = b;
        }
        ;
        function da(a) {
          return Array.prototype.join.call(arguments, "");
        }
        ;
        function ea(a, b) {
          for (var c in a) b.call(void 0, a[c], c, a);
        }
        ;
        function fa(a, b) {
          a != null && this.append.apply(this, arguments);
        }
        fa.prototype.Za = "";
        fa.prototype.append = function (a, b, c) {
          this.Za += a;
          if (b != null) for (var d = 1; d < arguments.length; d++) this.Za += arguments[d];
          return this;
        };
        fa.prototype.clear = function () {
          this.Za = "";
        };
        fa.prototype.toString = function () {
          return this.Za;
        };
        function ga(a, b) {
          a.sort(b || ha);
        }
        function ia(a, b) {
          for (var c = 0; c < a.length; c++) a[c] = {
            index: c,
            value: a[c]
          };
          var d = b || ha;
          ga(a, function (a2, b2) {
            return d(a2.value, b2.value) || a2.index - b2.index;
          });
          for (c = 0; c < a.length; c++) a[c] = a[c].value;
        }
        function ha(a, b) {
          return a > b ? 1 : a < b ? -1 : 0;
        }
        ;
        var ja;
        if (typeof ka === "undefined") var ka = function () {
          throw Error("No *print-fn* fn set for evaluation environment");
        };
        var la = null, ma = null;
        if (typeof na === "undefined") var na = null;
        function oa() {
          return new pa(null, 5, [sa, true, ua, true, wa, false, ya, false, za, la], null);
        }
        function t(a) {
          return a != null && a !== false;
        }
        function Aa(a) {
          return t(a) ? false : true;
        }
        function w(a, b) {
          return a[n(b == null ? null : b)] ? true : a._ ? true : false;
        }
        function Ba(a) {
          return a == null ? null : a.constructor;
        }
        function x(a, b) {
          var c = Ba(b), c = t(t(c) ? c.Yb : c) ? c.Xb : n(b);
          return Error(["No protocol method ", a, " defined for type ", c, ": ", b].join(""));
        }
        function Da(a) {
          var b = a.Xb;
          return t(b) ? b : "" + z(a);
        }
        var Ea = typeof Symbol !== "undefined" && n(Symbol) === "function" ? Symbol.Cc : "@@iterator";
        function Fa(a) {
          for (var b = a.length, c = Array(b), d = 0; ; ) if (d < b) (c[d] = a[d], d += 1); else break;
          return c;
        }
        function Ha(a) {
          for (var b = Array(arguments.length), c = 0; ; ) if (c < b.length) (b[c] = arguments[c], c += 1); else return b;
        }
        var Ia = (function () {
          function a(a2, b2) {
            function c2(a3, b3) {
              a3.push(b3);
              return a3;
            }
            var g = [];
            return A.c ? A.c(c2, g, b2) : A.call(null, c2, g, b2);
          }
          function b(a2) {
            return c.a(null, a2);
          }
          var c = null, c = function (d, c2) {
            switch (arguments.length) {
              case 1:
                return b.call(this, d);
              case 2:
                return a.call(this, 0, c2);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.b = b;
          c.a = a;
          return c;
        })(), Ja = {}, La = {};
        function Ma(a) {
          if (a ? a.L : a) return a.L(a);
          var b;
          b = Ma[n(a == null ? null : a)];
          if (!b && (b = Ma._, !b)) throw x("ICounted.-count", a);
          return b.call(null, a);
        }
        function Na(a) {
          if (a ? a.J : a) return a.J(a);
          var b;
          b = Na[n(a == null ? null : a)];
          if (!b && (b = Na._, !b)) throw x("IEmptyableCollection.-empty", a);
          return b.call(null, a);
        }
        var Qa = {};
        function Ra(a, b) {
          if (a ? a.G : a) return a.G(a, b);
          var c;
          c = Ra[n(a == null ? null : a)];
          if (!c && (c = Ra._, !c)) throw x("ICollection.-conj", a);
          return c.call(null, a, b);
        }
        var Ta = {}, C = (function () {
          function a(a2, b2, c2) {
            if (a2 ? a2.$ : a2) return a2.$(a2, b2, c2);
            var g;
            g = C[n(a2 == null ? null : a2)];
            if (!g && (g = C._, !g)) throw x("IIndexed.-nth", a2);
            return g.call(null, a2, b2, c2);
          }
          function b(a2, b2) {
            if (a2 ? a2.Q : a2) return a2.Q(a2, b2);
            var c2;
            c2 = C[n(a2 == null ? null : a2)];
            if (!c2 && (c2 = C._, !c2)) throw x("IIndexed.-nth", a2);
            return c2.call(null, a2, b2);
          }
          var c = null, c = function (d, c2, f) {
            switch (arguments.length) {
              case 2:
                return b.call(this, d, c2);
              case 3:
                return a.call(this, d, c2, f);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.a = b;
          c.c = a;
          return c;
        })(), Ua = {};
        function Va(a) {
          if (a ? a.N : a) return a.N(a);
          var b;
          b = Va[n(a == null ? null : a)];
          if (!b && (b = Va._, !b)) throw x("ISeq.-first", a);
          return b.call(null, a);
        }
        function Wa(a) {
          if (a ? a.S : a) return a.S(a);
          var b;
          b = Wa[n(a == null ? null : a)];
          if (!b && (b = Wa._, !b)) throw x("ISeq.-rest", a);
          return b.call(null, a);
        }
        var Xa = {}, Za = {}, $a = (function () {
          function a(a2, b2, c2) {
            if (a2 ? a2.s : a2) return a2.s(a2, b2, c2);
            var g;
            g = $a[n(a2 == null ? null : a2)];
            if (!g && (g = $a._, !g)) throw x("ILookup.-lookup", a2);
            return g.call(null, a2, b2, c2);
          }
          function b(a2, b2) {
            if (a2 ? a2.t : a2) return a2.t(a2, b2);
            var c2;
            c2 = $a[n(a2 == null ? null : a2)];
            if (!c2 && (c2 = $a._, !c2)) throw x("ILookup.-lookup", a2);
            return c2.call(null, a2, b2);
          }
          var c = null, c = function (c2, e, f) {
            switch (arguments.length) {
              case 2:
                return b.call(this, c2, e);
              case 3:
                return a.call(this, c2, e, f);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.a = b;
          c.c = a;
          return c;
        })(), ab = {};
        function bb(a, b) {
          if (a ? a.rb : a) return a.rb(a, b);
          var c;
          c = bb[n(a == null ? null : a)];
          if (!c && (c = bb._, !c)) throw x("IAssociative.-contains-key?", a);
          return c.call(null, a, b);
        }
        function cb(a, b, c) {
          if (a ? a.Ka : a) return a.Ka(a, b, c);
          var d;
          d = cb[n(a == null ? null : a)];
          if (!d && (d = cb._, !d)) throw x("IAssociative.-assoc", a);
          return d.call(null, a, b, c);
        }
        var db = {};
        function eb(a, b) {
          if (a ? a.wb : a) return a.wb(a, b);
          var c;
          c = eb[n(a == null ? null : a)];
          if (!c && (c = eb._, !c)) throw x("IMap.-dissoc", a);
          return c.call(null, a, b);
        }
        var fb = {};
        function hb(a) {
          if (a ? a.hb : a) return a.hb(a);
          var b;
          b = hb[n(a == null ? null : a)];
          if (!b && (b = hb._, !b)) throw x("IMapEntry.-key", a);
          return b.call(null, a);
        }
        function ib(a) {
          if (a ? a.ib : a) return a.ib(a);
          var b;
          b = ib[n(a == null ? null : a)];
          if (!b && (b = ib._, !b)) throw x("IMapEntry.-val", a);
          return b.call(null, a);
        }
        var jb = {};
        function kb(a, b) {
          if (a ? a.Eb : a) return a.Eb(a, b);
          var c;
          c = kb[n(a == null ? null : a)];
          if (!c && (c = kb._, !c)) throw x("ISet.-disjoin", a);
          return c.call(null, a, b);
        }
        function lb(a) {
          if (a ? a.La : a) return a.La(a);
          var b;
          b = lb[n(a == null ? null : a)];
          if (!b && (b = lb._, !b)) throw x("IStack.-peek", a);
          return b.call(null, a);
        }
        function mb(a) {
          if (a ? a.Ma : a) return a.Ma(a);
          var b;
          b = mb[n(a == null ? null : a)];
          if (!b && (b = mb._, !b)) throw x("IStack.-pop", a);
          return b.call(null, a);
        }
        var nb = {};
        function pb(a, b, c) {
          if (a ? a.Ua : a) return a.Ua(a, b, c);
          var d;
          d = pb[n(a == null ? null : a)];
          if (!d && (d = pb._, !d)) throw x("IVector.-assoc-n", a);
          return d.call(null, a, b, c);
        }
        function qb(a) {
          if (a ? a.Ra : a) return a.Ra(a);
          var b;
          b = qb[n(a == null ? null : a)];
          if (!b && (b = qb._, !b)) throw x("IDeref.-deref", a);
          return b.call(null, a);
        }
        var rb = {};
        function sb(a) {
          if (a ? a.H : a) return a.H(a);
          var b;
          b = sb[n(a == null ? null : a)];
          if (!b && (b = sb._, !b)) throw x("IMeta.-meta", a);
          return b.call(null, a);
        }
        var tb = {};
        function ub(a, b) {
          if (a ? a.F : a) return a.F(a, b);
          var c;
          c = ub[n(a == null ? null : a)];
          if (!c && (c = ub._, !c)) throw x("IWithMeta.-with-meta", a);
          return c.call(null, a, b);
        }
        var vb = {}, wb = (function () {
          function a(a2, b2, c2) {
            if (a2 ? a2.O : a2) return a2.O(a2, b2, c2);
            var g;
            g = wb[n(a2 == null ? null : a2)];
            if (!g && (g = wb._, !g)) throw x("IReduce.-reduce", a2);
            return g.call(null, a2, b2, c2);
          }
          function b(a2, b2) {
            if (a2 ? a2.R : a2) return a2.R(a2, b2);
            var c2;
            c2 = wb[n(a2 == null ? null : a2)];
            if (!c2 && (c2 = wb._, !c2)) throw x("IReduce.-reduce", a2);
            return c2.call(null, a2, b2);
          }
          var c = null, c = function (c2, e, f) {
            switch (arguments.length) {
              case 2:
                return b.call(this, c2, e);
              case 3:
                return a.call(this, c2, e, f);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.a = b;
          c.c = a;
          return c;
        })();
        function xb(a, b, c) {
          if (a ? a.gb : a) return a.gb(a, b, c);
          var d;
          d = xb[n(a == null ? null : a)];
          if (!d && (d = xb._, !d)) throw x("IKVReduce.-kv-reduce", a);
          return d.call(null, a, b, c);
        }
        function yb(a, b) {
          if (a ? a.A : a) return a.A(a, b);
          var c;
          c = yb[n(a == null ? null : a)];
          if (!c && (c = yb._, !c)) throw x("IEquiv.-equiv", a);
          return c.call(null, a, b);
        }
        function zb(a) {
          if (a ? a.B : a) return a.B(a);
          var b;
          b = zb[n(a == null ? null : a)];
          if (!b && (b = zb._, !b)) throw x("IHash.-hash", a);
          return b.call(null, a);
        }
        var Bb = {};
        function Cb(a) {
          if (a ? a.D : a) return a.D(a);
          var b;
          b = Cb[n(a == null ? null : a)];
          if (!b && (b = Cb._, !b)) throw x("ISeqable.-seq", a);
          return b.call(null, a);
        }
        var Db = {}, Eb = {}, Fb = {};
        function Gb(a) {
          if (a ? a.ab : a) return a.ab(a);
          var b;
          b = Gb[n(a == null ? null : a)];
          if (!b && (b = Gb._, !b)) throw x("IReversible.-rseq", a);
          return b.call(null, a);
        }
        function Hb(a, b) {
          if (a ? a.Hb : a) return a.Hb(a, b);
          var c;
          c = Hb[n(a == null ? null : a)];
          if (!c && (c = Hb._, !c)) throw x("ISorted.-sorted-seq", a);
          return c.call(null, a, b);
        }
        function Ib(a, b, c) {
          if (a ? a.Ib : a) return a.Ib(a, b, c);
          var d;
          d = Ib[n(a == null ? null : a)];
          if (!d && (d = Ib._, !d)) throw x("ISorted.-sorted-seq-from", a);
          return d.call(null, a, b, c);
        }
        function Jb(a, b) {
          if (a ? a.Gb : a) return a.Gb(a, b);
          var c;
          c = Jb[n(a == null ? null : a)];
          if (!c && (c = Jb._, !c)) throw x("ISorted.-entry-key", a);
          return c.call(null, a, b);
        }
        function Kb(a) {
          if (a ? a.Fb : a) return a.Fb(a);
          var b;
          b = Kb[n(a == null ? null : a)];
          if (!b && (b = Kb._, !b)) throw x("ISorted.-comparator", a);
          return b.call(null, a);
        }
        function Lb(a, b) {
          if (a ? a.Wb : a) return a.Wb(0, b);
          var c;
          c = Lb[n(a == null ? null : a)];
          if (!c && (c = Lb._, !c)) throw x("IWriter.-write", a);
          return c.call(null, a, b);
        }
        var Mb = {};
        function Nb(a, b, c) {
          if (a ? a.v : a) return a.v(a, b, c);
          var d;
          d = Nb[n(a == null ? null : a)];
          if (!d && (d = Nb._, !d)) throw x("IPrintWithWriter.-pr-writer", a);
          return d.call(null, a, b, c);
        }
        function Ob(a) {
          if (a ? a.$a : a) return a.$a(a);
          var b;
          b = Ob[n(a == null ? null : a)];
          if (!b && (b = Ob._, !b)) throw x("IEditableCollection.-as-transient", a);
          return b.call(null, a);
        }
        function Pb(a, b) {
          if (a ? a.Sa : a) return a.Sa(a, b);
          var c;
          c = Pb[n(a == null ? null : a)];
          if (!c && (c = Pb._, !c)) throw x("ITransientCollection.-conj!", a);
          return c.call(null, a, b);
        }
        function Qb(a) {
          if (a ? a.Ta : a) return a.Ta(a);
          var b;
          b = Qb[n(a == null ? null : a)];
          if (!b && (b = Qb._, !b)) throw x("ITransientCollection.-persistent!", a);
          return b.call(null, a);
        }
        function Rb(a, b, c) {
          if (a ? a.kb : a) return a.kb(a, b, c);
          var d;
          d = Rb[n(a == null ? null : a)];
          if (!d && (d = Rb._, !d)) throw x("ITransientAssociative.-assoc!", a);
          return d.call(null, a, b, c);
        }
        function Sb(a, b) {
          if (a ? a.Jb : a) return a.Jb(a, b);
          var c;
          c = Sb[n(a == null ? null : a)];
          if (!c && (c = Sb._, !c)) throw x("ITransientMap.-dissoc!", a);
          return c.call(null, a, b);
        }
        function Tb(a, b, c) {
          if (a ? a.Ub : a) return a.Ub(0, b, c);
          var d;
          d = Tb[n(a == null ? null : a)];
          if (!d && (d = Tb._, !d)) throw x("ITransientVector.-assoc-n!", a);
          return d.call(null, a, b, c);
        }
        function Ub(a) {
          if (a ? a.Vb : a) return a.Vb();
          var b;
          b = Ub[n(a == null ? null : a)];
          if (!b && (b = Ub._, !b)) throw x("ITransientVector.-pop!", a);
          return b.call(null, a);
        }
        function Vb(a, b) {
          if (a ? a.Tb : a) return a.Tb(0, b);
          var c;
          c = Vb[n(a == null ? null : a)];
          if (!c && (c = Vb._, !c)) throw x("ITransientSet.-disjoin!", a);
          return c.call(null, a, b);
        }
        function Xb(a) {
          if (a ? a.Pb : a) return a.Pb();
          var b;
          b = Xb[n(a == null ? null : a)];
          if (!b && (b = Xb._, !b)) throw x("IChunk.-drop-first", a);
          return b.call(null, a);
        }
        function Yb(a) {
          if (a ? a.Cb : a) return a.Cb(a);
          var b;
          b = Yb[n(a == null ? null : a)];
          if (!b && (b = Yb._, !b)) throw x("IChunkedSeq.-chunked-first", a);
          return b.call(null, a);
        }
        function Zb(a) {
          if (a ? a.Db : a) return a.Db(a);
          var b;
          b = Zb[n(a == null ? null : a)];
          if (!b && (b = Zb._, !b)) throw x("IChunkedSeq.-chunked-rest", a);
          return b.call(null, a);
        }
        function $b(a) {
          if (a ? a.Bb : a) return a.Bb(a);
          var b;
          b = $b[n(a == null ? null : a)];
          if (!b && (b = $b._, !b)) throw x("IChunkedNext.-chunked-next", a);
          return b.call(null, a);
        }
        function ac(a, b) {
          if (a ? a.bb : a) return a.bb(0, b);
          var c;
          c = ac[n(a == null ? null : a)];
          if (!c && (c = ac._, !c)) throw x("IVolatile.-vreset!", a);
          return c.call(null, a, b);
        }
        var bc = {};
        function cc(a) {
          if (a ? a.fb : a) return a.fb(a);
          var b;
          b = cc[n(a == null ? null : a)];
          if (!b && (b = cc._, !b)) throw x("IIterable.-iterator", a);
          return b.call(null, a);
        }
        function dc(a) {
          this.qc = a;
          this.q = 0;
          this.j = 1073741824;
        }
        dc.prototype.Wb = function (a, b) {
          return this.qc.append(b);
        };
        function ec(a) {
          var b = new fa();
          a.v(null, new dc(b), oa());
          return "" + z(b);
        }
        var fc = typeof Math.imul !== "undefined" && (Math.imul.a ? Math.imul.a(4294967295, 5) : Math.imul.call(null, 4294967295, 5)) !== 0 ? function (a, b) {
          return Math.imul.a ? Math.imul.a(a, b) : Math.imul.call(null, a, b);
        } : function (a, b) {
          var c = a & 65535, d = b & 65535;
          return c * d + ((a >>> 16 & 65535) * d + c * (b >>> 16 & 65535) << 16 >>> 0) | 0;
        };
        function gc(a) {
          a = fc(a, 3432918353);
          return fc(a << 15 | a >>> -15, 461845907);
        }
        function hc(a, b) {
          var c = a ^ b;
          return fc(c << 13 | c >>> -13, 5) + 3864292196;
        }
        function ic(a, b) {
          var c = a ^ b, c = fc(c ^ c >>> 16, 2246822507), c = fc(c ^ c >>> 13, 3266489909);
          return c ^ c >>> 16;
        }
        var kc = {}, lc = 0;
        function mc(a) {
          255 < lc && (kc = {}, lc = 0);
          var b = kc[a];
          if (typeof b !== "number") {
            a: if (a != null) if ((b = a.length, 0 < b)) {
              for (var c = 0, d = 0; ; ) if (c < b) var e = c + 1, d = fc(31, d) + a.charCodeAt(c), c = e; else {
                b = d;
                break a;
              }
              b = void 0;
            } else b = 0; else b = 0;
            kc[a] = b;
            lc += 1;
          }
          return a = b;
        }
        function nc(a) {
          a && (a.j & 4194304 || a.vc) ? a = a.B(null) : typeof a === "number" ? a = (Math.floor.b ? Math.floor.b(a) : Math.floor.call(null, a)) % 2147483647 : a === true ? a = 1 : a === false ? a = 0 : typeof a === "string" ? (a = mc(a), a !== 0 && (a = gc(a), a = hc(0, a), a = ic(a, 4))) : a = a instanceof Date ? a.valueOf() : a == null ? 0 : zb(a);
          return a;
        }
        function oc(a) {
          var b;
          b = a.name;
          var c;
          a: {
            c = 1;
            for (var d = 0; ; ) if (c < b.length) {
              var e = c + 2, d = hc(d, gc(b.charCodeAt(c - 1) | b.charCodeAt(c) << 16));
              c = e;
            } else {
              c = d;
              break a;
            }
            c = void 0;
          }
          c = (b.length & 1) === 1 ? c ^ gc(b.charCodeAt(b.length - 1)) : c;
          b = ic(c, fc(2, b.length));
          a = mc(a.ba);
          return b ^ a + 2654435769 + (b << 6) + (b >> 2);
        }
        function pc(a, b) {
          if (a.ta === b.ta) return 0;
          var c = Aa(a.ba);
          if (t(c ? b.ba : c)) return -1;
          if (t(a.ba)) {
            if (Aa(b.ba)) return 1;
            c = ha(a.ba, b.ba);
            return c === 0 ? ha(a.name, b.name) : c;
          }
          return ha(a.name, b.name);
        }
        function qc(a, b, c, d, e) {
          this.ba = a;
          this.name = b;
          this.ta = c;
          this.Ya = d;
          this.Z = e;
          this.j = 2154168321;
          this.q = 4096;
        }
        k = qc.prototype;
        k.v = function (a, b) {
          return Lb(b, this.ta);
        };
        k.B = function () {
          var a = this.Ya;
          return a != null ? a : this.Ya = a = oc(this);
        };
        k.F = function (a, b) {
          return new qc(this.ba, this.name, this.ta, this.Ya, b);
        };
        k.H = function () {
          return this.Z;
        };
        k.call = (function () {
          var a = null, a = function (a2, c, d) {
            switch (arguments.length) {
              case 2:
                return $a.c(c, this, null);
              case 3:
                return $a.c(c, this, d);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          a.a = function (a2, c) {
            return $a.c(c, this, null);
          };
          a.c = function (a2, c, d) {
            return $a.c(c, this, d);
          };
          return a;
        })();
        k.apply = function (a, b) {
          return this.call.apply(this, [this].concat(Fa(b)));
        };
        k.b = function (a) {
          return $a.c(a, this, null);
        };
        k.a = function (a, b) {
          return $a.c(a, this, b);
        };
        k.A = function (a, b) {
          return b instanceof qc ? this.ta === b.ta : false;
        };
        k.toString = function () {
          return this.ta;
        };
        var rc = (function () {
          function a(a2, b2) {
            var c2 = a2 != null ? [z(a2), z("/"), z(b2)].join("") : b2;
            return new qc(a2, b2, c2, null, null);
          }
          function b(a2) {
            return a2 instanceof qc ? a2 : c.a(null, a2);
          }
          var c = null, c = function (c2, e) {
            switch (arguments.length) {
              case 1:
                return b.call(this, c2);
              case 2:
                return a.call(this, c2, e);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.b = b;
          c.a = a;
          return c;
        })();
        function D(a) {
          if (a == null) return null;
          if (a && (a.j & 8388608 || a.mc)) return a.D(null);
          if (a instanceof Array || typeof a === "string") return a.length === 0 ? null : new F(a, 0);
          if (w(Bb, a)) return Cb(a);
          throw Error([z(a), z(" is not ISeqable")].join(""));
        }
        function G(a) {
          if (a == null) return null;
          if (a && (a.j & 64 || a.jb)) return a.N(null);
          a = D(a);
          return a == null ? null : Va(a);
        }
        function H(a) {
          return a != null ? a && (a.j & 64 || a.jb) ? a.S(null) : (a = D(a)) ? Wa(a) : J : J;
        }
        function K(a) {
          return a == null ? null : a && (a.j & 128 || a.xb) ? a.T(null) : D(H(a));
        }
        var sc = (function () {
          function a(a2, b2) {
            return a2 == null ? b2 == null : a2 === b2 || yb(a2, b2);
          }
          var b = null, c = (function () {
            function a2(b2, d, h) {
              var l = null;
              if (2 < arguments.length) {
                for (var l = 0, m = Array(arguments.length - 2); l < m.length; ) (m[l] = arguments[l + 2], ++l);
                l = new F(m, 0);
              }
              return c2.call(this, b2, d, l);
            }
            function c2(a3, d, e) {
              for (; ; ) if (b.a(a3, d)) if (K(e)) (a3 = d, d = G(e), e = K(e)); else return b.a(d, G(e)); else return false;
            }
            a2.i = 2;
            a2.f = function (a3) {
              var b2 = G(a3);
              a3 = K(a3);
              var d = G(a3);
              a3 = H(a3);
              return c2(b2, d, a3);
            };
            a2.d = c2;
            return a2;
          })(), b = function (b2, e, f) {
            switch (arguments.length) {
              case 1:
                return true;
              case 2:
                return a.call(this, b2, e);
              default:
                var g = null;
                if (2 < arguments.length) {
                  for (var g = 0, h = Array(arguments.length - 2); g < h.length; ) (h[g] = arguments[g + 2], ++g);
                  g = new F(h, 0);
                }
                return c.d(b2, e, g);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          b.i = 2;
          b.f = c.f;
          b.b = function () {
            return true;
          };
          b.a = a;
          b.d = c.d;
          return b;
        })();
        function tc(a) {
          this.C = a;
        }
        tc.prototype.next = function () {
          if (this.C != null) {
            var a = G(this.C);
            this.C = K(this.C);
            return {
              done: false,
              value: a
            };
          }
          return {
            done: true,
            value: null
          };
        };
        function uc(a) {
          return new tc(D(a));
        }
        function vc(a, b) {
          var c = gc(a), c = hc(0, c);
          return ic(c, b);
        }
        function wc(a) {
          var b = 0, c = 1;
          for (a = D(a); ; ) if (a != null) (b += 1, c = fc(31, c) + nc(G(a)) | 0, a = K(a)); else return vc(c, b);
        }
        function xc(a) {
          var b = 0, c = 0;
          for (a = D(a); ; ) if (a != null) (b += 1, c = c + nc(G(a)) | 0, a = K(a)); else return vc(c, b);
        }
        La["null"] = true;
        Ma["null"] = function () {
          return 0;
        };
        Date.prototype.A = function (a, b) {
          return b instanceof Date && this.toString() === b.toString();
        };
        yb.number = function (a, b) {
          return a === b;
        };
        rb["function"] = true;
        sb["function"] = function () {
          return null;
        };
        Ja["function"] = true;
        zb._ = function (a) {
          return a[ba] || (a[ba] = ++ca);
        };
        function yc(a) {
          this.o = a;
          this.q = 0;
          this.j = 32768;
        }
        yc.prototype.Ra = function () {
          return this.o;
        };
        function Ac(a) {
          return a instanceof yc;
        }
        function Bc(a) {
          return Ac(a) ? L.b ? L.b(a) : L.call(null, a) : a;
        }
        function L(a) {
          return qb(a);
        }
        var Cc = (function () {
          function a(a2, b2, c2, d2) {
            for (var l = Ma(a2); ; ) if (d2 < l) {
              var m = C.a(a2, d2);
              c2 = b2.a ? b2.a(c2, m) : b2.call(null, c2, m);
              if (Ac(c2)) return qb(c2);
              d2 += 1;
            } else return c2;
          }
          function b(a2, b2, c2) {
            var d2 = Ma(a2), l = c2;
            for (c2 = 0; ; ) if (c2 < d2) {
              var m = C.a(a2, c2), l = b2.a ? b2.a(l, m) : b2.call(null, l, m);
              if (Ac(l)) return qb(l);
              c2 += 1;
            } else return l;
          }
          function c(a2, b2) {
            var c2 = Ma(a2);
            if (c2 === 0) return b2.l ? b2.l() : b2.call(null);
            for (var d2 = C.a(a2, 0), l = 1; ; ) if (l < c2) {
              var m = C.a(a2, l), d2 = b2.a ? b2.a(d2, m) : b2.call(null, d2, m);
              if (Ac(d2)) return qb(d2);
              l += 1;
            } else return d2;
          }
          var d = null, d = function (d2, f, g, h) {
            switch (arguments.length) {
              case 2:
                return c.call(this, d2, f);
              case 3:
                return b.call(this, d2, f, g);
              case 4:
                return a.call(this, d2, f, g, h);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          d.a = c;
          d.c = b;
          d.n = a;
          return d;
        })(), Dc = (function () {
          function a(a2, b2, c2, d2) {
            for (var l = a2.length; ; ) if (d2 < l) {
              var m = a2[d2];
              c2 = b2.a ? b2.a(c2, m) : b2.call(null, c2, m);
              if (Ac(c2)) return qb(c2);
              d2 += 1;
            } else return c2;
          }
          function b(a2, b2, c2) {
            var d2 = a2.length, l = c2;
            for (c2 = 0; ; ) if (c2 < d2) {
              var m = a2[c2], l = b2.a ? b2.a(l, m) : b2.call(null, l, m);
              if (Ac(l)) return qb(l);
              c2 += 1;
            } else return l;
          }
          function c(a2, b2) {
            var c2 = a2.length;
            if (a2.length === 0) return b2.l ? b2.l() : b2.call(null);
            for (var d2 = a2[0], l = 1; ; ) if (l < c2) {
              var m = a2[l], d2 = b2.a ? b2.a(d2, m) : b2.call(null, d2, m);
              if (Ac(d2)) return qb(d2);
              l += 1;
            } else return d2;
          }
          var d = null, d = function (d2, f, g, h) {
            switch (arguments.length) {
              case 2:
                return c.call(this, d2, f);
              case 3:
                return b.call(this, d2, f, g);
              case 4:
                return a.call(this, d2, f, g, h);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          d.a = c;
          d.c = b;
          d.n = a;
          return d;
        })();
        function Ec(a) {
          return a ? a.j & 2 || a.cc ? true : a.j ? false : w(La, a) : w(La, a);
        }
        function Fc(a) {
          return a ? a.j & 16 || a.Qb ? true : a.j ? false : w(Ta, a) : w(Ta, a);
        }
        function Gc(a, b) {
          this.e = a;
          this.m = b;
        }
        Gc.prototype.ga = function () {
          return this.m < this.e.length;
        };
        Gc.prototype.next = function () {
          var a = this.e[this.m];
          this.m += 1;
          return a;
        };
        function F(a, b) {
          this.e = a;
          this.m = b;
          this.j = 166199550;
          this.q = 8192;
        }
        k = F.prototype;
        k.toString = function () {
          return ec(this);
        };
        k.Q = function (a, b) {
          var c = b + this.m;
          return c < this.e.length ? this.e[c] : null;
        };
        k.$ = function (a, b, c) {
          a = b + this.m;
          return a < this.e.length ? this.e[a] : c;
        };
        k.vb = true;
        k.fb = function () {
          return new Gc(this.e, this.m);
        };
        k.T = function () {
          return this.m + 1 < this.e.length ? new F(this.e, this.m + 1) : null;
        };
        k.L = function () {
          return this.e.length - this.m;
        };
        k.ab = function () {
          var a = Ma(this);
          return 0 < a ? new Hc(this, a - 1, null) : null;
        };
        k.B = function () {
          return wc(this);
        };
        k.A = function (a, b) {
          return Ic.a ? Ic.a(this, b) : Ic.call(null, this, b);
        };
        k.J = function () {
          return J;
        };
        k.R = function (a, b) {
          return Dc.n(this.e, b, this.e[this.m], this.m + 1);
        };
        k.O = function (a, b, c) {
          return Dc.n(this.e, b, c, this.m);
        };
        k.N = function () {
          return this.e[this.m];
        };
        k.S = function () {
          return this.m + 1 < this.e.length ? new F(this.e, this.m + 1) : J;
        };
        k.D = function () {
          return this;
        };
        k.G = function (a, b) {
          return M.a ? M.a(b, this) : M.call(null, b, this);
        };
        F.prototype[Ea] = function () {
          return uc(this);
        };
        var Jc = (function () {
          function a(a2, b2) {
            return b2 < a2.length ? new F(a2, b2) : null;
          }
          function b(a2) {
            return c.a(a2, 0);
          }
          var c = null, c = function (c2, e) {
            switch (arguments.length) {
              case 1:
                return b.call(this, c2);
              case 2:
                return a.call(this, c2, e);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.b = b;
          c.a = a;
          return c;
        })(), Kc = (function () {
          function a(a2, b2) {
            return Jc.a(a2, b2);
          }
          function b(a2) {
            return Jc.a(a2, 0);
          }
          var c = null, c = function (c2, e) {
            switch (arguments.length) {
              case 1:
                return b.call(this, c2);
              case 2:
                return a.call(this, c2, e);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.b = b;
          c.a = a;
          return c;
        })();
        function Hc(a, b, c) {
          this.qb = a;
          this.m = b;
          this.k = c;
          this.j = 32374990;
          this.q = 8192;
        }
        k = Hc.prototype;
        k.toString = function () {
          return ec(this);
        };
        k.H = function () {
          return this.k;
        };
        k.T = function () {
          return 0 < this.m ? new Hc(this.qb, this.m - 1, null) : null;
        };
        k.L = function () {
          return this.m + 1;
        };
        k.B = function () {
          return wc(this);
        };
        k.A = function (a, b) {
          return Ic.a ? Ic.a(this, b) : Ic.call(null, this, b);
        };
        k.J = function () {
          var a = this.k;
          return O.a ? O.a(J, a) : O.call(null, J, a);
        };
        k.R = function (a, b) {
          return P.a ? P.a(b, this) : P.call(null, b, this);
        };
        k.O = function (a, b, c) {
          return P.c ? P.c(b, c, this) : P.call(null, b, c, this);
        };
        k.N = function () {
          return C.a(this.qb, this.m);
        };
        k.S = function () {
          return 0 < this.m ? new Hc(this.qb, this.m - 1, null) : J;
        };
        k.D = function () {
          return this;
        };
        k.F = function (a, b) {
          return new Hc(this.qb, this.m, b);
        };
        k.G = function (a, b) {
          return M.a ? M.a(b, this) : M.call(null, b, this);
        };
        Hc.prototype[Ea] = function () {
          return uc(this);
        };
        function Lc(a) {
          return G(K(a));
        }
        yb._ = function (a, b) {
          return a === b;
        };
        var Nc = (function () {
          function a(a2, b2) {
            return a2 != null ? Ra(a2, b2) : Ra(J, b2);
          }
          var b = null, c = (function () {
            function a2(b2, d, h) {
              var l = null;
              if (2 < arguments.length) {
                for (var l = 0, m = Array(arguments.length - 2); l < m.length; ) (m[l] = arguments[l + 2], ++l);
                l = new F(m, 0);
              }
              return c2.call(this, b2, d, l);
            }
            function c2(a3, d, e) {
              for (; ; ) if (t(e)) (a3 = b.a(a3, d), d = G(e), e = K(e)); else return b.a(a3, d);
            }
            a2.i = 2;
            a2.f = function (a3) {
              var b2 = G(a3);
              a3 = K(a3);
              var d = G(a3);
              a3 = H(a3);
              return c2(b2, d, a3);
            };
            a2.d = c2;
            return a2;
          })(), b = function (b2, e, f) {
            switch (arguments.length) {
              case 0:
                return Mc;
              case 1:
                return b2;
              case 2:
                return a.call(this, b2, e);
              default:
                var g = null;
                if (2 < arguments.length) {
                  for (var g = 0, h = Array(arguments.length - 2); g < h.length; ) (h[g] = arguments[g + 2], ++g);
                  g = new F(h, 0);
                }
                return c.d(b2, e, g);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          b.i = 2;
          b.f = c.f;
          b.l = function () {
            return Mc;
          };
          b.b = function (a2) {
            return a2;
          };
          b.a = a;
          b.d = c.d;
          return b;
        })();
        function Oc(a) {
          return a == null ? null : Na(a);
        }
        function Q(a) {
          if (a != null) if (a && (a.j & 2 || a.cc)) a = a.L(null); else if (a instanceof Array) a = a.length; else if (typeof a === "string") a = a.length; else if (w(La, a)) a = Ma(a); else a: {
            a = D(a);
            for (var b = 0; ; ) {
              if (Ec(a)) {
                a = b + Ma(a);
                break a;
              }
              a = K(a);
              b += 1;
            }
            a = void 0;
          } else a = 0;
          return a;
        }
        var Pc = (function () {
          function a(a2, b2, c2) {
            for (; ; ) {
              if (a2 == null) return c2;
              if (b2 === 0) return D(a2) ? G(a2) : c2;
              if (Fc(a2)) return C.c(a2, b2, c2);
              if (D(a2)) (a2 = K(a2), b2 -= 1); else return c2;
            }
          }
          function b(a2, b2) {
            for (; ; ) {
              if (a2 == null) throw Error("Index out of bounds");
              if (b2 === 0) {
                if (D(a2)) return G(a2);
                throw Error("Index out of bounds");
              }
              if (Fc(a2)) return C.a(a2, b2);
              if (D(a2)) {
                var c2 = K(a2), g = b2 - 1;
                a2 = c2;
                b2 = g;
              } else throw Error("Index out of bounds");
            }
          }
          var c = null, c = function (c2, e, f) {
            switch (arguments.length) {
              case 2:
                return b.call(this, c2, e);
              case 3:
                return a.call(this, c2, e, f);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.a = b;
          c.c = a;
          return c;
        })(), R = (function () {
          function a(a2, b2, c2) {
            if (typeof b2 !== "number") throw Error("index argument to nth must be a number.");
            if (a2 == null) return c2;
            if (a2 && (a2.j & 16 || a2.Qb)) return a2.$(null, b2, c2);
            if (a2 instanceof Array || typeof a2 === "string") return b2 < a2.length ? a2[b2] : c2;
            if (w(Ta, a2)) return C.a(a2, b2);
            if (a2 ? a2.j & 64 || a2.jb || (a2.j ? 0 : w(Ua, a2)) : w(Ua, a2)) return Pc.c(a2, b2, c2);
            throw Error([z("nth not supported on this type "), z(Da(Ba(a2)))].join(""));
          }
          function b(a2, b2) {
            if (typeof b2 !== "number") throw Error("index argument to nth must be a number");
            if (a2 == null) return a2;
            if (a2 && (a2.j & 16 || a2.Qb)) return a2.Q(null, b2);
            if (a2 instanceof Array || typeof a2 === "string") return b2 < a2.length ? a2[b2] : null;
            if (w(Ta, a2)) return C.a(a2, b2);
            if (a2 ? a2.j & 64 || a2.jb || (a2.j ? 0 : w(Ua, a2)) : w(Ua, a2)) return Pc.a(a2, b2);
            throw Error([z("nth not supported on this type "), z(Da(Ba(a2)))].join(""));
          }
          var c = null, c = function (c2, e, f) {
            switch (arguments.length) {
              case 2:
                return b.call(this, c2, e);
              case 3:
                return a.call(this, c2, e, f);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.a = b;
          c.c = a;
          return c;
        })(), S = (function () {
          function a(a2, b2, c2) {
            return a2 != null ? a2 && (a2.j & 256 || a2.Rb) ? a2.s(null, b2, c2) : a2 instanceof Array ? b2 < a2.length ? a2[b2] : c2 : typeof a2 === "string" ? b2 < a2.length ? a2[b2] : c2 : w(Za, a2) ? $a.c(a2, b2, c2) : c2 : c2;
          }
          function b(a2, b2) {
            return a2 == null ? null : a2 && (a2.j & 256 || a2.Rb) ? a2.t(null, b2) : a2 instanceof Array ? b2 < a2.length ? a2[b2] : null : typeof a2 === "string" ? b2 < a2.length ? a2[b2] : null : w(Za, a2) ? $a.a(a2, b2) : null;
          }
          var c = null, c = function (c2, e, f) {
            switch (arguments.length) {
              case 2:
                return b.call(this, c2, e);
              case 3:
                return a.call(this, c2, e, f);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.a = b;
          c.c = a;
          return c;
        })(), Rc = (function () {
          function a(a2, b2, c2) {
            if (a2 != null) a2 = cb(a2, b2, c2); else a: {
              a2 = [b2];
              c2 = [c2];
              b2 = a2.length;
              for (var g = 0, h = Ob(Qc); ; ) if (g < b2) var l = g + 1, h = h.kb(null, a2[g], c2[g]), g = l; else {
                a2 = Qb(h);
                break a;
              }
              a2 = void 0;
            }
            return a2;
          }
          var b = null, c = (function () {
            function a2(b2, d, h, l) {
              var m = null;
              if (3 < arguments.length) {
                for (var m = 0, p = Array(arguments.length - 3); m < p.length; ) (p[m] = arguments[m + 3], ++m);
                m = new F(p, 0);
              }
              return c2.call(this, b2, d, h, m);
            }
            function c2(a3, d, e, l) {
              for (; ; ) if ((a3 = b.c(a3, d, e), t(l))) (d = G(l), e = Lc(l), l = K(K(l))); else return a3;
            }
            a2.i = 3;
            a2.f = function (a3) {
              var b2 = G(a3);
              a3 = K(a3);
              var d = G(a3);
              a3 = K(a3);
              var l = G(a3);
              a3 = H(a3);
              return c2(b2, d, l, a3);
            };
            a2.d = c2;
            return a2;
          })(), b = function (b2, e, f, g) {
            switch (arguments.length) {
              case 3:
                return a.call(this, b2, e, f);
              default:
                var h = null;
                if (3 < arguments.length) {
                  for (var h = 0, l = Array(arguments.length - 3); h < l.length; ) (l[h] = arguments[h + 3], ++h);
                  h = new F(l, 0);
                }
                return c.d(b2, e, f, h);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          b.i = 3;
          b.f = c.f;
          b.c = a;
          b.d = c.d;
          return b;
        })(), Sc = (function () {
          function a(a2, b2) {
            return a2 == null ? null : eb(a2, b2);
          }
          var b = null, c = (function () {
            function a2(b2, d, h) {
              var l = null;
              if (2 < arguments.length) {
                for (var l = 0, m = Array(arguments.length - 2); l < m.length; ) (m[l] = arguments[l + 2], ++l);
                l = new F(m, 0);
              }
              return c2.call(this, b2, d, l);
            }
            function c2(a3, d, e) {
              for (; ; ) {
                if (a3 == null) return null;
                a3 = b.a(a3, d);
                if (t(e)) (d = G(e), e = K(e)); else return a3;
              }
            }
            a2.i = 2;
            a2.f = function (a3) {
              var b2 = G(a3);
              a3 = K(a3);
              var d = G(a3);
              a3 = H(a3);
              return c2(b2, d, a3);
            };
            a2.d = c2;
            return a2;
          })(), b = function (b2, e, f) {
            switch (arguments.length) {
              case 1:
                return b2;
              case 2:
                return a.call(this, b2, e);
              default:
                var g = null;
                if (2 < arguments.length) {
                  for (var g = 0, h = Array(arguments.length - 2); g < h.length; ) (h[g] = arguments[g + 2], ++g);
                  g = new F(h, 0);
                }
                return c.d(b2, e, g);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          b.i = 2;
          b.f = c.f;
          b.b = function (a2) {
            return a2;
          };
          b.a = a;
          b.d = c.d;
          return b;
        })();
        function Tc(a) {
          var b = n(a) == "function";
          return t(b) ? b : a ? t(t(null) ? null : a.bc) ? true : a.yb ? false : w(Ja, a) : w(Ja, a);
        }
        function Uc(a, b) {
          this.h = a;
          this.k = b;
          this.q = 0;
          this.j = 393217;
        }
        k = Uc.prototype;
        k.call = (function () {
          function a(a2, b2, c2, d2, e2, f2, g2, h2, l2, m2, p2, q2, u2, s2, v2, y2, B2, E2, N2, Y2, ra2, I2) {
            a2 = this.h;
            return T.ub ? T.ub(a2, b2, c2, d2, e2, f2, g2, h2, l2, m2, p2, q2, u2, s2, v2, y2, B2, E2, N2, Y2, ra2, I2) : T.call(null, a2, b2, c2, d2, e2, f2, g2, h2, l2, m2, p2, q2, u2, s2, v2, y2, B2, E2, N2, Y2, ra2, I2);
          }
          function b(a2, b2, c2, d2, e2, f2, g2, h2, l2, m2, p2, q2, u2, s2, v2, y2, B2, E2, N2, Y2, ra2) {
            a2 = this;
            return a2.h.Fa ? a2.h.Fa(b2, c2, d2, e2, f2, g2, h2, l2, m2, p2, q2, u2, s2, v2, y2, B2, E2, N2, Y2, ra2) : a2.h.call(null, b2, c2, d2, e2, f2, g2, h2, l2, m2, p2, q2, u2, s2, v2, y2, B2, E2, N2, Y2, ra2);
          }
          function c(a2, b2, c2, d2, e2, f2, g2, h2, l2, m2, p2, q2, u2, s2, v2, y2, B2, E2, N2, Y2) {
            a2 = this;
            return a2.h.Ea ? a2.h.Ea(b2, c2, d2, e2, f2, g2, h2, l2, m2, p2, q2, u2, s2, v2, y2, B2, E2, N2, Y2) : a2.h.call(null, b2, c2, d2, e2, f2, g2, h2, l2, m2, p2, q2, u2, s2, v2, y2, B2, E2, N2, Y2);
          }
          function d(a2, b2, c2, d2, e2, f2, g2, h2, l2, m2, p2, q2, u2, s2, v2, y2, B2, E2, N2) {
            a2 = this;
            return a2.h.Da ? a2.h.Da(b2, c2, d2, e2, f2, g2, h2, l2, m2, p2, q2, u2, s2, v2, y2, B2, E2, N2) : a2.h.call(null, b2, c2, d2, e2, f2, g2, h2, l2, m2, p2, q2, u2, s2, v2, y2, B2, E2, N2);
          }
          function e(a2, b2, c2, d2, e2, f2, g2, h2, l2, m2, p2, q2, u2, s2, v2, y2, B2, E2) {
            a2 = this;
            return a2.h.Ca ? a2.h.Ca(b2, c2, d2, e2, f2, g2, h2, l2, m2, p2, q2, u2, s2, v2, y2, B2, E2) : a2.h.call(null, b2, c2, d2, e2, f2, g2, h2, l2, m2, p2, q2, u2, s2, v2, y2, B2, E2);
          }
          function f(a2, b2, c2, d2, e2, f2, g2, h2, l2, m2, p2, q2, u2, s2, v2, y2, B2) {
            a2 = this;
            return a2.h.Ba ? a2.h.Ba(b2, c2, d2, e2, f2, g2, h2, l2, m2, p2, q2, u2, s2, v2, y2, B2) : a2.h.call(null, b2, c2, d2, e2, f2, g2, h2, l2, m2, p2, q2, u2, s2, v2, y2, B2);
          }
          function g(a2, b2, c2, d2, e2, f2, g2, h2, l2, m2, p2, q2, u2, s2, v2, y2) {
            a2 = this;
            return a2.h.Aa ? a2.h.Aa(b2, c2, d2, e2, f2, g2, h2, l2, m2, p2, q2, u2, s2, v2, y2) : a2.h.call(null, b2, c2, d2, e2, f2, g2, h2, l2, m2, p2, q2, u2, s2, v2, y2);
          }
          function h(a2, b2, c2, d2, e2, f2, g2, h2, l2, m2, p2, q2, u2, s2, v2) {
            a2 = this;
            return a2.h.za ? a2.h.za(b2, c2, d2, e2, f2, g2, h2, l2, m2, p2, q2, u2, s2, v2) : a2.h.call(null, b2, c2, d2, e2, f2, g2, h2, l2, m2, p2, q2, u2, s2, v2);
          }
          function l(a2, b2, c2, d2, e2, f2, g2, h2, l2, m2, p2, q2, u2, s2) {
            a2 = this;
            return a2.h.ya ? a2.h.ya(b2, c2, d2, e2, f2, g2, h2, l2, m2, p2, q2, u2, s2) : a2.h.call(null, b2, c2, d2, e2, f2, g2, h2, l2, m2, p2, q2, u2, s2);
          }
          function m(a2, b2, c2, d2, e2, f2, g2, h2, l2, m2, p2, q2, u2) {
            a2 = this;
            return a2.h.xa ? a2.h.xa(b2, c2, d2, e2, f2, g2, h2, l2, m2, p2, q2, u2) : a2.h.call(null, b2, c2, d2, e2, f2, g2, h2, l2, m2, p2, q2, u2);
          }
          function p(a2, b2, c2, d2, e2, f2, g2, h2, l2, m2, p2, q2) {
            a2 = this;
            return a2.h.wa ? a2.h.wa(b2, c2, d2, e2, f2, g2, h2, l2, m2, p2, q2) : a2.h.call(null, b2, c2, d2, e2, f2, g2, h2, l2, m2, p2, q2);
          }
          function q(a2, b2, c2, d2, e2, f2, g2, h2, l2, m2, p2) {
            a2 = this;
            return a2.h.va ? a2.h.va(b2, c2, d2, e2, f2, g2, h2, l2, m2, p2) : a2.h.call(null, b2, c2, d2, e2, f2, g2, h2, l2, m2, p2);
          }
          function s(a2, b2, c2, d2, e2, f2, g2, h2, l2, m2) {
            a2 = this;
            return a2.h.Ha ? a2.h.Ha(b2, c2, d2, e2, f2, g2, h2, l2, m2) : a2.h.call(null, b2, c2, d2, e2, f2, g2, h2, l2, m2);
          }
          function u(a2, b2, c2, d2, e2, f2, g2, h2, l2) {
            a2 = this;
            return a2.h.Ga ? a2.h.Ga(b2, c2, d2, e2, f2, g2, h2, l2) : a2.h.call(null, b2, c2, d2, e2, f2, g2, h2, l2);
          }
          function v(a2, b2, c2, d2, e2, f2, g2, h2) {
            a2 = this;
            return a2.h.ia ? a2.h.ia(b2, c2, d2, e2, f2, g2, h2) : a2.h.call(null, b2, c2, d2, e2, f2, g2, h2);
          }
          function y(a2, b2, c2, d2, e2, f2, g2) {
            a2 = this;
            return a2.h.P ? a2.h.P(b2, c2, d2, e2, f2, g2) : a2.h.call(null, b2, c2, d2, e2, f2, g2);
          }
          function B(a2, b2, c2, d2, e2, f2) {
            a2 = this;
            return a2.h.r ? a2.h.r(b2, c2, d2, e2, f2) : a2.h.call(null, b2, c2, d2, e2, f2);
          }
          function E(a2, b2, c2, d2, e2) {
            a2 = this;
            return a2.h.n ? a2.h.n(b2, c2, d2, e2) : a2.h.call(null, b2, c2, d2, e2);
          }
          function N(a2, b2, c2, d2) {
            a2 = this;
            return a2.h.c ? a2.h.c(b2, c2, d2) : a2.h.call(null, b2, c2, d2);
          }
          function Y(a2, b2, c2) {
            a2 = this;
            return a2.h.a ? a2.h.a(b2, c2) : a2.h.call(null, b2, c2);
          }
          function ra(a2, b2) {
            a2 = this;
            return a2.h.b ? a2.h.b(b2) : a2.h.call(null, b2);
          }
          function Pa(a2) {
            a2 = this;
            return a2.h.l ? a2.h.l() : a2.h.call(null);
          }
          var I = null, I = function (I2, qa, ta, va, xa, Ca, Ga, Ka, Oa, Sa, Ya, gb, ob, Ab, Wb, jc, zc, Zc, Gd, De, Wf, dh) {
            switch (arguments.length) {
              case 1:
                return Pa.call(this, I2);
              case 2:
                return ra.call(this, I2, qa);
              case 3:
                return Y.call(this, I2, qa, ta);
              case 4:
                return N.call(this, I2, qa, ta, va);
              case 5:
                return E.call(this, I2, qa, ta, va, xa);
              case 6:
                return B.call(this, I2, qa, ta, va, xa, Ca);
              case 7:
                return y.call(this, I2, qa, ta, va, xa, Ca, Ga);
              case 8:
                return v.call(this, I2, qa, ta, va, xa, Ca, Ga, Ka);
              case 9:
                return u.call(this, I2, qa, ta, va, xa, Ca, Ga, Ka, Oa);
              case 10:
                return s.call(this, I2, qa, ta, va, xa, Ca, Ga, Ka, Oa, Sa);
              case 11:
                return q.call(this, I2, qa, ta, va, xa, Ca, Ga, Ka, Oa, Sa, Ya);
              case 12:
                return p.call(this, I2, qa, ta, va, xa, Ca, Ga, Ka, Oa, Sa, Ya, gb);
              case 13:
                return m.call(this, I2, qa, ta, va, xa, Ca, Ga, Ka, Oa, Sa, Ya, gb, ob);
              case 14:
                return l.call(this, I2, qa, ta, va, xa, Ca, Ga, Ka, Oa, Sa, Ya, gb, ob, Ab);
              case 15:
                return h.call(this, I2, qa, ta, va, xa, Ca, Ga, Ka, Oa, Sa, Ya, gb, ob, Ab, Wb);
              case 16:
                return g.call(this, I2, qa, ta, va, xa, Ca, Ga, Ka, Oa, Sa, Ya, gb, ob, Ab, Wb, jc);
              case 17:
                return f.call(this, I2, qa, ta, va, xa, Ca, Ga, Ka, Oa, Sa, Ya, gb, ob, Ab, Wb, jc, zc);
              case 18:
                return e.call(this, I2, qa, ta, va, xa, Ca, Ga, Ka, Oa, Sa, Ya, gb, ob, Ab, Wb, jc, zc, Zc);
              case 19:
                return d.call(this, I2, qa, ta, va, xa, Ca, Ga, Ka, Oa, Sa, Ya, gb, ob, Ab, Wb, jc, zc, Zc, Gd);
              case 20:
                return c.call(this, I2, qa, ta, va, xa, Ca, Ga, Ka, Oa, Sa, Ya, gb, ob, Ab, Wb, jc, zc, Zc, Gd, De);
              case 21:
                return b.call(this, I2, qa, ta, va, xa, Ca, Ga, Ka, Oa, Sa, Ya, gb, ob, Ab, Wb, jc, zc, Zc, Gd, De, Wf);
              case 22:
                return a.call(this, I2, qa, ta, va, xa, Ca, Ga, Ka, Oa, Sa, Ya, gb, ob, Ab, Wb, jc, zc, Zc, Gd, De, Wf, dh);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          I.b = Pa;
          I.a = ra;
          I.c = Y;
          I.n = N;
          I.r = E;
          I.P = B;
          I.ia = y;
          I.Ga = v;
          I.Ha = u;
          I.va = s;
          I.wa = q;
          I.xa = p;
          I.ya = m;
          I.za = l;
          I.Aa = h;
          I.Ba = g;
          I.Ca = f;
          I.Da = e;
          I.Ea = d;
          I.Fa = c;
          I.hc = b;
          I.ub = a;
          return I;
        })();
        k.apply = function (a, b) {
          return this.call.apply(this, [this].concat(Fa(b)));
        };
        k.l = function () {
          return this.h.l ? this.h.l() : this.h.call(null);
        };
        k.b = function (a) {
          return this.h.b ? this.h.b(a) : this.h.call(null, a);
        };
        k.a = function (a, b) {
          return this.h.a ? this.h.a(a, b) : this.h.call(null, a, b);
        };
        k.c = function (a, b, c) {
          return this.h.c ? this.h.c(a, b, c) : this.h.call(null, a, b, c);
        };
        k.n = function (a, b, c, d) {
          return this.h.n ? this.h.n(a, b, c, d) : this.h.call(null, a, b, c, d);
        };
        k.r = function (a, b, c, d, e) {
          return this.h.r ? this.h.r(a, b, c, d, e) : this.h.call(null, a, b, c, d, e);
        };
        k.P = function (a, b, c, d, e, f) {
          return this.h.P ? this.h.P(a, b, c, d, e, f) : this.h.call(null, a, b, c, d, e, f);
        };
        k.ia = function (a, b, c, d, e, f, g) {
          return this.h.ia ? this.h.ia(a, b, c, d, e, f, g) : this.h.call(null, a, b, c, d, e, f, g);
        };
        k.Ga = function (a, b, c, d, e, f, g, h) {
          return this.h.Ga ? this.h.Ga(a, b, c, d, e, f, g, h) : this.h.call(null, a, b, c, d, e, f, g, h);
        };
        k.Ha = function (a, b, c, d, e, f, g, h, l) {
          return this.h.Ha ? this.h.Ha(a, b, c, d, e, f, g, h, l) : this.h.call(null, a, b, c, d, e, f, g, h, l);
        };
        k.va = function (a, b, c, d, e, f, g, h, l, m) {
          return this.h.va ? this.h.va(a, b, c, d, e, f, g, h, l, m) : this.h.call(null, a, b, c, d, e, f, g, h, l, m);
        };
        k.wa = function (a, b, c, d, e, f, g, h, l, m, p) {
          return this.h.wa ? this.h.wa(a, b, c, d, e, f, g, h, l, m, p) : this.h.call(null, a, b, c, d, e, f, g, h, l, m, p);
        };
        k.xa = function (a, b, c, d, e, f, g, h, l, m, p, q) {
          return this.h.xa ? this.h.xa(a, b, c, d, e, f, g, h, l, m, p, q) : this.h.call(null, a, b, c, d, e, f, g, h, l, m, p, q);
        };
        k.ya = function (a, b, c, d, e, f, g, h, l, m, p, q, s) {
          return this.h.ya ? this.h.ya(a, b, c, d, e, f, g, h, l, m, p, q, s) : this.h.call(null, a, b, c, d, e, f, g, h, l, m, p, q, s);
        };
        k.za = function (a, b, c, d, e, f, g, h, l, m, p, q, s, u) {
          return this.h.za ? this.h.za(a, b, c, d, e, f, g, h, l, m, p, q, s, u) : this.h.call(null, a, b, c, d, e, f, g, h, l, m, p, q, s, u);
        };
        k.Aa = function (a, b, c, d, e, f, g, h, l, m, p, q, s, u, v) {
          return this.h.Aa ? this.h.Aa(a, b, c, d, e, f, g, h, l, m, p, q, s, u, v) : this.h.call(null, a, b, c, d, e, f, g, h, l, m, p, q, s, u, v);
        };
        k.Ba = function (a, b, c, d, e, f, g, h, l, m, p, q, s, u, v, y) {
          return this.h.Ba ? this.h.Ba(a, b, c, d, e, f, g, h, l, m, p, q, s, u, v, y) : this.h.call(null, a, b, c, d, e, f, g, h, l, m, p, q, s, u, v, y);
        };
        k.Ca = function (a, b, c, d, e, f, g, h, l, m, p, q, s, u, v, y, B) {
          return this.h.Ca ? this.h.Ca(a, b, c, d, e, f, g, h, l, m, p, q, s, u, v, y, B) : this.h.call(null, a, b, c, d, e, f, g, h, l, m, p, q, s, u, v, y, B);
        };
        k.Da = function (a, b, c, d, e, f, g, h, l, m, p, q, s, u, v, y, B, E) {
          return this.h.Da ? this.h.Da(a, b, c, d, e, f, g, h, l, m, p, q, s, u, v, y, B, E) : this.h.call(null, a, b, c, d, e, f, g, h, l, m, p, q, s, u, v, y, B, E);
        };
        k.Ea = function (a, b, c, d, e, f, g, h, l, m, p, q, s, u, v, y, B, E, N) {
          return this.h.Ea ? this.h.Ea(a, b, c, d, e, f, g, h, l, m, p, q, s, u, v, y, B, E, N) : this.h.call(null, a, b, c, d, e, f, g, h, l, m, p, q, s, u, v, y, B, E, N);
        };
        k.Fa = function (a, b, c, d, e, f, g, h, l, m, p, q, s, u, v, y, B, E, N, Y) {
          return this.h.Fa ? this.h.Fa(a, b, c, d, e, f, g, h, l, m, p, q, s, u, v, y, B, E, N, Y) : this.h.call(null, a, b, c, d, e, f, g, h, l, m, p, q, s, u, v, y, B, E, N, Y);
        };
        k.hc = function (a, b, c, d, e, f, g, h, l, m, p, q, s, u, v, y, B, E, N, Y, ra) {
          var Pa = this.h;
          return T.ub ? T.ub(Pa, a, b, c, d, e, f, g, h, l, m, p, q, s, u, v, y, B, E, N, Y, ra) : T.call(null, Pa, a, b, c, d, e, f, g, h, l, m, p, q, s, u, v, y, B, E, N, Y, ra);
        };
        k.bc = true;
        k.F = function (a, b) {
          return new Uc(this.h, b);
        };
        k.H = function () {
          return this.k;
        };
        function O(a, b) {
          return Tc(a) && !(a ? a.j & 262144 || a.Bc || (a.j ? 0 : w(tb, a)) : w(tb, a)) ? new Uc(a, b) : a == null ? null : ub(a, b);
        }
        function Vc(a) {
          var b = a != null;
          return (b ? a ? a.j & 131072 || a.kc || (a.j ? 0 : w(rb, a)) : w(rb, a) : b) ? sb(a) : null;
        }
        function Wc(a) {
          return a == null ? null : lb(a);
        }
        var Xc = (function () {
          function a(a2, b2) {
            return a2 == null ? null : kb(a2, b2);
          }
          var b = null, c = (function () {
            function a2(b2, d, h) {
              var l = null;
              if (2 < arguments.length) {
                for (var l = 0, m = Array(arguments.length - 2); l < m.length; ) (m[l] = arguments[l + 2], ++l);
                l = new F(m, 0);
              }
              return c2.call(this, b2, d, l);
            }
            function c2(a3, d, e) {
              for (; ; ) {
                if (a3 == null) return null;
                a3 = b.a(a3, d);
                if (t(e)) (d = G(e), e = K(e)); else return a3;
              }
            }
            a2.i = 2;
            a2.f = function (a3) {
              var b2 = G(a3);
              a3 = K(a3);
              var d = G(a3);
              a3 = H(a3);
              return c2(b2, d, a3);
            };
            a2.d = c2;
            return a2;
          })(), b = function (b2, e, f) {
            switch (arguments.length) {
              case 1:
                return b2;
              case 2:
                return a.call(this, b2, e);
              default:
                var g = null;
                if (2 < arguments.length) {
                  for (var g = 0, h = Array(arguments.length - 2); g < h.length; ) (h[g] = arguments[g + 2], ++g);
                  g = new F(h, 0);
                }
                return c.d(b2, e, g);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          b.i = 2;
          b.f = c.f;
          b.b = function (a2) {
            return a2;
          };
          b.a = a;
          b.d = c.d;
          return b;
        })();
        function Yc(a) {
          return a == null || Aa(D(a));
        }
        function $c(a) {
          return a == null ? false : a ? a.j & 8 || a.tc ? true : a.j ? false : w(Qa, a) : w(Qa, a);
        }
        function ad(a) {
          return a == null ? false : a ? a.j & 4096 || a.zc ? true : a.j ? false : w(jb, a) : w(jb, a);
        }
        function bd(a) {
          return a ? a.j & 512 || a.rc ? true : a.j ? false : w(ab, a) : w(ab, a);
        }
        function cd(a) {
          return a ? a.j & 16777216 || a.yc ? true : a.j ? false : w(Db, a) : w(Db, a);
        }
        function dd(a) {
          return a == null ? false : a ? a.j & 1024 || a.ic ? true : a.j ? false : w(db, a) : w(db, a);
        }
        function ed(a) {
          return a ? a.j & 16384 || a.Ac ? true : a.j ? false : w(nb, a) : w(nb, a);
        }
        function fd(a) {
          return a ? a.q & 512 || a.sc ? true : false : false;
        }
        function gd(a) {
          var b = [];
          ea(a, (function (a2, b2) {
            return function (a3, c) {
              return b2.push(c);
            };
          })(a, b));
          return b;
        }
        function hd(a, b, c, d, e) {
          for (; e !== 0; ) (c[d] = a[b], d += 1, e -= 1, b += 1);
        }
        function id(a, b, c, d, e) {
          b += e - 1;
          for (d += e - 1; e !== 0; ) (c[d] = a[b], d -= 1, e -= 1, b -= 1);
        }
        var jd = {};
        function kd(a) {
          return a == null ? false : a ? a.j & 64 || a.jb ? true : a.j ? false : w(Ua, a) : w(Ua, a);
        }
        function ld(a) {
          return a ? a.j & 8388608 || a.mc ? true : a.j ? false : w(Bb, a) : w(Bb, a);
        }
        function md(a) {
          return t(a) ? true : false;
        }
        function nd(a, b) {
          return S.c(a, b, jd) === jd ? false : true;
        }
        function od(a, b) {
          if (a === b) return 0;
          if (a == null) return -1;
          if (b == null) return 1;
          if (Ba(a) === Ba(b)) return a && (a.q & 2048 || a.sb) ? a.tb(null, b) : ha(a, b);
          throw Error("compare on non-nil objects of different types");
        }
        var pd = (function () {
          function a(a2, b2, c2, g) {
            for (; ; ) {
              var h = od(R.a(a2, g), R.a(b2, g));
              if (h === 0 && g + 1 < c2) g += 1; else return h;
            }
          }
          function b(a2, b2) {
            var f = Q(a2), g = Q(b2);
            return f < g ? -1 : f > g ? 1 : c.n(a2, b2, f, 0);
          }
          var c = null, c = function (c2, e, f, g) {
            switch (arguments.length) {
              case 2:
                return b.call(this, c2, e);
              case 4:
                return a.call(this, c2, e, f, g);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.a = b;
          c.n = a;
          return c;
        })();
        function qd(a) {
          return sc.a(a, od) ? od : function (b, c) {
            var d = a.a ? a.a(b, c) : a.call(null, b, c);
            return typeof d === "number" ? d : t(d) ? -1 : t(a.a ? a.a(c, b) : a.call(null, c, b)) ? 1 : 0;
          };
        }
        var sd = (function () {
          function a(a2, b2) {
            if (D(b2)) {
              var c2 = rd.b ? rd.b(b2) : rd.call(null, b2), g = qd(a2);
              ia(c2, g);
              return D(c2);
            }
            return J;
          }
          function b(a2) {
            return c.a(od, a2);
          }
          var c = null, c = function (c2, e) {
            switch (arguments.length) {
              case 1:
                return b.call(this, c2);
              case 2:
                return a.call(this, c2, e);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.b = b;
          c.a = a;
          return c;
        })(), td = (function () {
          function a(a2, b2, c2) {
            return sd.a(function (c3, f) {
              return qd(b2).call(null, a2.b ? a2.b(c3) : a2.call(null, c3), a2.b ? a2.b(f) : a2.call(null, f));
            }, c2);
          }
          function b(a2, b2) {
            return c.c(a2, od, b2);
          }
          var c = null, c = function (c2, e, f) {
            switch (arguments.length) {
              case 2:
                return b.call(this, c2, e);
              case 3:
                return a.call(this, c2, e, f);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.a = b;
          c.c = a;
          return c;
        })(), P = (function () {
          function a(a2, b2, c2) {
            for (c2 = D(c2); ; ) if (c2) {
              var g = G(c2);
              b2 = a2.a ? a2.a(b2, g) : a2.call(null, b2, g);
              if (Ac(b2)) return qb(b2);
              c2 = K(c2);
            } else return b2;
          }
          function b(a2, b2) {
            var c2 = D(b2);
            if (c2) {
              var g = G(c2), c2 = K(c2);
              return A.c ? A.c(a2, g, c2) : A.call(null, a2, g, c2);
            }
            return a2.l ? a2.l() : a2.call(null);
          }
          var c = null, c = function (c2, e, f) {
            switch (arguments.length) {
              case 2:
                return b.call(this, c2, e);
              case 3:
                return a.call(this, c2, e, f);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.a = b;
          c.c = a;
          return c;
        })(), A = (function () {
          function a(a2, b2, c2) {
            return c2 && (c2.j & 524288 || c2.Sb) ? c2.O(null, a2, b2) : c2 instanceof Array ? Dc.c(c2, a2, b2) : typeof c2 === "string" ? Dc.c(c2, a2, b2) : w(vb, c2) ? wb.c(c2, a2, b2) : P.c(a2, b2, c2);
          }
          function b(a2, b2) {
            return b2 && (b2.j & 524288 || b2.Sb) ? b2.R(null, a2) : b2 instanceof Array ? Dc.a(b2, a2) : typeof b2 === "string" ? Dc.a(b2, a2) : w(vb, b2) ? wb.a(b2, a2) : P.a(a2, b2);
          }
          var c = null, c = function (c2, e, f) {
            switch (arguments.length) {
              case 2:
                return b.call(this, c2, e);
              case 3:
                return a.call(this, c2, e, f);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.a = b;
          c.c = a;
          return c;
        })();
        function ud(a) {
          return a;
        }
        var vd = (function () {
          function a(a2, b2) {
            return (function () {
              function c2(b3, e) {
                return a2.a ? a2.a(b3, e) : a2.call(null, b3, e);
              }
              function g(a3) {
                return b2.b ? b2.b(a3) : b2.call(null, a3);
              }
              function h() {
                return a2.l ? a2.l() : a2.call(null);
              }
              var l = null, l = function (a3, b3) {
                switch (arguments.length) {
                  case 0:
                    return h.call(this);
                  case 1:
                    return g.call(this, a3);
                  case 2:
                    return c2.call(this, a3, b3);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              l.l = h;
              l.b = g;
              l.a = c2;
              return l;
            })();
          }
          function b(a2) {
            return c.a(a2, ud);
          }
          var c = null, c = function (c2, e) {
            switch (arguments.length) {
              case 1:
                return b.call(this, c2);
              case 2:
                return a.call(this, c2, e);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.b = b;
          c.a = a;
          return c;
        })(), wd = (function () {
          function a(a2, b2, c2, g) {
            a2 = a2.b ? a2.b(b2) : a2.call(null, b2);
            c2 = A.c(a2, c2, g);
            return a2.b ? a2.b(c2) : a2.call(null, c2);
          }
          function b(a2, b2, f) {
            return c.n(a2, b2, b2.l ? b2.l() : b2.call(null), f);
          }
          var c = null, c = function (c2, e, f, g) {
            switch (arguments.length) {
              case 3:
                return b.call(this, c2, e, f);
              case 4:
                return a.call(this, c2, e, f, g);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.c = b;
          c.n = a;
          return c;
        })(), xd = (function () {
          var a = null, b = (function () {
            function b2(a2, c, g) {
              var h = null;
              if (2 < arguments.length) {
                for (var h = 0, l = Array(arguments.length - 2); h < l.length; ) (l[h] = arguments[h + 2], ++h);
                h = new F(l, 0);
              }
              return d.call(this, a2, c, h);
            }
            function d(b3, c, d2) {
              return A.c(a, b3 + c, d2);
            }
            b2.i = 2;
            b2.f = function (a2) {
              var b3 = G(a2);
              a2 = K(a2);
              var c = G(a2);
              a2 = H(a2);
              return d(b3, c, a2);
            };
            b2.d = d;
            return b2;
          })(), a = function (a2, d, e) {
            switch (arguments.length) {
              case 0:
                return 0;
              case 1:
                return a2;
              case 2:
                return a2 + d;
              default:
                var f = null;
                if (2 < arguments.length) {
                  for (var f = 0, g = Array(arguments.length - 2); f < g.length; ) (g[f] = arguments[f + 2], ++f);
                  f = new F(g, 0);
                }
                return b.d(a2, d, f);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          a.i = 2;
          a.f = b.f;
          a.l = function () {
            return 0;
          };
          a.b = function (a2) {
            return a2;
          };
          a.a = function (a2, b2) {
            return a2 + b2;
          };
          a.d = b.d;
          return a;
        })(), yd = (function () {
          var a = null, b = (function () {
            function a2(c, f, g) {
              var h = null;
              if (2 < arguments.length) {
                for (var h = 0, l = Array(arguments.length - 2); h < l.length; ) (l[h] = arguments[h + 2], ++h);
                h = new F(l, 0);
              }
              return b2.call(this, c, f, h);
            }
            function b2(a3, c, d) {
              for (; ; ) if (a3 < c) if (K(d)) (a3 = c, c = G(d), d = K(d)); else return c < G(d); else return false;
            }
            a2.i = 2;
            a2.f = function (a3) {
              var c = G(a3);
              a3 = K(a3);
              var g = G(a3);
              a3 = H(a3);
              return b2(c, g, a3);
            };
            a2.d = b2;
            return a2;
          })(), a = function (a2, d, e) {
            switch (arguments.length) {
              case 1:
                return true;
              case 2:
                return a2 < d;
              default:
                var f = null;
                if (2 < arguments.length) {
                  for (var f = 0, g = Array(arguments.length - 2); f < g.length; ) (g[f] = arguments[f + 2], ++f);
                  f = new F(g, 0);
                }
                return b.d(a2, d, f);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          a.i = 2;
          a.f = b.f;
          a.b = function () {
            return true;
          };
          a.a = function (a2, b2) {
            return a2 < b2;
          };
          a.d = b.d;
          return a;
        })(), zd = (function () {
          var a = null, b = (function () {
            function a2(c, f, g) {
              var h = null;
              if (2 < arguments.length) {
                for (var h = 0, l = Array(arguments.length - 2); h < l.length; ) (l[h] = arguments[h + 2], ++h);
                h = new F(l, 0);
              }
              return b2.call(this, c, f, h);
            }
            function b2(a3, c, d) {
              for (; ; ) if (a3 <= c) if (K(d)) (a3 = c, c = G(d), d = K(d)); else return c <= G(d); else return false;
            }
            a2.i = 2;
            a2.f = function (a3) {
              var c = G(a3);
              a3 = K(a3);
              var g = G(a3);
              a3 = H(a3);
              return b2(c, g, a3);
            };
            a2.d = b2;
            return a2;
          })(), a = function (a2, d, e) {
            switch (arguments.length) {
              case 1:
                return true;
              case 2:
                return a2 <= d;
              default:
                var f = null;
                if (2 < arguments.length) {
                  for (var f = 0, g = Array(arguments.length - 2); f < g.length; ) (g[f] = arguments[f + 2], ++f);
                  f = new F(g, 0);
                }
                return b.d(a2, d, f);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          a.i = 2;
          a.f = b.f;
          a.b = function () {
            return true;
          };
          a.a = function (a2, b2) {
            return a2 <= b2;
          };
          a.d = b.d;
          return a;
        })(), Ad = (function () {
          var a = null, b = (function () {
            function a2(c, f, g) {
              var h = null;
              if (2 < arguments.length) {
                for (var h = 0, l = Array(arguments.length - 2); h < l.length; ) (l[h] = arguments[h + 2], ++h);
                h = new F(l, 0);
              }
              return b2.call(this, c, f, h);
            }
            function b2(a3, c, d) {
              for (; ; ) if (a3 > c) if (K(d)) (a3 = c, c = G(d), d = K(d)); else return c > G(d); else return false;
            }
            a2.i = 2;
            a2.f = function (a3) {
              var c = G(a3);
              a3 = K(a3);
              var g = G(a3);
              a3 = H(a3);
              return b2(c, g, a3);
            };
            a2.d = b2;
            return a2;
          })(), a = function (a2, d, e) {
            switch (arguments.length) {
              case 1:
                return true;
              case 2:
                return a2 > d;
              default:
                var f = null;
                if (2 < arguments.length) {
                  for (var f = 0, g = Array(arguments.length - 2); f < g.length; ) (g[f] = arguments[f + 2], ++f);
                  f = new F(g, 0);
                }
                return b.d(a2, d, f);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          a.i = 2;
          a.f = b.f;
          a.b = function () {
            return true;
          };
          a.a = function (a2, b2) {
            return a2 > b2;
          };
          a.d = b.d;
          return a;
        })(), Bd = (function () {
          var a = null, b = (function () {
            function a2(c, f, g) {
              var h = null;
              if (2 < arguments.length) {
                for (var h = 0, l = Array(arguments.length - 2); h < l.length; ) (l[h] = arguments[h + 2], ++h);
                h = new F(l, 0);
              }
              return b2.call(this, c, f, h);
            }
            function b2(a3, c, d) {
              for (; ; ) if (a3 >= c) if (K(d)) (a3 = c, c = G(d), d = K(d)); else return c >= G(d); else return false;
            }
            a2.i = 2;
            a2.f = function (a3) {
              var c = G(a3);
              a3 = K(a3);
              var g = G(a3);
              a3 = H(a3);
              return b2(c, g, a3);
            };
            a2.d = b2;
            return a2;
          })(), a = function (a2, d, e) {
            switch (arguments.length) {
              case 1:
                return true;
              case 2:
                return a2 >= d;
              default:
                var f = null;
                if (2 < arguments.length) {
                  for (var f = 0, g = Array(arguments.length - 2); f < g.length; ) (g[f] = arguments[f + 2], ++f);
                  f = new F(g, 0);
                }
                return b.d(a2, d, f);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          a.i = 2;
          a.f = b.f;
          a.b = function () {
            return true;
          };
          a.a = function (a2, b2) {
            return a2 >= b2;
          };
          a.d = b.d;
          return a;
        })();
        function Cd(a, b) {
          var c = (a - a % b) / b;
          return 0 <= c ? Math.floor.b ? Math.floor.b(c) : Math.floor.call(null, c) : Math.ceil.b ? Math.ceil.b(c) : Math.ceil.call(null, c);
        }
        function Dd(a) {
          a -= a >> 1 & 1431655765;
          a = (a & 858993459) + (a >> 2 & 858993459);
          return 16843009 * (a + (a >> 4) & 252645135) >> 24;
        }
        function Ed(a) {
          var b = 1;
          for (a = D(a); ; ) if (a && 0 < b) (b -= 1, a = K(a)); else return a;
        }
        var z = (function () {
          function a(a2) {
            return a2 == null ? "" : da(a2);
          }
          var b = null, c = (function () {
            function a2(b2, d) {
              var h = null;
              if (1 < arguments.length) {
                for (var h = 0, l = Array(arguments.length - 1); h < l.length; ) (l[h] = arguments[h + 1], ++h);
                h = new F(l, 0);
              }
              return c2.call(this, b2, h);
            }
            function c2(a3, d) {
              for (var e = new fa(b.b(a3)), l = d; ; ) if (t(l)) (e = e.append(b.b(G(l))), l = K(l)); else return e.toString();
            }
            a2.i = 1;
            a2.f = function (a3) {
              var b2 = G(a3);
              a3 = H(a3);
              return c2(b2, a3);
            };
            a2.d = c2;
            return a2;
          })(), b = function (b2, e) {
            switch (arguments.length) {
              case 0:
                return "";
              case 1:
                return a.call(this, b2);
              default:
                var f = null;
                if (1 < arguments.length) {
                  for (var f = 0, g = Array(arguments.length - 1); f < g.length; ) (g[f] = arguments[f + 1], ++f);
                  f = new F(g, 0);
                }
                return c.d(b2, f);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          b.i = 1;
          b.f = c.f;
          b.l = function () {
            return "";
          };
          b.b = a;
          b.d = c.d;
          return b;
        })();
        function Ic(a, b) {
          var c;
          if (cd(b)) if (Ec(a) && Ec(b) && Q(a) !== Q(b)) c = false; else a: {
            c = D(a);
            for (var d = D(b); ; ) {
              if (c == null) {
                c = d == null;
                break a;
              }
              if (d != null && sc.a(G(c), G(d))) (c = K(c), d = K(d)); else {
                c = false;
                break a;
              }
            }
            c = void 0;
          } else c = null;
          return md(c);
        }
        function Fd(a, b, c, d, e) {
          this.k = a;
          this.first = b;
          this.M = c;
          this.count = d;
          this.p = e;
          this.j = 65937646;
          this.q = 8192;
        }
        k = Fd.prototype;
        k.toString = function () {
          return ec(this);
        };
        k.H = function () {
          return this.k;
        };
        k.T = function () {
          return this.count === 1 ? null : this.M;
        };
        k.L = function () {
          return this.count;
        };
        k.La = function () {
          return this.first;
        };
        k.Ma = function () {
          return Wa(this);
        };
        k.B = function () {
          var a = this.p;
          return a != null ? a : this.p = a = wc(this);
        };
        k.A = function (a, b) {
          return Ic(this, b);
        };
        k.J = function () {
          return ub(J, this.k);
        };
        k.R = function (a, b) {
          return P.a(b, this);
        };
        k.O = function (a, b, c) {
          return P.c(b, c, this);
        };
        k.N = function () {
          return this.first;
        };
        k.S = function () {
          return this.count === 1 ? J : this.M;
        };
        k.D = function () {
          return this;
        };
        k.F = function (a, b) {
          return new Fd(b, this.first, this.M, this.count, this.p);
        };
        k.G = function (a, b) {
          return new Fd(this.k, b, this, this.count + 1, null);
        };
        Fd.prototype[Ea] = function () {
          return uc(this);
        };
        function Hd(a) {
          this.k = a;
          this.j = 65937614;
          this.q = 8192;
        }
        k = Hd.prototype;
        k.toString = function () {
          return ec(this);
        };
        k.H = function () {
          return this.k;
        };
        k.T = function () {
          return null;
        };
        k.L = function () {
          return 0;
        };
        k.La = function () {
          return null;
        };
        k.Ma = function () {
          throw Error("Can't pop empty list");
        };
        k.B = function () {
          return 0;
        };
        k.A = function (a, b) {
          return Ic(this, b);
        };
        k.J = function () {
          return this;
        };
        k.R = function (a, b) {
          return P.a(b, this);
        };
        k.O = function (a, b, c) {
          return P.c(b, c, this);
        };
        k.N = function () {
          return null;
        };
        k.S = function () {
          return J;
        };
        k.D = function () {
          return null;
        };
        k.F = function (a, b) {
          return new Hd(b);
        };
        k.G = function (a, b) {
          return new Fd(this.k, b, null, 1, null);
        };
        var J = new Hd(null);
        Hd.prototype[Ea] = function () {
          return uc(this);
        };
        function Id(a) {
          return a ? a.j & 134217728 || a.xc ? true : a.j ? false : w(Fb, a) : w(Fb, a);
        }
        function Jd(a) {
          return Id(a) ? Gb(a) : A.c(Nc, J, a);
        }
        var Kd = (function () {
          function a(a2) {
            var d = null;
            if (0 < arguments.length) {
              for (var d = 0, e = Array(arguments.length - 0); d < e.length; ) (e[d] = arguments[d + 0], ++d);
              d = new F(e, 0);
            }
            return b.call(this, d);
          }
          function b(a2) {
            var b2;
            if (a2 instanceof F && a2.m === 0) b2 = a2.e; else a: {
              for (b2 = []; ; ) if (a2 != null) (b2.push(a2.N(null)), a2 = a2.T(null)); else break a;
              b2 = void 0;
            }
            a2 = b2.length;
            for (var e = J; ; ) if (0 < a2) {
              var f = a2 - 1, e = e.G(null, b2[a2 - 1]);
              a2 = f;
            } else return e;
          }
          a.i = 0;
          a.f = function (a2) {
            a2 = D(a2);
            return b(a2);
          };
          a.d = b;
          return a;
        })();
        function Ld(a, b, c, d) {
          this.k = a;
          this.first = b;
          this.M = c;
          this.p = d;
          this.j = 65929452;
          this.q = 8192;
        }
        k = Ld.prototype;
        k.toString = function () {
          return ec(this);
        };
        k.H = function () {
          return this.k;
        };
        k.T = function () {
          return this.M == null ? null : D(this.M);
        };
        k.B = function () {
          var a = this.p;
          return a != null ? a : this.p = a = wc(this);
        };
        k.A = function (a, b) {
          return Ic(this, b);
        };
        k.J = function () {
          return O(J, this.k);
        };
        k.R = function (a, b) {
          return P.a(b, this);
        };
        k.O = function (a, b, c) {
          return P.c(b, c, this);
        };
        k.N = function () {
          return this.first;
        };
        k.S = function () {
          return this.M == null ? J : this.M;
        };
        k.D = function () {
          return this;
        };
        k.F = function (a, b) {
          return new Ld(b, this.first, this.M, this.p);
        };
        k.G = function (a, b) {
          return new Ld(null, b, this, this.p);
        };
        Ld.prototype[Ea] = function () {
          return uc(this);
        };
        function M(a, b) {
          var c = b == null;
          return (c ? c : b && (b.j & 64 || b.jb)) ? new Ld(null, a, b, null) : new Ld(null, a, D(b), null);
        }
        function Md(a, b) {
          if (a.pa === b.pa) return 0;
          var c = Aa(a.ba);
          if (t(c ? b.ba : c)) return -1;
          if (t(a.ba)) {
            if (Aa(b.ba)) return 1;
            c = ha(a.ba, b.ba);
            return c === 0 ? ha(a.name, b.name) : c;
          }
          return ha(a.name, b.name);
        }
        function U(a, b, c, d) {
          this.ba = a;
          this.name = b;
          this.pa = c;
          this.Ya = d;
          this.j = 2153775105;
          this.q = 4096;
        }
        k = U.prototype;
        k.v = function (a, b) {
          return Lb(b, [z(":"), z(this.pa)].join(""));
        };
        k.B = function () {
          var a = this.Ya;
          return a != null ? a : this.Ya = a = oc(this) + 2654435769 | 0;
        };
        k.call = (function () {
          var a = null, a = function (a2, c, d) {
            switch (arguments.length) {
              case 2:
                return S.a(c, this);
              case 3:
                return S.c(c, this, d);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          a.a = function (a2, c) {
            return S.a(c, this);
          };
          a.c = function (a2, c, d) {
            return S.c(c, this, d);
          };
          return a;
        })();
        k.apply = function (a, b) {
          return this.call.apply(this, [this].concat(Fa(b)));
        };
        k.b = function (a) {
          return S.a(a, this);
        };
        k.a = function (a, b) {
          return S.c(a, this, b);
        };
        k.A = function (a, b) {
          return b instanceof U ? this.pa === b.pa : false;
        };
        k.toString = function () {
          return [z(":"), z(this.pa)].join("");
        };
        function Nd(a, b) {
          return a === b ? true : a instanceof U && b instanceof U ? a.pa === b.pa : false;
        }
        var Pd = (function () {
          function a(a2, b2) {
            return new U(a2, b2, [z(t(a2) ? [z(a2), z("/")].join("") : null), z(b2)].join(""), null);
          }
          function b(a2) {
            if (a2 instanceof U) return a2;
            if (a2 instanceof qc) {
              var b2;
              if (a2 && (a2.q & 4096 || a2.lc)) b2 = a2.ba; else throw Error([z("Doesn't support namespace: "), z(a2)].join(""));
              return new U(b2, Od.b ? Od.b(a2) : Od.call(null, a2), a2.ta, null);
            }
            return typeof a2 === "string" ? (b2 = a2.split("/"), b2.length === 2 ? new U(b2[0], b2[1], a2, null) : new U(null, b2[0], a2, null)) : null;
          }
          var c = null, c = function (c2, e) {
            switch (arguments.length) {
              case 1:
                return b.call(this, c2);
              case 2:
                return a.call(this, c2, e);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.b = b;
          c.a = a;
          return c;
        })();
        function V(a, b, c, d) {
          this.k = a;
          this.cb = b;
          this.C = c;
          this.p = d;
          this.q = 0;
          this.j = 32374988;
        }
        k = V.prototype;
        k.toString = function () {
          return ec(this);
        };
        function Qd(a) {
          a.cb != null && (a.C = a.cb.l ? a.cb.l() : a.cb.call(null), a.cb = null);
          return a.C;
        }
        k.H = function () {
          return this.k;
        };
        k.T = function () {
          Cb(this);
          return this.C == null ? null : K(this.C);
        };
        k.B = function () {
          var a = this.p;
          return a != null ? a : this.p = a = wc(this);
        };
        k.A = function (a, b) {
          return Ic(this, b);
        };
        k.J = function () {
          return O(J, this.k);
        };
        k.R = function (a, b) {
          return P.a(b, this);
        };
        k.O = function (a, b, c) {
          return P.c(b, c, this);
        };
        k.N = function () {
          Cb(this);
          return this.C == null ? null : G(this.C);
        };
        k.S = function () {
          Cb(this);
          return this.C != null ? H(this.C) : J;
        };
        k.D = function () {
          Qd(this);
          if (this.C == null) return null;
          for (var a = this.C; ; ) if (a instanceof V) a = Qd(a); else return (this.C = a, D(this.C));
        };
        k.F = function (a, b) {
          return new V(b, this.cb, this.C, this.p);
        };
        k.G = function (a, b) {
          return M(b, this);
        };
        V.prototype[Ea] = function () {
          return uc(this);
        };
        function Rd(a, b) {
          this.Ab = a;
          this.end = b;
          this.q = 0;
          this.j = 2;
        }
        Rd.prototype.L = function () {
          return this.end;
        };
        Rd.prototype.add = function (a) {
          this.Ab[this.end] = a;
          return this.end += 1;
        };
        Rd.prototype.ca = function () {
          var a = new Sd(this.Ab, 0, this.end);
          this.Ab = null;
          return a;
        };
        function Td(a) {
          return new Rd(Array(a), 0);
        }
        function Sd(a, b, c) {
          this.e = a;
          this.V = b;
          this.end = c;
          this.q = 0;
          this.j = 524306;
        }
        k = Sd.prototype;
        k.R = function (a, b) {
          return Dc.n(this.e, b, this.e[this.V], this.V + 1);
        };
        k.O = function (a, b, c) {
          return Dc.n(this.e, b, c, this.V);
        };
        k.Pb = function () {
          if (this.V === this.end) throw Error("-drop-first of empty chunk");
          return new Sd(this.e, this.V + 1, this.end);
        };
        k.Q = function (a, b) {
          return this.e[this.V + b];
        };
        k.$ = function (a, b, c) {
          return 0 <= b && b < this.end - this.V ? this.e[this.V + b] : c;
        };
        k.L = function () {
          return this.end - this.V;
        };
        var Ud = (function () {
          function a(a2, b2, c2) {
            return new Sd(a2, b2, c2);
          }
          function b(a2, b2) {
            return new Sd(a2, b2, a2.length);
          }
          function c(a2) {
            return new Sd(a2, 0, a2.length);
          }
          var d = null, d = function (d2, f, g) {
            switch (arguments.length) {
              case 1:
                return c.call(this, d2);
              case 2:
                return b.call(this, d2, f);
              case 3:
                return a.call(this, d2, f, g);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          d.b = c;
          d.a = b;
          d.c = a;
          return d;
        })();
        function Vd(a, b, c, d) {
          this.ca = a;
          this.ra = b;
          this.k = c;
          this.p = d;
          this.j = 31850732;
          this.q = 1536;
        }
        k = Vd.prototype;
        k.toString = function () {
          return ec(this);
        };
        k.H = function () {
          return this.k;
        };
        k.T = function () {
          if (1 < Ma(this.ca)) return new Vd(Xb(this.ca), this.ra, this.k, null);
          var a = Cb(this.ra);
          return a == null ? null : a;
        };
        k.B = function () {
          var a = this.p;
          return a != null ? a : this.p = a = wc(this);
        };
        k.A = function (a, b) {
          return Ic(this, b);
        };
        k.J = function () {
          return O(J, this.k);
        };
        k.N = function () {
          return C.a(this.ca, 0);
        };
        k.S = function () {
          return 1 < Ma(this.ca) ? new Vd(Xb(this.ca), this.ra, this.k, null) : this.ra == null ? J : this.ra;
        };
        k.D = function () {
          return this;
        };
        k.Cb = function () {
          return this.ca;
        };
        k.Db = function () {
          return this.ra == null ? J : this.ra;
        };
        k.F = function (a, b) {
          return new Vd(this.ca, this.ra, b, this.p);
        };
        k.G = function (a, b) {
          return M(b, this);
        };
        k.Bb = function () {
          return this.ra == null ? null : this.ra;
        };
        Vd.prototype[Ea] = function () {
          return uc(this);
        };
        function Wd(a, b) {
          return Ma(a) === 0 ? b : new Vd(a, b, null, null);
        }
        function Xd(a, b) {
          a.add(b);
        }
        function rd(a) {
          for (var b = []; ; ) if (D(a)) (b.push(G(a)), a = K(a)); else return b;
        }
        function Yd(a, b) {
          if (Ec(a)) return Q(a);
          for (var c = a, d = b, e = 0; ; ) if (0 < d && D(c)) (c = K(c), d -= 1, e += 1); else return e;
        }
        var $d = function Zd(b) {
          return b == null ? null : K(b) == null ? D(G(b)) : M(G(b), Zd(K(b)));
        }, ae = (function () {
          function a(a2, b2) {
            return new V(null, function () {
              var c2 = D(a2);
              return c2 ? fd(c2) ? Wd(Yb(c2), d.a(Zb(c2), b2)) : M(G(c2), d.a(H(c2), b2)) : b2;
            }, null, null);
          }
          function b(a2) {
            return new V(null, function () {
              return a2;
            }, null, null);
          }
          function c() {
            return new V(null, function () {
              return null;
            }, null, null);
          }
          var d = null, e = (function () {
            function a2(c2, d2, e2) {
              var f = null;
              if (2 < arguments.length) {
                for (var f = 0, q = Array(arguments.length - 2); f < q.length; ) (q[f] = arguments[f + 2], ++f);
                f = new F(q, 0);
              }
              return b2.call(this, c2, d2, f);
            }
            function b2(a3, c2, e2) {
              return (function q(a4, b3) {
                return new V(null, function () {
                  var c3 = D(a4);
                  return c3 ? fd(c3) ? Wd(Yb(c3), q(Zb(c3), b3)) : M(G(c3), q(H(c3), b3)) : t(b3) ? q(G(b3), K(b3)) : null;
                }, null, null);
              })(d.a(a3, c2), e2);
            }
            a2.i = 2;
            a2.f = function (a3) {
              var c2 = G(a3);
              a3 = K(a3);
              var d2 = G(a3);
              a3 = H(a3);
              return b2(c2, d2, a3);
            };
            a2.d = b2;
            return a2;
          })(), d = function (d2, g, h) {
            switch (arguments.length) {
              case 0:
                return c.call(this);
              case 1:
                return b.call(this, d2);
              case 2:
                return a.call(this, d2, g);
              default:
                var l = null;
                if (2 < arguments.length) {
                  for (var l = 0, m = Array(arguments.length - 2); l < m.length; ) (m[l] = arguments[l + 2], ++l);
                  l = new F(m, 0);
                }
                return e.d(d2, g, l);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          d.i = 2;
          d.f = e.f;
          d.l = c;
          d.b = b;
          d.a = a;
          d.d = e.d;
          return d;
        })(), be = (function () {
          function a(a2, b2, c2, d2) {
            return M(a2, M(b2, M(c2, d2)));
          }
          function b(a2, b2, c2) {
            return M(a2, M(b2, c2));
          }
          var c = null, d = (function () {
            function a2(c2, d2, e, m, p) {
              var q = null;
              if (4 < arguments.length) {
                for (var q = 0, s = Array(arguments.length - 4); q < s.length; ) (s[q] = arguments[q + 4], ++q);
                q = new F(s, 0);
              }
              return b2.call(this, c2, d2, e, m, q);
            }
            function b2(a3, c2, d2, e, f) {
              return M(a3, M(c2, M(d2, M(e, $d(f)))));
            }
            a2.i = 4;
            a2.f = function (a3) {
              var c2 = G(a3);
              a3 = K(a3);
              var d2 = G(a3);
              a3 = K(a3);
              var e = G(a3);
              a3 = K(a3);
              var p = G(a3);
              a3 = H(a3);
              return b2(c2, d2, e, p, a3);
            };
            a2.d = b2;
            return a2;
          })(), c = function (c2, f, g, h, l) {
            switch (arguments.length) {
              case 1:
                return D(c2);
              case 2:
                return M(c2, f);
              case 3:
                return b.call(this, c2, f, g);
              case 4:
                return a.call(this, c2, f, g, h);
              default:
                var m = null;
                if (4 < arguments.length) {
                  for (var m = 0, p = Array(arguments.length - 4); m < p.length; ) (p[m] = arguments[m + 4], ++m);
                  m = new F(p, 0);
                }
                return d.d(c2, f, g, h, m);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.i = 4;
          c.f = d.f;
          c.b = function (a2) {
            return D(a2);
          };
          c.a = function (a2, b2) {
            return M(a2, b2);
          };
          c.c = b;
          c.n = a;
          c.d = d.d;
          return c;
        })();
        function ce(a) {
          return Qb(a);
        }
        var de = (function () {
          function a() {
            return Ob(Mc);
          }
          var b = null, c = (function () {
            function a2(c2, d, h) {
              var l = null;
              if (2 < arguments.length) {
                for (var l = 0, m = Array(arguments.length - 2); l < m.length; ) (m[l] = arguments[l + 2], ++l);
                l = new F(m, 0);
              }
              return b2.call(this, c2, d, l);
            }
            function b2(a3, c2, d) {
              for (; ; ) if ((a3 = Pb(a3, c2), t(d))) (c2 = G(d), d = K(d)); else return a3;
            }
            a2.i = 2;
            a2.f = function (a3) {
              var c2 = G(a3);
              a3 = K(a3);
              var d = G(a3);
              a3 = H(a3);
              return b2(c2, d, a3);
            };
            a2.d = b2;
            return a2;
          })(), b = function (b2, e, f) {
            switch (arguments.length) {
              case 0:
                return a.call(this);
              case 1:
                return b2;
              case 2:
                return Pb(b2, e);
              default:
                var g = null;
                if (2 < arguments.length) {
                  for (var g = 0, h = Array(arguments.length - 2); g < h.length; ) (h[g] = arguments[g + 2], ++g);
                  g = new F(h, 0);
                }
                return c.d(b2, e, g);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          b.i = 2;
          b.f = c.f;
          b.l = a;
          b.b = function (a2) {
            return a2;
          };
          b.a = function (a2, b2) {
            return Pb(a2, b2);
          };
          b.d = c.d;
          return b;
        })(), ee = (function () {
          var a = null, b = (function () {
            function a2(c, f, g, h) {
              var l = null;
              if (3 < arguments.length) {
                for (var l = 0, m = Array(arguments.length - 3); l < m.length; ) (m[l] = arguments[l + 3], ++l);
                l = new F(m, 0);
              }
              return b2.call(this, c, f, g, l);
            }
            function b2(a3, c, d, h) {
              for (; ; ) if ((a3 = Rb(a3, c, d), t(h))) (c = G(h), d = Lc(h), h = K(K(h))); else return a3;
            }
            a2.i = 3;
            a2.f = function (a3) {
              var c = G(a3);
              a3 = K(a3);
              var g = G(a3);
              a3 = K(a3);
              var h = G(a3);
              a3 = H(a3);
              return b2(c, g, h, a3);
            };
            a2.d = b2;
            return a2;
          })(), a = function (a2, d, e, f) {
            switch (arguments.length) {
              case 3:
                return Rb(a2, d, e);
              default:
                var g = null;
                if (3 < arguments.length) {
                  for (var g = 0, h = Array(arguments.length - 3); g < h.length; ) (h[g] = arguments[g + 3], ++g);
                  g = new F(h, 0);
                }
                return b.d(a2, d, e, g);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          a.i = 3;
          a.f = b.f;
          a.c = function (a2, b2, e) {
            return Rb(a2, b2, e);
          };
          a.d = b.d;
          return a;
        })(), fe = (function () {
          var a = null, b = (function () {
            function a2(c, f, g) {
              var h = null;
              if (2 < arguments.length) {
                for (var h = 0, l = Array(arguments.length - 2); h < l.length; ) (l[h] = arguments[h + 2], ++h);
                h = new F(l, 0);
              }
              return b2.call(this, c, f, h);
            }
            function b2(a3, c, d) {
              for (; ; ) if ((a3 = Sb(a3, c), t(d))) (c = G(d), d = K(d)); else return a3;
            }
            a2.i = 2;
            a2.f = function (a3) {
              var c = G(a3);
              a3 = K(a3);
              var g = G(a3);
              a3 = H(a3);
              return b2(c, g, a3);
            };
            a2.d = b2;
            return a2;
          })(), a = function (a2, d, e) {
            switch (arguments.length) {
              case 2:
                return Sb(a2, d);
              default:
                var f = null;
                if (2 < arguments.length) {
                  for (var f = 0, g = Array(arguments.length - 2); f < g.length; ) (g[f] = arguments[f + 2], ++f);
                  f = new F(g, 0);
                }
                return b.d(a2, d, f);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          a.i = 2;
          a.f = b.f;
          a.a = function (a2, b2) {
            return Sb(a2, b2);
          };
          a.d = b.d;
          return a;
        })(), ge = (function () {
          var a = null, b = (function () {
            function a2(c, f, g) {
              var h = null;
              if (2 < arguments.length) {
                for (var h = 0, l = Array(arguments.length - 2); h < l.length; ) (l[h] = arguments[h + 2], ++h);
                h = new F(l, 0);
              }
              return b2.call(this, c, f, h);
            }
            function b2(a3, c, d) {
              for (; ; ) if ((a3 = Vb(a3, c), t(d))) (c = G(d), d = K(d)); else return a3;
            }
            a2.i = 2;
            a2.f = function (a3) {
              var c = G(a3);
              a3 = K(a3);
              var g = G(a3);
              a3 = H(a3);
              return b2(c, g, a3);
            };
            a2.d = b2;
            return a2;
          })(), a = function (a2, d, e) {
            switch (arguments.length) {
              case 2:
                return Vb(a2, d);
              default:
                var f = null;
                if (2 < arguments.length) {
                  for (var f = 0, g = Array(arguments.length - 2); f < g.length; ) (g[f] = arguments[f + 2], ++f);
                  f = new F(g, 0);
                }
                return b.d(a2, d, f);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          a.i = 2;
          a.f = b.f;
          a.a = function (a2, b2) {
            return Vb(a2, b2);
          };
          a.d = b.d;
          return a;
        })();
        function he(a, b, c) {
          var d = D(c);
          if (b === 0) return a.l ? a.l() : a.call(null);
          c = Va(d);
          var e = Wa(d);
          if (b === 1) return a.b ? a.b(c) : a.b ? a.b(c) : a.call(null, c);
          var d = Va(e), f = Wa(e);
          if (b === 2) return a.a ? a.a(c, d) : a.a ? a.a(c, d) : a.call(null, c, d);
          var e = Va(f), g = Wa(f);
          if (b === 3) return a.c ? a.c(c, d, e) : a.c ? a.c(c, d, e) : a.call(null, c, d, e);
          var f = Va(g), h = Wa(g);
          if (b === 4) return a.n ? a.n(c, d, e, f) : a.n ? a.n(c, d, e, f) : a.call(null, c, d, e, f);
          var g = Va(h), l = Wa(h);
          if (b === 5) return a.r ? a.r(c, d, e, f, g) : a.r ? a.r(c, d, e, f, g) : a.call(null, c, d, e, f, g);
          var h = Va(l), m = Wa(l);
          if (b === 6) return a.P ? a.P(c, d, e, f, g, h) : a.P ? a.P(c, d, e, f, g, h) : a.call(null, c, d, e, f, g, h);
          var l = Va(m), p = Wa(m);
          if (b === 7) return a.ia ? a.ia(c, d, e, f, g, h, l) : a.ia ? a.ia(c, d, e, f, g, h, l) : a.call(null, c, d, e, f, g, h, l);
          var m = Va(p), q = Wa(p);
          if (b === 8) return a.Ga ? a.Ga(c, d, e, f, g, h, l, m) : a.Ga ? a.Ga(c, d, e, f, g, h, l, m) : a.call(null, c, d, e, f, g, h, l, m);
          var p = Va(q), s = Wa(q);
          if (b === 9) return a.Ha ? a.Ha(c, d, e, f, g, h, l, m, p) : a.Ha ? a.Ha(c, d, e, f, g, h, l, m, p) : a.call(null, c, d, e, f, g, h, l, m, p);
          var q = Va(s), u = Wa(s);
          if (b === 10) return a.va ? a.va(c, d, e, f, g, h, l, m, p, q) : a.va ? a.va(c, d, e, f, g, h, l, m, p, q) : a.call(null, c, d, e, f, g, h, l, m, p, q);
          var s = Va(u), v = Wa(u);
          if (b === 11) return a.wa ? a.wa(c, d, e, f, g, h, l, m, p, q, s) : a.wa ? a.wa(c, d, e, f, g, h, l, m, p, q, s) : a.call(null, c, d, e, f, g, h, l, m, p, q, s);
          var u = Va(v), y = Wa(v);
          if (b === 12) return a.xa ? a.xa(c, d, e, f, g, h, l, m, p, q, s, u) : a.xa ? a.xa(c, d, e, f, g, h, l, m, p, q, s, u) : a.call(null, c, d, e, f, g, h, l, m, p, q, s, u);
          var v = Va(y), B = Wa(y);
          if (b === 13) return a.ya ? a.ya(c, d, e, f, g, h, l, m, p, q, s, u, v) : a.ya ? a.ya(c, d, e, f, g, h, l, m, p, q, s, u, v) : a.call(null, c, d, e, f, g, h, l, m, p, q, s, u, v);
          var y = Va(B), E = Wa(B);
          if (b === 14) return a.za ? a.za(c, d, e, f, g, h, l, m, p, q, s, u, v, y) : a.za ? a.za(c, d, e, f, g, h, l, m, p, q, s, u, v, y) : a.call(null, c, d, e, f, g, h, l, m, p, q, s, u, v, y);
          var B = Va(E), N = Wa(E);
          if (b === 15) return a.Aa ? a.Aa(c, d, e, f, g, h, l, m, p, q, s, u, v, y, B) : a.Aa ? a.Aa(c, d, e, f, g, h, l, m, p, q, s, u, v, y, B) : a.call(null, c, d, e, f, g, h, l, m, p, q, s, u, v, y, B);
          var E = Va(N), Y = Wa(N);
          if (b === 16) return a.Ba ? a.Ba(c, d, e, f, g, h, l, m, p, q, s, u, v, y, B, E) : a.Ba ? a.Ba(c, d, e, f, g, h, l, m, p, q, s, u, v, y, B, E) : a.call(null, c, d, e, f, g, h, l, m, p, q, s, u, v, y, B, E);
          var N = Va(Y), ra = Wa(Y);
          if (b === 17) return a.Ca ? a.Ca(c, d, e, f, g, h, l, m, p, q, s, u, v, y, B, E, N) : a.Ca ? a.Ca(c, d, e, f, g, h, l, m, p, q, s, u, v, y, B, E, N) : a.call(null, c, d, e, f, g, h, l, m, p, q, s, u, v, y, B, E, N);
          var Y = Va(ra), Pa = Wa(ra);
          if (b === 18) return a.Da ? a.Da(c, d, e, f, g, h, l, m, p, q, s, u, v, y, B, E, N, Y) : a.Da ? a.Da(c, d, e, f, g, h, l, m, p, q, s, u, v, y, B, E, N, Y) : a.call(null, c, d, e, f, g, h, l, m, p, q, s, u, v, y, B, E, N, Y);
          ra = Va(Pa);
          Pa = Wa(Pa);
          if (b === 19) return a.Ea ? a.Ea(c, d, e, f, g, h, l, m, p, q, s, u, v, y, B, E, N, Y, ra) : a.Ea ? a.Ea(c, d, e, f, g, h, l, m, p, q, s, u, v, y, B, E, N, Y, ra) : a.call(null, c, d, e, f, g, h, l, m, p, q, s, u, v, y, B, E, N, Y, ra);
          var I = Va(Pa);
          Wa(Pa);
          if (b === 20) return a.Fa ? a.Fa(c, d, e, f, g, h, l, m, p, q, s, u, v, y, B, E, N, Y, ra, I) : a.Fa ? a.Fa(c, d, e, f, g, h, l, m, p, q, s, u, v, y, B, E, N, Y, ra, I) : a.call(null, c, d, e, f, g, h, l, m, p, q, s, u, v, y, B, E, N, Y, ra, I);
          throw Error("Only up to 20 arguments supported on functions");
        }
        var T = (function () {
          function a(a2, b2, c2, d2, e2) {
            b2 = be.n(b2, c2, d2, e2);
            c2 = a2.i;
            return a2.f ? (d2 = Yd(b2, c2 + 1), d2 <= c2 ? he(a2, d2, b2) : a2.f(b2)) : a2.apply(a2, rd(b2));
          }
          function b(a2, b2, c2, d2) {
            b2 = be.c(b2, c2, d2);
            c2 = a2.i;
            return a2.f ? (d2 = Yd(b2, c2 + 1), d2 <= c2 ? he(a2, d2, b2) : a2.f(b2)) : a2.apply(a2, rd(b2));
          }
          function c(a2, b2, c2) {
            b2 = be.a(b2, c2);
            c2 = a2.i;
            if (a2.f) {
              var d2 = Yd(b2, c2 + 1);
              return d2 <= c2 ? he(a2, d2, b2) : a2.f(b2);
            }
            return a2.apply(a2, rd(b2));
          }
          function d(a2, b2) {
            var c2 = a2.i;
            if (a2.f) {
              var d2 = Yd(b2, c2 + 1);
              return d2 <= c2 ? he(a2, d2, b2) : a2.f(b2);
            }
            return a2.apply(a2, rd(b2));
          }
          var e = null, f = (function () {
            function a2(c2, d2, e2, f2, g, u) {
              var v = null;
              if (5 < arguments.length) {
                for (var v = 0, y = Array(arguments.length - 5); v < y.length; ) (y[v] = arguments[v + 5], ++v);
                v = new F(y, 0);
              }
              return b2.call(this, c2, d2, e2, f2, g, v);
            }
            function b2(a3, c2, d2, e2, f2, g) {
              c2 = M(c2, M(d2, M(e2, M(f2, $d(g)))));
              d2 = a3.i;
              return a3.f ? (e2 = Yd(c2, d2 + 1), e2 <= d2 ? he(a3, e2, c2) : a3.f(c2)) : a3.apply(a3, rd(c2));
            }
            a2.i = 5;
            a2.f = function (a3) {
              var c2 = G(a3);
              a3 = K(a3);
              var d2 = G(a3);
              a3 = K(a3);
              var e2 = G(a3);
              a3 = K(a3);
              var f2 = G(a3);
              a3 = K(a3);
              var g = G(a3);
              a3 = H(a3);
              return b2(c2, d2, e2, f2, g, a3);
            };
            a2.d = b2;
            return a2;
          })(), e = function (e2, h, l, m, p, q) {
            switch (arguments.length) {
              case 2:
                return d.call(this, e2, h);
              case 3:
                return c.call(this, e2, h, l);
              case 4:
                return b.call(this, e2, h, l, m);
              case 5:
                return a.call(this, e2, h, l, m, p);
              default:
                var s = null;
                if (5 < arguments.length) {
                  for (var s = 0, u = Array(arguments.length - 5); s < u.length; ) (u[s] = arguments[s + 5], ++s);
                  s = new F(u, 0);
                }
                return f.d(e2, h, l, m, p, s);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          e.i = 5;
          e.f = f.f;
          e.a = d;
          e.c = c;
          e.n = b;
          e.r = a;
          e.d = f.d;
          return e;
        })(), ie = (function () {
          function a(a2, b2, c2, d2, e2, f2) {
            var g2 = O, v = Vc(a2);
            b2 = b2.r ? b2.r(v, c2, d2, e2, f2) : b2.call(null, v, c2, d2, e2, f2);
            return g2(a2, b2);
          }
          function b(a2, b2, c2, d2, e2) {
            var f2 = O, g2 = Vc(a2);
            b2 = b2.n ? b2.n(g2, c2, d2, e2) : b2.call(null, g2, c2, d2, e2);
            return f2(a2, b2);
          }
          function c(a2, b2, c2, d2) {
            var e2 = O, f2 = Vc(a2);
            b2 = b2.c ? b2.c(f2, c2, d2) : b2.call(null, f2, c2, d2);
            return e2(a2, b2);
          }
          function d(a2, b2, c2) {
            var d2 = O, e2 = Vc(a2);
            b2 = b2.a ? b2.a(e2, c2) : b2.call(null, e2, c2);
            return d2(a2, b2);
          }
          function e(a2, b2) {
            var c2 = O, d2;
            d2 = Vc(a2);
            d2 = b2.b ? b2.b(d2) : b2.call(null, d2);
            return c2(a2, d2);
          }
          var f = null, g = (function () {
            function a2(c2, d2, e2, f2, g2, h, y) {
              var B = null;
              if (6 < arguments.length) {
                for (var B = 0, E = Array(arguments.length - 6); B < E.length; ) (E[B] = arguments[B + 6], ++B);
                B = new F(E, 0);
              }
              return b2.call(this, c2, d2, e2, f2, g2, h, B);
            }
            function b2(a3, c2, d2, e2, f2, g2, h) {
              return O(a3, T.d(c2, Vc(a3), d2, e2, f2, Kc([g2, h], 0)));
            }
            a2.i = 6;
            a2.f = function (a3) {
              var c2 = G(a3);
              a3 = K(a3);
              var d2 = G(a3);
              a3 = K(a3);
              var e2 = G(a3);
              a3 = K(a3);
              var f2 = G(a3);
              a3 = K(a3);
              var g2 = G(a3);
              a3 = K(a3);
              var h = G(a3);
              a3 = H(a3);
              return b2(c2, d2, e2, f2, g2, h, a3);
            };
            a2.d = b2;
            return a2;
          })(), f = function (f2, l, m, p, q, s, u) {
            switch (arguments.length) {
              case 2:
                return e.call(this, f2, l);
              case 3:
                return d.call(this, f2, l, m);
              case 4:
                return c.call(this, f2, l, m, p);
              case 5:
                return b.call(this, f2, l, m, p, q);
              case 6:
                return a.call(this, f2, l, m, p, q, s);
              default:
                var v = null;
                if (6 < arguments.length) {
                  for (var v = 0, y = Array(arguments.length - 6); v < y.length; ) (y[v] = arguments[v + 6], ++v);
                  v = new F(y, 0);
                }
                return g.d(f2, l, m, p, q, s, v);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          f.i = 6;
          f.f = g.f;
          f.a = e;
          f.c = d;
          f.n = c;
          f.r = b;
          f.P = a;
          f.d = g.d;
          return f;
        })(), je = (function () {
          function a(a2, b2) {
            return !sc.a(a2, b2);
          }
          var b = null, c = (function () {
            function a2(c2, d, h) {
              var l = null;
              if (2 < arguments.length) {
                for (var l = 0, m = Array(arguments.length - 2); l < m.length; ) (m[l] = arguments[l + 2], ++l);
                l = new F(m, 0);
              }
              return b2.call(this, c2, d, l);
            }
            function b2(a3, c2, d) {
              return Aa(T.n(sc, a3, c2, d));
            }
            a2.i = 2;
            a2.f = function (a3) {
              var c2 = G(a3);
              a3 = K(a3);
              var d = G(a3);
              a3 = H(a3);
              return b2(c2, d, a3);
            };
            a2.d = b2;
            return a2;
          })(), b = function (b2, e, f) {
            switch (arguments.length) {
              case 1:
                return false;
              case 2:
                return a.call(this, b2, e);
              default:
                var g = null;
                if (2 < arguments.length) {
                  for (var g = 0, h = Array(arguments.length - 2); g < h.length; ) (h[g] = arguments[g + 2], ++g);
                  g = new F(h, 0);
                }
                return c.d(b2, e, g);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          b.i = 2;
          b.f = c.f;
          b.b = function () {
            return false;
          };
          b.a = a;
          b.d = c.d;
          return b;
        })(), qe = function ke() {
          typeof ja === "undefined" && (ja = function (b, c) {
            this.pc = b;
            this.oc = c;
            this.q = 0;
            this.j = 393216;
          }, ja.prototype.ga = function () {
            return false;
          }, ja.prototype.next = function () {
            return Error("No such element");
          }, ja.prototype.H = function () {
            return this.oc;
          }, ja.prototype.F = function (b, c) {
            return new ja(this.pc, c);
          }, ja.Yb = true, ja.Xb = "cljs.core/t12660", ja.nc = function (b) {
            return Lb(b, "cljs.core/t12660");
          });
          return new ja(ke, new pa(null, 5, [le, 54, me, 2998, ne, 3, oe, 2994, pe, "/Users/davidnolen/development/clojure/mori/out-mori-adv/cljs/core.cljs"], null));
        };
        function re(a, b) {
          this.C = a;
          this.m = b;
        }
        re.prototype.ga = function () {
          return this.m < this.C.length;
        };
        re.prototype.next = function () {
          var a = this.C.charAt(this.m);
          this.m += 1;
          return a;
        };
        function se(a, b) {
          this.e = a;
          this.m = b;
        }
        se.prototype.ga = function () {
          return this.m < this.e.length;
        };
        se.prototype.next = function () {
          var a = this.e[this.m];
          this.m += 1;
          return a;
        };
        var te = {}, ue = {};
        function ve(a, b) {
          this.eb = a;
          this.Qa = b;
        }
        ve.prototype.ga = function () {
          this.eb === te ? (this.eb = ue, this.Qa = D(this.Qa)) : this.eb === this.Qa && (this.Qa = K(this.eb));
          return this.Qa != null;
        };
        ve.prototype.next = function () {
          if (Aa(this.ga())) throw Error("No such element");
          this.eb = this.Qa;
          return G(this.Qa);
        };
        function we(a) {
          if (a == null) return qe();
          if (typeof a === "string") return new re(a, 0);
          if (a instanceof Array) return new se(a, 0);
          if (a ? t(t(null) ? null : a.vb) || (a.yb ? 0 : w(bc, a)) : w(bc, a)) return cc(a);
          if (ld(a)) return new ve(te, a);
          throw Error([z("Cannot create iterator from "), z(a)].join(""));
        }
        function xe(a, b) {
          this.fa = a;
          this.$b = b;
        }
        xe.prototype.step = function (a) {
          for (var b = this; ; ) {
            if (t((function () {
              var c = a.X != null;
              return c ? b.$b.ga() : c;
            })())) if (Ac((function () {
              var c = b.$b.next();
              return b.fa.a ? b.fa.a(a, c) : b.fa.call(null, a, c);
            })())) a.M != null && (a.M.X = null); else continue;
            break;
          }
          return a.X == null ? null : b.fa.b ? b.fa.b(a) : b.fa.call(null, a);
        };
        function ye(a, b) {
          var c = (function () {
            function a2(b3, c3) {
              b3.first = c3;
              b3.M = new ze(b3.X, null, null, null);
              b3.X = null;
              return b3.M;
            }
            function b2(a3) {
              (Ac(a3) ? qb(a3) : a3).X = null;
              return a3;
            }
            var c2 = null, c2 = function (c3, f) {
              switch (arguments.length) {
                case 1:
                  return b2.call(this, c3);
                case 2:
                  return a2.call(this, c3, f);
              }
              throw Error("Invalid arity: " + arguments.length);
            };
            c2.b = b2;
            c2.a = a2;
            return c2;
          })();
          return new xe(a.b ? a.b(c) : a.call(null, c), b);
        }
        function Ae(a, b, c) {
          this.fa = a;
          this.Kb = b;
          this.ac = c;
        }
        Ae.prototype.ga = function () {
          for (var a = D(this.Kb); ; ) if (a != null) {
            var b = G(a);
            if (Aa(b.ga())) return false;
            a = K(a);
          } else return true;
        };
        Ae.prototype.next = function () {
          for (var a = this.Kb.length, b = 0; ; ) if (b < a) (this.ac[b] = this.Kb[b].next(), b += 1); else break;
          return Jc.a(this.ac, 0);
        };
        Ae.prototype.step = function (a) {
          for (; ; ) {
            var b;
            b = (b = a.X != null) ? this.ga() : b;
            if (t(b)) if (Ac(T.a(this.fa, M(a, this.next())))) a.M != null && (a.M.X = null); else continue;
            break;
          }
          return a.X == null ? null : this.fa.b ? this.fa.b(a) : this.fa.call(null, a);
        };
        var Be = (function () {
          function a(a2, b2, c2) {
            var g = (function () {
              function a3(b4, c4) {
                b4.first = c4;
                b4.M = new ze(b4.X, null, null, null);
                b4.X = null;
                return b4.M;
              }
              function b3(a4) {
                a4 = Ac(a4) ? qb(a4) : a4;
                a4.X = null;
                return a4;
              }
              var c3 = null, c3 = function (c4, d) {
                switch (arguments.length) {
                  case 1:
                    return b3.call(this, c4);
                  case 2:
                    return a3.call(this, c4, d);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              c3.b = b3;
              c3.a = a3;
              return c3;
            })();
            return new Ae(a2.b ? a2.b(g) : a2.call(null, g), b2, c2);
          }
          function b(a2, b2) {
            return c.c(a2, b2, Array(b2.length));
          }
          var c = null, c = function (c2, e, f) {
            switch (arguments.length) {
              case 2:
                return b.call(this, c2, e);
              case 3:
                return a.call(this, c2, e, f);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.a = b;
          c.c = a;
          return c;
        })();
        function ze(a, b, c, d) {
          this.X = a;
          this.first = b;
          this.M = c;
          this.k = d;
          this.q = 0;
          this.j = 31719628;
        }
        k = ze.prototype;
        k.T = function () {
          this.X != null && Cb(this);
          return this.M == null ? null : Cb(this.M);
        };
        k.N = function () {
          this.X != null && Cb(this);
          return this.M == null ? null : this.first;
        };
        k.S = function () {
          this.X != null && Cb(this);
          return this.M == null ? J : this.M;
        };
        k.D = function () {
          this.X != null && this.X.step(this);
          return this.M == null ? null : this;
        };
        k.B = function () {
          return wc(this);
        };
        k.A = function (a, b) {
          return Cb(this) != null ? Ic(this, b) : cd(b) && D(b) == null;
        };
        k.J = function () {
          return J;
        };
        k.G = function (a, b) {
          return M(b, Cb(this));
        };
        k.F = function (a, b) {
          return new ze(this.X, this.first, this.M, b);
        };
        ze.prototype[Ea] = function () {
          return uc(this);
        };
        var Ce = (function () {
          function a(a2) {
            return kd(a2) ? a2 : (a2 = D(a2)) ? a2 : J;
          }
          var b = null, c = (function () {
            function a2(c2, d, h) {
              var l = null;
              if (2 < arguments.length) {
                for (var l = 0, m = Array(arguments.length - 2); l < m.length; ) (m[l] = arguments[l + 2], ++l);
                l = new F(m, 0);
              }
              return b2.call(this, c2, d, l);
            }
            function b2(a3, c2, d) {
              d = rd(M(c2, d));
              c2 = [];
              d = D(d);
              for (var e = null, m = 0, p = 0; ; ) if (p < m) {
                var q = e.Q(null, p);
                c2.push(we(q));
                p += 1;
              } else if (d = D(d)) (e = d, fd(e) ? (d = Yb(e), p = Zb(e), e = d, m = Q(d), d = p) : (d = G(e), c2.push(we(d)), d = K(e), e = null, m = 0), p = 0); else break;
              return new ze(Be.c(a3, c2, Array(c2.length)), null, null, null);
            }
            a2.i = 2;
            a2.f = function (a3) {
              var c2 = G(a3);
              a3 = K(a3);
              var d = G(a3);
              a3 = H(a3);
              return b2(c2, d, a3);
            };
            a2.d = b2;
            return a2;
          })(), b = function (b2, e, f) {
            switch (arguments.length) {
              case 1:
                return a.call(this, b2);
              case 2:
                return new ze(ye(b2, we(e)), null, null, null);
              default:
                var g = null;
                if (2 < arguments.length) {
                  for (var g = 0, h = Array(arguments.length - 2); g < h.length; ) (h[g] = arguments[g + 2], ++g);
                  g = new F(h, 0);
                }
                return c.d(b2, e, g);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          b.i = 2;
          b.f = c.f;
          b.b = a;
          b.a = function (a2, b2) {
            return new ze(ye(a2, we(b2)), null, null, null);
          };
          b.d = c.d;
          return b;
        })();
        function Ee(a, b) {
          for (; ; ) {
            if (D(b) == null) return true;
            var c;
            c = G(b);
            c = a.b ? a.b(c) : a.call(null, c);
            if (t(c)) {
              c = a;
              var d = K(b);
              a = c;
              b = d;
            } else return false;
          }
        }
        function Fe(a, b) {
          for (; ; ) if (D(b)) {
            var c;
            c = G(b);
            c = a.b ? a.b(c) : a.call(null, c);
            if (t(c)) return c;
            c = a;
            var d = K(b);
            a = c;
            b = d;
          } else return null;
        }
        function Ge(a) {
          if (typeof a === "number" && Aa(isNaN(a)) && a !== Infinity && parseFloat(a) === parseInt(a, 10)) return (a & 1) === 0;
          throw Error([z("Argument must be an integer: "), z(a)].join(""));
        }
        function He(a) {
          return (function () {
            function b(b2, c2) {
              return Aa(a.a ? a.a(b2, c2) : a.call(null, b2, c2));
            }
            function c(b2) {
              return Aa(a.b ? a.b(b2) : a.call(null, b2));
            }
            function d() {
              return Aa(a.l ? a.l() : a.call(null));
            }
            var e = null, f = (function () {
              function b2(a2, d2, e2) {
                var f2 = null;
                if (2 < arguments.length) {
                  for (var f2 = 0, g = Array(arguments.length - 2); f2 < g.length; ) (g[f2] = arguments[f2 + 2], ++f2);
                  f2 = new F(g, 0);
                }
                return c2.call(this, a2, d2, f2);
              }
              function c2(b3, d2, e2) {
                return Aa(T.n(a, b3, d2, e2));
              }
              b2.i = 2;
              b2.f = function (a2) {
                var b3 = G(a2);
                a2 = K(a2);
                var d2 = G(a2);
                a2 = H(a2);
                return c2(b3, d2, a2);
              };
              b2.d = c2;
              return b2;
            })(), e = function (a2, e2, l) {
              switch (arguments.length) {
                case 0:
                  return d.call(this);
                case 1:
                  return c.call(this, a2);
                case 2:
                  return b.call(this, a2, e2);
                default:
                  var m = null;
                  if (2 < arguments.length) {
                    for (var m = 0, p = Array(arguments.length - 2); m < p.length; ) (p[m] = arguments[m + 2], ++m);
                    m = new F(p, 0);
                  }
                  return f.d(a2, e2, m);
              }
              throw Error("Invalid arity: " + arguments.length);
            };
            e.i = 2;
            e.f = f.f;
            e.l = d;
            e.b = c;
            e.a = b;
            e.d = f.d;
            return e;
          })();
        }
        var Ie = (function () {
          function a(a2, b2, c2) {
            return (function () {
              function d2(h, l2, m2) {
                h = c2.c ? c2.c(h, l2, m2) : c2.call(null, h, l2, m2);
                h = b2.b ? b2.b(h) : b2.call(null, h);
                return a2.b ? a2.b(h) : a2.call(null, h);
              }
              function l(d3, h) {
                var l2;
                l2 = c2.a ? c2.a(d3, h) : c2.call(null, d3, h);
                l2 = b2.b ? b2.b(l2) : b2.call(null, l2);
                return a2.b ? a2.b(l2) : a2.call(null, l2);
              }
              function m(d3) {
                d3 = c2.b ? c2.b(d3) : c2.call(null, d3);
                d3 = b2.b ? b2.b(d3) : b2.call(null, d3);
                return a2.b ? a2.b(d3) : a2.call(null, d3);
              }
              function p() {
                var d3;
                d3 = c2.l ? c2.l() : c2.call(null);
                d3 = b2.b ? b2.b(d3) : b2.call(null, d3);
                return a2.b ? a2.b(d3) : a2.call(null, d3);
              }
              var q = null, s = (function () {
                function d3(a3, b3, c3, e) {
                  var f = null;
                  if (3 < arguments.length) {
                    for (var f = 0, g = Array(arguments.length - 3); f < g.length; ) (g[f] = arguments[f + 3], ++f);
                    f = new F(g, 0);
                  }
                  return h.call(this, a3, b3, c3, f);
                }
                function h(d4, l2, m2, p2) {
                  d4 = T.r(c2, d4, l2, m2, p2);
                  d4 = b2.b ? b2.b(d4) : b2.call(null, d4);
                  return a2.b ? a2.b(d4) : a2.call(null, d4);
                }
                d3.i = 3;
                d3.f = function (a3) {
                  var b3 = G(a3);
                  a3 = K(a3);
                  var c3 = G(a3);
                  a3 = K(a3);
                  var d4 = G(a3);
                  a3 = H(a3);
                  return h(b3, c3, d4, a3);
                };
                d3.d = h;
                return d3;
              })(), q = function (a3, b3, c3, e) {
                switch (arguments.length) {
                  case 0:
                    return p.call(this);
                  case 1:
                    return m.call(this, a3);
                  case 2:
                    return l.call(this, a3, b3);
                  case 3:
                    return d2.call(this, a3, b3, c3);
                  default:
                    var f = null;
                    if (3 < arguments.length) {
                      for (var f = 0, g = Array(arguments.length - 3); f < g.length; ) (g[f] = arguments[f + 3], ++f);
                      f = new F(g, 0);
                    }
                    return s.d(a3, b3, c3, f);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              q.i = 3;
              q.f = s.f;
              q.l = p;
              q.b = m;
              q.a = l;
              q.c = d2;
              q.d = s.d;
              return q;
            })();
          }
          function b(a2, b2) {
            return (function () {
              function c2(d3, g, h) {
                d3 = b2.c ? b2.c(d3, g, h) : b2.call(null, d3, g, h);
                return a2.b ? a2.b(d3) : a2.call(null, d3);
              }
              function d2(c3, g) {
                var h = b2.a ? b2.a(c3, g) : b2.call(null, c3, g);
                return a2.b ? a2.b(h) : a2.call(null, h);
              }
              function l(c3) {
                c3 = b2.b ? b2.b(c3) : b2.call(null, c3);
                return a2.b ? a2.b(c3) : a2.call(null, c3);
              }
              function m() {
                var c3 = b2.l ? b2.l() : b2.call(null);
                return a2.b ? a2.b(c3) : a2.call(null, c3);
              }
              var p = null, q = (function () {
                function c3(a3, b3, e, f) {
                  var g = null;
                  if (3 < arguments.length) {
                    for (var g = 0, h = Array(arguments.length - 3); g < h.length; ) (h[g] = arguments[g + 3], ++g);
                    g = new F(h, 0);
                  }
                  return d3.call(this, a3, b3, e, g);
                }
                function d3(c4, g, h, l2) {
                  c4 = T.r(b2, c4, g, h, l2);
                  return a2.b ? a2.b(c4) : a2.call(null, c4);
                }
                c3.i = 3;
                c3.f = function (a3) {
                  var b3 = G(a3);
                  a3 = K(a3);
                  var c4 = G(a3);
                  a3 = K(a3);
                  var e = G(a3);
                  a3 = H(a3);
                  return d3(b3, c4, e, a3);
                };
                c3.d = d3;
                return c3;
              })(), p = function (a3, b3, e, f) {
                switch (arguments.length) {
                  case 0:
                    return m.call(this);
                  case 1:
                    return l.call(this, a3);
                  case 2:
                    return d2.call(this, a3, b3);
                  case 3:
                    return c2.call(this, a3, b3, e);
                  default:
                    var p2 = null;
                    if (3 < arguments.length) {
                      for (var p2 = 0, E = Array(arguments.length - 3); p2 < E.length; ) (E[p2] = arguments[p2 + 3], ++p2);
                      p2 = new F(E, 0);
                    }
                    return q.d(a3, b3, e, p2);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              p.i = 3;
              p.f = q.f;
              p.l = m;
              p.b = l;
              p.a = d2;
              p.c = c2;
              p.d = q.d;
              return p;
            })();
          }
          var c = null, d = (function () {
            function a2(c2, d2, e, m) {
              var p = null;
              if (3 < arguments.length) {
                for (var p = 0, q = Array(arguments.length - 3); p < q.length; ) (q[p] = arguments[p + 3], ++p);
                p = new F(q, 0);
              }
              return b2.call(this, c2, d2, e, p);
            }
            function b2(a3, c2, d2, e) {
              return (function (a4) {
                return (function () {
                  function b3(a5) {
                    var d3 = null;
                    if (0 < arguments.length) {
                      for (var d3 = 0, e2 = Array(arguments.length - 0); d3 < e2.length; ) (e2[d3] = arguments[d3 + 0], ++d3);
                      d3 = new F(e2, 0);
                    }
                    return c3.call(this, d3);
                  }
                  function c3(b4) {
                    b4 = T.a(G(a4), b4);
                    for (var d3 = K(a4); ; ) if (d3) (b4 = G(d3).call(null, b4), d3 = K(d3)); else return b4;
                  }
                  b3.i = 0;
                  b3.f = function (a5) {
                    a5 = D(a5);
                    return c3(a5);
                  };
                  b3.d = c3;
                  return b3;
                })();
              })(Jd(be.n(a3, c2, d2, e)));
            }
            a2.i = 3;
            a2.f = function (a3) {
              var c2 = G(a3);
              a3 = K(a3);
              var d2 = G(a3);
              a3 = K(a3);
              var e = G(a3);
              a3 = H(a3);
              return b2(c2, d2, e, a3);
            };
            a2.d = b2;
            return a2;
          })(), c = function (c2, f, g, h) {
            switch (arguments.length) {
              case 0:
                return ud;
              case 1:
                return c2;
              case 2:
                return b.call(this, c2, f);
              case 3:
                return a.call(this, c2, f, g);
              default:
                var l = null;
                if (3 < arguments.length) {
                  for (var l = 0, m = Array(arguments.length - 3); l < m.length; ) (m[l] = arguments[l + 3], ++l);
                  l = new F(m, 0);
                }
                return d.d(c2, f, g, l);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.i = 3;
          c.f = d.f;
          c.l = function () {
            return ud;
          };
          c.b = function (a2) {
            return a2;
          };
          c.a = b;
          c.c = a;
          c.d = d.d;
          return c;
        })(), Je = (function () {
          function a(a2, b2, c2, d2) {
            return (function () {
              function e2(m, p2, q2) {
                return a2.P ? a2.P(b2, c2, d2, m, p2, q2) : a2.call(null, b2, c2, d2, m, p2, q2);
              }
              function p(e3, m) {
                return a2.r ? a2.r(b2, c2, d2, e3, m) : a2.call(null, b2, c2, d2, e3, m);
              }
              function q(e3) {
                return a2.n ? a2.n(b2, c2, d2, e3) : a2.call(null, b2, c2, d2, e3);
              }
              function s() {
                return a2.c ? a2.c(b2, c2, d2) : a2.call(null, b2, c2, d2);
              }
              var u = null, v = (function () {
                function e3(a3, b3, c3, d3) {
                  var f = null;
                  if (3 < arguments.length) {
                    for (var f = 0, g = Array(arguments.length - 3); f < g.length; ) (g[f] = arguments[f + 3], ++f);
                    f = new F(g, 0);
                  }
                  return m.call(this, a3, b3, c3, f);
                }
                function m(e4, p2, q2, s2) {
                  return T.d(a2, b2, c2, d2, e4, Kc([p2, q2, s2], 0));
                }
                e3.i = 3;
                e3.f = function (a3) {
                  var b3 = G(a3);
                  a3 = K(a3);
                  var c3 = G(a3);
                  a3 = K(a3);
                  var d3 = G(a3);
                  a3 = H(a3);
                  return m(b3, c3, d3, a3);
                };
                e3.d = m;
                return e3;
              })(), u = function (a3, b3, c3, d3) {
                switch (arguments.length) {
                  case 0:
                    return s.call(this);
                  case 1:
                    return q.call(this, a3);
                  case 2:
                    return p.call(this, a3, b3);
                  case 3:
                    return e2.call(this, a3, b3, c3);
                  default:
                    var f = null;
                    if (3 < arguments.length) {
                      for (var f = 0, g = Array(arguments.length - 3); f < g.length; ) (g[f] = arguments[f + 3], ++f);
                      f = new F(g, 0);
                    }
                    return v.d(a3, b3, c3, f);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              u.i = 3;
              u.f = v.f;
              u.l = s;
              u.b = q;
              u.a = p;
              u.c = e2;
              u.d = v.d;
              return u;
            })();
          }
          function b(a2, b2, c2) {
            return (function () {
              function d2(e3, l, m) {
                return a2.r ? a2.r(b2, c2, e3, l, m) : a2.call(null, b2, c2, e3, l, m);
              }
              function e2(d3, l) {
                return a2.n ? a2.n(b2, c2, d3, l) : a2.call(null, b2, c2, d3, l);
              }
              function p(d3) {
                return a2.c ? a2.c(b2, c2, d3) : a2.call(null, b2, c2, d3);
              }
              function q() {
                return a2.a ? a2.a(b2, c2) : a2.call(null, b2, c2);
              }
              var s = null, u = (function () {
                function d3(a3, b3, c3, f) {
                  var g = null;
                  if (3 < arguments.length) {
                    for (var g = 0, h = Array(arguments.length - 3); g < h.length; ) (h[g] = arguments[g + 3], ++g);
                    g = new F(h, 0);
                  }
                  return e3.call(this, a3, b3, c3, g);
                }
                function e3(d4, l, m, p2) {
                  return T.d(a2, b2, c2, d4, l, Kc([m, p2], 0));
                }
                d3.i = 3;
                d3.f = function (a3) {
                  var b3 = G(a3);
                  a3 = K(a3);
                  var c3 = G(a3);
                  a3 = K(a3);
                  var d4 = G(a3);
                  a3 = H(a3);
                  return e3(b3, c3, d4, a3);
                };
                d3.d = e3;
                return d3;
              })(), s = function (a3, b3, c3, f) {
                switch (arguments.length) {
                  case 0:
                    return q.call(this);
                  case 1:
                    return p.call(this, a3);
                  case 2:
                    return e2.call(this, a3, b3);
                  case 3:
                    return d2.call(this, a3, b3, c3);
                  default:
                    var g = null;
                    if (3 < arguments.length) {
                      for (var g = 0, h = Array(arguments.length - 3); g < h.length; ) (h[g] = arguments[g + 3], ++g);
                      g = new F(h, 0);
                    }
                    return u.d(a3, b3, c3, g);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              s.i = 3;
              s.f = u.f;
              s.l = q;
              s.b = p;
              s.a = e2;
              s.c = d2;
              s.d = u.d;
              return s;
            })();
          }
          function c(a2, b2) {
            return (function () {
              function c2(d3, e3, h) {
                return a2.n ? a2.n(b2, d3, e3, h) : a2.call(null, b2, d3, e3, h);
              }
              function d2(c3, e3) {
                return a2.c ? a2.c(b2, c3, e3) : a2.call(null, b2, c3, e3);
              }
              function e2(c3) {
                return a2.a ? a2.a(b2, c3) : a2.call(null, b2, c3);
              }
              function p() {
                return a2.b ? a2.b(b2) : a2.call(null, b2);
              }
              var q = null, s = (function () {
                function c3(a3, b3, e3, f) {
                  var g = null;
                  if (3 < arguments.length) {
                    for (var g = 0, h = Array(arguments.length - 3); g < h.length; ) (h[g] = arguments[g + 3], ++g);
                    g = new F(h, 0);
                  }
                  return d3.call(this, a3, b3, e3, g);
                }
                function d3(c4, e3, h, l) {
                  return T.d(a2, b2, c4, e3, h, Kc([l], 0));
                }
                c3.i = 3;
                c3.f = function (a3) {
                  var b3 = G(a3);
                  a3 = K(a3);
                  var c4 = G(a3);
                  a3 = K(a3);
                  var e3 = G(a3);
                  a3 = H(a3);
                  return d3(b3, c4, e3, a3);
                };
                c3.d = d3;
                return c3;
              })(), q = function (a3, b3, f, g) {
                switch (arguments.length) {
                  case 0:
                    return p.call(this);
                  case 1:
                    return e2.call(this, a3);
                  case 2:
                    return d2.call(this, a3, b3);
                  case 3:
                    return c2.call(this, a3, b3, f);
                  default:
                    var q2 = null;
                    if (3 < arguments.length) {
                      for (var q2 = 0, N = Array(arguments.length - 3); q2 < N.length; ) (N[q2] = arguments[q2 + 3], ++q2);
                      q2 = new F(N, 0);
                    }
                    return s.d(a3, b3, f, q2);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              q.i = 3;
              q.f = s.f;
              q.l = p;
              q.b = e2;
              q.a = d2;
              q.c = c2;
              q.d = s.d;
              return q;
            })();
          }
          var d = null, e = (function () {
            function a2(c2, d2, e2, f, q) {
              var s = null;
              if (4 < arguments.length) {
                for (var s = 0, u = Array(arguments.length - 4); s < u.length; ) (u[s] = arguments[s + 4], ++s);
                s = new F(u, 0);
              }
              return b2.call(this, c2, d2, e2, f, s);
            }
            function b2(a3, c2, d2, e2, f) {
              return (function () {
                function b3(a4) {
                  var c3 = null;
                  if (0 < arguments.length) {
                    for (var c3 = 0, d3 = Array(arguments.length - 0); c3 < d3.length; ) (d3[c3] = arguments[c3 + 0], ++c3);
                    c3 = new F(d3, 0);
                  }
                  return g.call(this, c3);
                }
                function g(b4) {
                  return T.r(a3, c2, d2, e2, ae.a(f, b4));
                }
                b3.i = 0;
                b3.f = function (a4) {
                  a4 = D(a4);
                  return g(a4);
                };
                b3.d = g;
                return b3;
              })();
            }
            a2.i = 4;
            a2.f = function (a3) {
              var c2 = G(a3);
              a3 = K(a3);
              var d2 = G(a3);
              a3 = K(a3);
              var e2 = G(a3);
              a3 = K(a3);
              var f = G(a3);
              a3 = H(a3);
              return b2(c2, d2, e2, f, a3);
            };
            a2.d = b2;
            return a2;
          })(), d = function (d2, g, h, l, m) {
            switch (arguments.length) {
              case 1:
                return d2;
              case 2:
                return c.call(this, d2, g);
              case 3:
                return b.call(this, d2, g, h);
              case 4:
                return a.call(this, d2, g, h, l);
              default:
                var p = null;
                if (4 < arguments.length) {
                  for (var p = 0, q = Array(arguments.length - 4); p < q.length; ) (q[p] = arguments[p + 4], ++p);
                  p = new F(q, 0);
                }
                return e.d(d2, g, h, l, p);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          d.i = 4;
          d.f = e.f;
          d.b = function (a2) {
            return a2;
          };
          d.a = c;
          d.c = b;
          d.n = a;
          d.d = e.d;
          return d;
        })(), Ke = (function () {
          function a(a2, b2, c2, d2) {
            return (function () {
              function l(l2, m2, p2) {
                l2 = l2 == null ? b2 : l2;
                m2 = m2 == null ? c2 : m2;
                p2 = p2 == null ? d2 : p2;
                return a2.c ? a2.c(l2, m2, p2) : a2.call(null, l2, m2, p2);
              }
              function m(d3, h) {
                var l2 = d3 == null ? b2 : d3, m2 = h == null ? c2 : h;
                return a2.a ? a2.a(l2, m2) : a2.call(null, l2, m2);
              }
              var p = null, q = (function () {
                function l2(a3, b3, c3, d3) {
                  var e = null;
                  if (3 < arguments.length) {
                    for (var e = 0, f = Array(arguments.length - 3); e < f.length; ) (f[e] = arguments[e + 3], ++e);
                    e = new F(f, 0);
                  }
                  return m2.call(this, a3, b3, c3, e);
                }
                function m2(l3, p2, q2, s) {
                  return T.r(a2, l3 == null ? b2 : l3, p2 == null ? c2 : p2, q2 == null ? d2 : q2, s);
                }
                l2.i = 3;
                l2.f = function (a3) {
                  var b3 = G(a3);
                  a3 = K(a3);
                  var c3 = G(a3);
                  a3 = K(a3);
                  var d3 = G(a3);
                  a3 = H(a3);
                  return m2(b3, c3, d3, a3);
                };
                l2.d = m2;
                return l2;
              })(), p = function (a3, b3, c3, d3) {
                switch (arguments.length) {
                  case 2:
                    return m.call(this, a3, b3);
                  case 3:
                    return l.call(this, a3, b3, c3);
                  default:
                    var e = null;
                    if (3 < arguments.length) {
                      for (var e = 0, f = Array(arguments.length - 3); e < f.length; ) (f[e] = arguments[e + 3], ++e);
                      e = new F(f, 0);
                    }
                    return q.d(a3, b3, c3, e);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              p.i = 3;
              p.f = q.f;
              p.a = m;
              p.c = l;
              p.d = q.d;
              return p;
            })();
          }
          function b(a2, b2, c2) {
            return (function () {
              function d2(h, l2, m2) {
                h = h == null ? b2 : h;
                l2 = l2 == null ? c2 : l2;
                return a2.c ? a2.c(h, l2, m2) : a2.call(null, h, l2, m2);
              }
              function l(d3, h) {
                var l2 = d3 == null ? b2 : d3, m2 = h == null ? c2 : h;
                return a2.a ? a2.a(l2, m2) : a2.call(null, l2, m2);
              }
              var m = null, p = (function () {
                function d3(a3, b3, c3, e) {
                  var f = null;
                  if (3 < arguments.length) {
                    for (var f = 0, g = Array(arguments.length - 3); f < g.length; ) (g[f] = arguments[f + 3], ++f);
                    f = new F(g, 0);
                  }
                  return h.call(this, a3, b3, c3, f);
                }
                function h(d4, l2, m2, p2) {
                  return T.r(a2, d4 == null ? b2 : d4, l2 == null ? c2 : l2, m2, p2);
                }
                d3.i = 3;
                d3.f = function (a3) {
                  var b3 = G(a3);
                  a3 = K(a3);
                  var c3 = G(a3);
                  a3 = K(a3);
                  var d4 = G(a3);
                  a3 = H(a3);
                  return h(b3, c3, d4, a3);
                };
                d3.d = h;
                return d3;
              })(), m = function (a3, b3, c3, e) {
                switch (arguments.length) {
                  case 2:
                    return l.call(this, a3, b3);
                  case 3:
                    return d2.call(this, a3, b3, c3);
                  default:
                    var f = null;
                    if (3 < arguments.length) {
                      for (var f = 0, g = Array(arguments.length - 3); f < g.length; ) (g[f] = arguments[f + 3], ++f);
                      f = new F(g, 0);
                    }
                    return p.d(a3, b3, c3, f);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              m.i = 3;
              m.f = p.f;
              m.a = l;
              m.c = d2;
              m.d = p.d;
              return m;
            })();
          }
          function c(a2, b2) {
            return (function () {
              function c2(d3, g, h) {
                d3 = d3 == null ? b2 : d3;
                return a2.c ? a2.c(d3, g, h) : a2.call(null, d3, g, h);
              }
              function d2(c3, g) {
                var h = c3 == null ? b2 : c3;
                return a2.a ? a2.a(h, g) : a2.call(null, h, g);
              }
              function l(c3) {
                c3 = c3 == null ? b2 : c3;
                return a2.b ? a2.b(c3) : a2.call(null, c3);
              }
              var m = null, p = (function () {
                function c3(a3, b3, e, f) {
                  var g = null;
                  if (3 < arguments.length) {
                    for (var g = 0, h = Array(arguments.length - 3); g < h.length; ) (h[g] = arguments[g + 3], ++g);
                    g = new F(h, 0);
                  }
                  return d3.call(this, a3, b3, e, g);
                }
                function d3(c4, g, h, l2) {
                  return T.r(a2, c4 == null ? b2 : c4, g, h, l2);
                }
                c3.i = 3;
                c3.f = function (a3) {
                  var b3 = G(a3);
                  a3 = K(a3);
                  var c4 = G(a3);
                  a3 = K(a3);
                  var e = G(a3);
                  a3 = H(a3);
                  return d3(b3, c4, e, a3);
                };
                c3.d = d3;
                return c3;
              })(), m = function (a3, b3, e, f) {
                switch (arguments.length) {
                  case 1:
                    return l.call(this, a3);
                  case 2:
                    return d2.call(this, a3, b3);
                  case 3:
                    return c2.call(this, a3, b3, e);
                  default:
                    var m2 = null;
                    if (3 < arguments.length) {
                      for (var m2 = 0, B = Array(arguments.length - 3); m2 < B.length; ) (B[m2] = arguments[m2 + 3], ++m2);
                      m2 = new F(B, 0);
                    }
                    return p.d(a3, b3, e, m2);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              m.i = 3;
              m.f = p.f;
              m.b = l;
              m.a = d2;
              m.c = c2;
              m.d = p.d;
              return m;
            })();
          }
          var d = null, d = function (d2, f, g, h) {
            switch (arguments.length) {
              case 2:
                return c.call(this, d2, f);
              case 3:
                return b.call(this, d2, f, g);
              case 4:
                return a.call(this, d2, f, g, h);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          d.a = c;
          d.c = b;
          d.n = a;
          return d;
        })(), Le = (function () {
          function a(a2, b2) {
            return new V(null, function () {
              var f = D(b2);
              if (f) {
                if (fd(f)) {
                  for (var g = Yb(f), h = Q(g), l = Td(h), m = 0; ; ) if (m < h) {
                    var p = (function () {
                      var b3 = C.a(g, m);
                      return a2.b ? a2.b(b3) : a2.call(null, b3);
                    })();
                    p != null && l.add(p);
                    m += 1;
                  } else break;
                  return Wd(l.ca(), c.a(a2, Zb(f)));
                }
                h = (function () {
                  var b3 = G(f);
                  return a2.b ? a2.b(b3) : a2.call(null, b3);
                })();
                return h == null ? c.a(a2, H(f)) : M(h, c.a(a2, H(f)));
              }
              return null;
            }, null, null);
          }
          function b(a2) {
            return function (b2) {
              return (function () {
                function c2(f, g2) {
                  var h2 = a2.b ? a2.b(g2) : a2.call(null, g2);
                  return h2 == null ? f : b2.a ? b2.a(f, h2) : b2.call(null, f, h2);
                }
                function g(a3) {
                  return b2.b ? b2.b(a3) : b2.call(null, a3);
                }
                function h() {
                  return b2.l ? b2.l() : b2.call(null);
                }
                var l = null, l = function (a3, b3) {
                  switch (arguments.length) {
                    case 0:
                      return h.call(this);
                    case 1:
                      return g.call(this, a3);
                    case 2:
                      return c2.call(this, a3, b3);
                  }
                  throw Error("Invalid arity: " + arguments.length);
                };
                l.l = h;
                l.b = g;
                l.a = c2;
                return l;
              })();
            };
          }
          var c = null, c = function (c2, e) {
            switch (arguments.length) {
              case 1:
                return b.call(this, c2);
              case 2:
                return a.call(this, c2, e);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.b = b;
          c.a = a;
          return c;
        })();
        function Me(a) {
          this.state = a;
          this.q = 0;
          this.j = 32768;
        }
        Me.prototype.Ra = function () {
          return this.state;
        };
        Me.prototype.bb = function (a, b) {
          return this.state = b;
        };
        var Ne = (function () {
          function a(a2, b2) {
            return (function g(b3, c2) {
              return new V(null, function () {
                var e = D(c2);
                if (e) {
                  if (fd(e)) {
                    for (var p = Yb(e), q = Q(p), s = Td(q), u = 0; ; ) if (u < q) {
                      var v = (function () {
                        var c3 = b3 + u, e2 = C.a(p, u);
                        return a2.a ? a2.a(c3, e2) : a2.call(null, c3, e2);
                      })();
                      v != null && s.add(v);
                      u += 1;
                    } else break;
                    return Wd(s.ca(), g(b3 + q, Zb(e)));
                  }
                  q = (function () {
                    var c3 = G(e);
                    return a2.a ? a2.a(b3, c3) : a2.call(null, b3, c3);
                  })();
                  return q == null ? g(b3 + 1, H(e)) : M(q, g(b3 + 1, H(e)));
                }
                return null;
              }, null, null);
            })(0, b2);
          }
          function b(a2) {
            return function (b2) {
              return (function (c2) {
                return (function () {
                  function g(g2, h2) {
                    var l2 = c2.bb(0, c2.Ra(null) + 1), l2 = a2.a ? a2.a(l2, h2) : a2.call(null, l2, h2);
                    return l2 == null ? g2 : b2.a ? b2.a(g2, l2) : b2.call(null, g2, l2);
                  }
                  function h(a3) {
                    return b2.b ? b2.b(a3) : b2.call(null, a3);
                  }
                  function l() {
                    return b2.l ? b2.l() : b2.call(null);
                  }
                  var m = null, m = function (a3, b3) {
                    switch (arguments.length) {
                      case 0:
                        return l.call(this);
                      case 1:
                        return h.call(this, a3);
                      case 2:
                        return g.call(this, a3, b3);
                    }
                    throw Error("Invalid arity: " + arguments.length);
                  };
                  m.l = l;
                  m.b = h;
                  m.a = g;
                  return m;
                })();
              })(new Me(-1));
            };
          }
          var c = null, c = function (c2, e) {
            switch (arguments.length) {
              case 1:
                return b.call(this, c2);
              case 2:
                return a.call(this, c2, e);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.b = b;
          c.a = a;
          return c;
        })(), Oe = (function () {
          function a(a2, b2, c2, d2) {
            return new V(null, function () {
              var f2 = D(b2), q = D(c2), s = D(d2);
              if (f2 && q && s) {
                var u = M, v;
                v = G(f2);
                var y = G(q), B = G(s);
                v = a2.c ? a2.c(v, y, B) : a2.call(null, v, y, B);
                f2 = u(v, e.n(a2, H(f2), H(q), H(s)));
              } else f2 = null;
              return f2;
            }, null, null);
          }
          function b(a2, b2, c2) {
            return new V(null, function () {
              var d2 = D(b2), f2 = D(c2);
              if (d2 && f2) {
                var q = M, s;
                s = G(d2);
                var u = G(f2);
                s = a2.a ? a2.a(s, u) : a2.call(null, s, u);
                d2 = q(s, e.c(a2, H(d2), H(f2)));
              } else d2 = null;
              return d2;
            }, null, null);
          }
          function c(a2, b2) {
            return new V(null, function () {
              var c2 = D(b2);
              if (c2) {
                if (fd(c2)) {
                  for (var d2 = Yb(c2), f2 = Q(d2), q = Td(f2), s = 0; ; ) if (s < f2) (Xd(q, (function () {
                    var b3 = C.a(d2, s);
                    return a2.b ? a2.b(b3) : a2.call(null, b3);
                  })()), s += 1); else break;
                  return Wd(q.ca(), e.a(a2, Zb(c2)));
                }
                return M((function () {
                  var b3 = G(c2);
                  return a2.b ? a2.b(b3) : a2.call(null, b3);
                })(), e.a(a2, H(c2)));
              }
              return null;
            }, null, null);
          }
          function d(a2) {
            return function (b2) {
              return (function () {
                function c2(d3, e3) {
                  var f3 = a2.b ? a2.b(e3) : a2.call(null, e3);
                  return b2.a ? b2.a(d3, f3) : b2.call(null, d3, f3);
                }
                function d2(a3) {
                  return b2.b ? b2.b(a3) : b2.call(null, a3);
                }
                function e2() {
                  return b2.l ? b2.l() : b2.call(null);
                }
                var f2 = null, s = (function () {
                  function c3(a3, b3, e3) {
                    var f3 = null;
                    if (2 < arguments.length) {
                      for (var f3 = 0, g = Array(arguments.length - 2); f3 < g.length; ) (g[f3] = arguments[f3 + 2], ++f3);
                      f3 = new F(g, 0);
                    }
                    return d3.call(this, a3, b3, f3);
                  }
                  function d3(c4, e3, f3) {
                    e3 = T.c(a2, e3, f3);
                    return b2.a ? b2.a(c4, e3) : b2.call(null, c4, e3);
                  }
                  c3.i = 2;
                  c3.f = function (a3) {
                    var b3 = G(a3);
                    a3 = K(a3);
                    var c4 = G(a3);
                    a3 = H(a3);
                    return d3(b3, c4, a3);
                  };
                  c3.d = d3;
                  return c3;
                })(), f2 = function (a3, b3, f3) {
                  switch (arguments.length) {
                    case 0:
                      return e2.call(this);
                    case 1:
                      return d2.call(this, a3);
                    case 2:
                      return c2.call(this, a3, b3);
                    default:
                      var g = null;
                      if (2 < arguments.length) {
                        for (var g = 0, h = Array(arguments.length - 2); g < h.length; ) (h[g] = arguments[g + 2], ++g);
                        g = new F(h, 0);
                      }
                      return s.d(a3, b3, g);
                  }
                  throw Error("Invalid arity: " + arguments.length);
                };
                f2.i = 2;
                f2.f = s.f;
                f2.l = e2;
                f2.b = d2;
                f2.a = c2;
                f2.d = s.d;
                return f2;
              })();
            };
          }
          var e = null, f = (function () {
            function a2(c2, d2, e2, f2, g) {
              var u = null;
              if (4 < arguments.length) {
                for (var u = 0, v = Array(arguments.length - 4); u < v.length; ) (v[u] = arguments[u + 4], ++u);
                u = new F(v, 0);
              }
              return b2.call(this, c2, d2, e2, f2, u);
            }
            function b2(a3, c2, d2, f2, g) {
              var h = function y(a4) {
                return new V(null, function () {
                  var b3 = e.a(D, a4);
                  return Ee(ud, b3) ? M(e.a(G, b3), y(e.a(H, b3))) : null;
                }, null, null);
              };
              return e.a((function () {
                return function (b3) {
                  return T.a(a3, b3);
                };
              })(h), h(Nc.d(g, f2, Kc([d2, c2], 0))));
            }
            a2.i = 4;
            a2.f = function (a3) {
              var c2 = G(a3);
              a3 = K(a3);
              var d2 = G(a3);
              a3 = K(a3);
              var e2 = G(a3);
              a3 = K(a3);
              var f2 = G(a3);
              a3 = H(a3);
              return b2(c2, d2, e2, f2, a3);
            };
            a2.d = b2;
            return a2;
          })(), e = function (e2, h, l, m, p) {
            switch (arguments.length) {
              case 1:
                return d.call(this, e2);
              case 2:
                return c.call(this, e2, h);
              case 3:
                return b.call(this, e2, h, l);
              case 4:
                return a.call(this, e2, h, l, m);
              default:
                var q = null;
                if (4 < arguments.length) {
                  for (var q = 0, s = Array(arguments.length - 4); q < s.length; ) (s[q] = arguments[q + 4], ++q);
                  q = new F(s, 0);
                }
                return f.d(e2, h, l, m, q);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          e.i = 4;
          e.f = f.f;
          e.b = d;
          e.a = c;
          e.c = b;
          e.n = a;
          e.d = f.d;
          return e;
        })(), Pe = (function () {
          function a(a2, b2) {
            return new V(null, function () {
              if (0 < a2) {
                var f = D(b2);
                return f ? M(G(f), c.a(a2 - 1, H(f))) : null;
              }
              return null;
            }, null, null);
          }
          function b(a2) {
            return function (b2) {
              return (function (a3) {
                return (function () {
                  function c2(d2, g) {
                    var h = qb(a3), l2 = a3.bb(0, a3.Ra(null) - 1), h = 0 < h ? b2.a ? b2.a(d2, g) : b2.call(null, d2, g) : d2;
                    return 0 < l2 ? h : Ac(h) ? h : new yc(h);
                  }
                  function d(a4) {
                    return b2.b ? b2.b(a4) : b2.call(null, a4);
                  }
                  function l() {
                    return b2.l ? b2.l() : b2.call(null);
                  }
                  var m = null, m = function (a4, b3) {
                    switch (arguments.length) {
                      case 0:
                        return l.call(this);
                      case 1:
                        return d.call(this, a4);
                      case 2:
                        return c2.call(this, a4, b3);
                    }
                    throw Error("Invalid arity: " + arguments.length);
                  };
                  m.l = l;
                  m.b = d;
                  m.a = c2;
                  return m;
                })();
              })(new Me(a2));
            };
          }
          var c = null, c = function (c2, e) {
            switch (arguments.length) {
              case 1:
                return b.call(this, c2);
              case 2:
                return a.call(this, c2, e);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.b = b;
          c.a = a;
          return c;
        })(), Qe = (function () {
          function a(a2, b2) {
            return new V(null, (function (c2) {
              return function () {
                return c2(a2, b2);
              };
            })(function (a3, b3) {
              for (; ; ) {
                var c2 = D(b3);
                if (0 < a3 && c2) {
                  var d = a3 - 1, c2 = H(c2);
                  a3 = d;
                  b3 = c2;
                } else return c2;
              }
            }), null, null);
          }
          function b(a2) {
            return function (b2) {
              return (function (a3) {
                return (function () {
                  function c2(d2, g) {
                    var h = qb(a3);
                    a3.bb(0, a3.Ra(null) - 1);
                    return 0 < h ? d2 : b2.a ? b2.a(d2, g) : b2.call(null, d2, g);
                  }
                  function d(a4) {
                    return b2.b ? b2.b(a4) : b2.call(null, a4);
                  }
                  function l() {
                    return b2.l ? b2.l() : b2.call(null);
                  }
                  var m = null, m = function (a4, b3) {
                    switch (arguments.length) {
                      case 0:
                        return l.call(this);
                      case 1:
                        return d.call(this, a4);
                      case 2:
                        return c2.call(this, a4, b3);
                    }
                    throw Error("Invalid arity: " + arguments.length);
                  };
                  m.l = l;
                  m.b = d;
                  m.a = c2;
                  return m;
                })();
              })(new Me(a2));
            };
          }
          var c = null, c = function (c2, e) {
            switch (arguments.length) {
              case 1:
                return b.call(this, c2);
              case 2:
                return a.call(this, c2, e);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.b = b;
          c.a = a;
          return c;
        })(), Re = (function () {
          function a(a2, b2) {
            return new V(null, (function (c2) {
              return function () {
                return c2(a2, b2);
              };
            })(function (a3, b3) {
              for (; ; ) {
                var c2 = D(b3), d;
                if (d = c2) (d = G(c2), d = a3.b ? a3.b(d) : a3.call(null, d));
                if (t(d)) (d = a3, c2 = H(c2), a3 = d, b3 = c2); else return c2;
              }
            }), null, null);
          }
          function b(a2) {
            return function (b2) {
              return (function (c2) {
                return (function () {
                  function g(g2, h2) {
                    var l2 = qb(c2);
                    if (t(t(l2) ? a2.b ? a2.b(h2) : a2.call(null, h2) : l2)) return g2;
                    ac(c2, null);
                    return b2.a ? b2.a(g2, h2) : b2.call(null, g2, h2);
                  }
                  function h(a3) {
                    return b2.b ? b2.b(a3) : b2.call(null, a3);
                  }
                  function l() {
                    return b2.l ? b2.l() : b2.call(null);
                  }
                  var m = null, m = function (a3, b3) {
                    switch (arguments.length) {
                      case 0:
                        return l.call(this);
                      case 1:
                        return h.call(this, a3);
                      case 2:
                        return g.call(this, a3, b3);
                    }
                    throw Error("Invalid arity: " + arguments.length);
                  };
                  m.l = l;
                  m.b = h;
                  m.a = g;
                  return m;
                })();
              })(new Me(true));
            };
          }
          var c = null, c = function (c2, e) {
            switch (arguments.length) {
              case 1:
                return b.call(this, c2);
              case 2:
                return a.call(this, c2, e);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.b = b;
          c.a = a;
          return c;
        })(), Se = (function () {
          function a(a2, b2) {
            return Pe.a(a2, c.b(b2));
          }
          function b(a2) {
            return new V(null, function () {
              return M(a2, c.b(a2));
            }, null, null);
          }
          var c = null, c = function (c2, e) {
            switch (arguments.length) {
              case 1:
                return b.call(this, c2);
              case 2:
                return a.call(this, c2, e);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.b = b;
          c.a = a;
          return c;
        })(), Te = (function () {
          function a(a2, b2) {
            return Pe.a(a2, c.b(b2));
          }
          function b(a2) {
            return new V(null, function () {
              return M(a2.l ? a2.l() : a2.call(null), c.b(a2));
            }, null, null);
          }
          var c = null, c = function (c2, e) {
            switch (arguments.length) {
              case 1:
                return b.call(this, c2);
              case 2:
                return a.call(this, c2, e);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.b = b;
          c.a = a;
          return c;
        })(), Ue = (function () {
          function a(a2, c2) {
            return new V(null, function () {
              var f = D(a2), g = D(c2);
              return f && g ? M(G(f), M(G(g), b.a(H(f), H(g)))) : null;
            }, null, null);
          }
          var b = null, c = (function () {
            function a2(b2, d, h) {
              var l = null;
              if (2 < arguments.length) {
                for (var l = 0, m = Array(arguments.length - 2); l < m.length; ) (m[l] = arguments[l + 2], ++l);
                l = new F(m, 0);
              }
              return c2.call(this, b2, d, l);
            }
            function c2(a3, d, e) {
              return new V(null, function () {
                var c3 = Oe.a(D, Nc.d(e, d, Kc([a3], 0)));
                return Ee(ud, c3) ? ae.a(Oe.a(G, c3), T.a(b, Oe.a(H, c3))) : null;
              }, null, null);
            }
            a2.i = 2;
            a2.f = function (a3) {
              var b2 = G(a3);
              a3 = K(a3);
              var d = G(a3);
              a3 = H(a3);
              return c2(b2, d, a3);
            };
            a2.d = c2;
            return a2;
          })(), b = function (b2, e, f) {
            switch (arguments.length) {
              case 2:
                return a.call(this, b2, e);
              default:
                var g = null;
                if (2 < arguments.length) {
                  for (var g = 0, h = Array(arguments.length - 2); g < h.length; ) (h[g] = arguments[g + 2], ++g);
                  g = new F(h, 0);
                }
                return c.d(b2, e, g);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          b.i = 2;
          b.f = c.f;
          b.a = a;
          b.d = c.d;
          return b;
        })(), We = (function () {
          function a(a2) {
            return Ie.a(Oe.b(a2), Ve);
          }
          var b = null, c = (function () {
            function a2(c2, d) {
              var h = null;
              if (1 < arguments.length) {
                for (var h = 0, l = Array(arguments.length - 1); h < l.length; ) (l[h] = arguments[h + 1], ++h);
                h = new F(l, 0);
              }
              return b2.call(this, c2, h);
            }
            function b2(a3, c2) {
              return T.a(ae, T.c(Oe, a3, c2));
            }
            a2.i = 1;
            a2.f = function (a3) {
              var c2 = G(a3);
              a3 = H(a3);
              return b2(c2, a3);
            };
            a2.d = b2;
            return a2;
          })(), b = function (b2, e) {
            switch (arguments.length) {
              case 1:
                return a.call(this, b2);
              default:
                var f = null;
                if (1 < arguments.length) {
                  for (var f = 0, g = Array(arguments.length - 1); f < g.length; ) (g[f] = arguments[f + 1], ++f);
                  f = new F(g, 0);
                }
                return c.d(b2, f);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          b.i = 1;
          b.f = c.f;
          b.b = a;
          b.d = c.d;
          return b;
        })(), Xe = (function () {
          function a(a2, b2) {
            return new V(null, function () {
              var f = D(b2);
              if (f) {
                if (fd(f)) {
                  for (var g = Yb(f), h = Q(g), l = Td(h), m = 0; ; ) if (m < h) {
                    var p;
                    p = C.a(g, m);
                    p = a2.b ? a2.b(p) : a2.call(null, p);
                    t(p) && (p = C.a(g, m), l.add(p));
                    m += 1;
                  } else break;
                  return Wd(l.ca(), c.a(a2, Zb(f)));
                }
                g = G(f);
                f = H(f);
                return t(a2.b ? a2.b(g) : a2.call(null, g)) ? M(g, c.a(a2, f)) : c.a(a2, f);
              }
              return null;
            }, null, null);
          }
          function b(a2) {
            return function (b2) {
              return (function () {
                function c2(f, g2) {
                  return t(a2.b ? a2.b(g2) : a2.call(null, g2)) ? b2.a ? b2.a(f, g2) : b2.call(null, f, g2) : f;
                }
                function g(a3) {
                  return b2.b ? b2.b(a3) : b2.call(null, a3);
                }
                function h() {
                  return b2.l ? b2.l() : b2.call(null);
                }
                var l = null, l = function (a3, b3) {
                  switch (arguments.length) {
                    case 0:
                      return h.call(this);
                    case 1:
                      return g.call(this, a3);
                    case 2:
                      return c2.call(this, a3, b3);
                  }
                  throw Error("Invalid arity: " + arguments.length);
                };
                l.l = h;
                l.b = g;
                l.a = c2;
                return l;
              })();
            };
          }
          var c = null, c = function (c2, e) {
            switch (arguments.length) {
              case 1:
                return b.call(this, c2);
              case 2:
                return a.call(this, c2, e);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.b = b;
          c.a = a;
          return c;
        })(), Ye = (function () {
          function a(a2, b2) {
            return Xe.a(He(a2), b2);
          }
          function b(a2) {
            return Xe.b(He(a2));
          }
          var c = null, c = function (c2, e) {
            switch (arguments.length) {
              case 1:
                return b.call(this, c2);
              case 2:
                return a.call(this, c2, e);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.b = b;
          c.a = a;
          return c;
        })();
        function Ze(a) {
          var b = $e;
          return (function d(a2) {
            return new V(null, function () {
              return M(a2, t(b.b ? b.b(a2) : b.call(null, a2)) ? We.d(d, Kc([D.b ? D.b(a2) : D.call(null, a2)], 0)) : null);
            }, null, null);
          })(a);
        }
        var af = (function () {
          function a(a2, b2, c2) {
            return a2 && (a2.q & 4 || a2.dc) ? O(ce(wd.n(b2, de, Ob(a2), c2)), Vc(a2)) : wd.n(b2, Nc, a2, c2);
          }
          function b(a2, b2) {
            return a2 != null ? a2 && (a2.q & 4 || a2.dc) ? O(ce(A.c(Pb, Ob(a2), b2)), Vc(a2)) : A.c(Ra, a2, b2) : A.c(Nc, J, b2);
          }
          var c = null, c = function (c2, e, f) {
            switch (arguments.length) {
              case 2:
                return b.call(this, c2, e);
              case 3:
                return a.call(this, c2, e, f);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.a = b;
          c.c = a;
          return c;
        })(), bf = (function () {
          function a(a2, b2, c2, h) {
            return new V(null, function () {
              var l = D(h);
              if (l) {
                var m = Pe.a(a2, l);
                return a2 === Q(m) ? M(m, d.n(a2, b2, c2, Qe.a(b2, l))) : Ra(J, Pe.a(a2, ae.a(m, c2)));
              }
              return null;
            }, null, null);
          }
          function b(a2, b2, c2) {
            return new V(null, function () {
              var h = D(c2);
              if (h) {
                var l = Pe.a(a2, h);
                return a2 === Q(l) ? M(l, d.c(a2, b2, Qe.a(b2, h))) : null;
              }
              return null;
            }, null, null);
          }
          function c(a2, b2) {
            return d.c(a2, a2, b2);
          }
          var d = null, d = function (d2, f, g, h) {
            switch (arguments.length) {
              case 2:
                return c.call(this, d2, f);
              case 3:
                return b.call(this, d2, f, g);
              case 4:
                return a.call(this, d2, f, g, h);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          d.a = c;
          d.c = b;
          d.n = a;
          return d;
        })(), cf = (function () {
          function a(a2, b2, c2) {
            var g = jd;
            for (b2 = D(b2); ; ) if (b2) {
              var h = a2;
              if (h ? h.j & 256 || h.Rb || (h.j ? 0 : w(Za, h)) : w(Za, h)) {
                a2 = S.c(a2, G(b2), g);
                if (g === a2) return c2;
                b2 = K(b2);
              } else return c2;
            } else return a2;
          }
          function b(a2, b2) {
            return c.c(a2, b2, null);
          }
          var c = null, c = function (c2, e, f) {
            switch (arguments.length) {
              case 2:
                return b.call(this, c2, e);
              case 3:
                return a.call(this, c2, e, f);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.a = b;
          c.c = a;
          return c;
        })(), df = (function () {
          function a(a2, b2, c2, d2, f2, q) {
            var s = R.c(b2, 0, null);
            return (b2 = Ed(b2)) ? Rc.c(a2, s, e.P(S.a(a2, s), b2, c2, d2, f2, q)) : Rc.c(a2, s, (function () {
              var b3 = S.a(a2, s);
              return c2.n ? c2.n(b3, d2, f2, q) : c2.call(null, b3, d2, f2, q);
            })());
          }
          function b(a2, b2, c2, d2, f2) {
            var q = R.c(b2, 0, null);
            return (b2 = Ed(b2)) ? Rc.c(a2, q, e.r(S.a(a2, q), b2, c2, d2, f2)) : Rc.c(a2, q, (function () {
              var b3 = S.a(a2, q);
              return c2.c ? c2.c(b3, d2, f2) : c2.call(null, b3, d2, f2);
            })());
          }
          function c(a2, b2, c2, d2) {
            var f2 = R.c(b2, 0, null);
            return (b2 = Ed(b2)) ? Rc.c(a2, f2, e.n(S.a(a2, f2), b2, c2, d2)) : Rc.c(a2, f2, (function () {
              var b3 = S.a(a2, f2);
              return c2.a ? c2.a(b3, d2) : c2.call(null, b3, d2);
            })());
          }
          function d(a2, b2, c2) {
            var d2 = R.c(b2, 0, null);
            return (b2 = Ed(b2)) ? Rc.c(a2, d2, e.c(S.a(a2, d2), b2, c2)) : Rc.c(a2, d2, (function () {
              var b3 = S.a(a2, d2);
              return c2.b ? c2.b(b3) : c2.call(null, b3);
            })());
          }
          var e = null, f = (function () {
            function a2(c2, d2, e2, f2, g, u, v) {
              var y = null;
              if (6 < arguments.length) {
                for (var y = 0, B = Array(arguments.length - 6); y < B.length; ) (B[y] = arguments[y + 6], ++y);
                y = new F(B, 0);
              }
              return b2.call(this, c2, d2, e2, f2, g, u, y);
            }
            function b2(a3, c2, d2, f2, g, h, v) {
              var y = R.c(c2, 0, null);
              return (c2 = Ed(c2)) ? Rc.c(a3, y, T.d(e, S.a(a3, y), c2, d2, f2, Kc([g, h, v], 0))) : Rc.c(a3, y, T.d(d2, S.a(a3, y), f2, g, h, Kc([v], 0)));
            }
            a2.i = 6;
            a2.f = function (a3) {
              var c2 = G(a3);
              a3 = K(a3);
              var d2 = G(a3);
              a3 = K(a3);
              var e2 = G(a3);
              a3 = K(a3);
              var f2 = G(a3);
              a3 = K(a3);
              var g = G(a3);
              a3 = K(a3);
              var v = G(a3);
              a3 = H(a3);
              return b2(c2, d2, e2, f2, g, v, a3);
            };
            a2.d = b2;
            return a2;
          })(), e = function (e2, h, l, m, p, q, s) {
            switch (arguments.length) {
              case 3:
                return d.call(this, e2, h, l);
              case 4:
                return c.call(this, e2, h, l, m);
              case 5:
                return b.call(this, e2, h, l, m, p);
              case 6:
                return a.call(this, e2, h, l, m, p, q);
              default:
                var u = null;
                if (6 < arguments.length) {
                  for (var u = 0, v = Array(arguments.length - 6); u < v.length; ) (v[u] = arguments[u + 6], ++u);
                  u = new F(v, 0);
                }
                return f.d(e2, h, l, m, p, q, u);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          e.i = 6;
          e.f = f.f;
          e.c = d;
          e.n = c;
          e.r = b;
          e.P = a;
          e.d = f.d;
          return e;
        })();
        function ef(a, b) {
          this.u = a;
          this.e = b;
        }
        function ff(a) {
          return new ef(a, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
        }
        function gf(a) {
          return new ef(a.u, Fa(a.e));
        }
        function hf(a) {
          a = a.g;
          return 32 > a ? 0 : a - 1 >>> 5 << 5;
        }
        function jf(a, b, c) {
          for (; ; ) {
            if (b === 0) return c;
            var d = ff(a);
            d.e[0] = c;
            c = d;
            b -= 5;
          }
        }
        var lf = function kf(b, c, d, e) {
          var f = gf(d), g = b.g - 1 >>> c & 31;
          c === 5 ? f.e[g] = e : (d = d.e[g], b = d != null ? kf(b, c - 5, d, e) : jf(null, c - 5, e), f.e[g] = b);
          return f;
        };
        function mf(a, b) {
          throw Error([z("No item "), z(a), z(" in vector of length "), z(b)].join(""));
        }
        function nf(a, b) {
          if (b >= hf(a)) return a.W;
          for (var c = a.root, d = a.shift; ; ) if (0 < d) var e = d - 5, c = c.e[b >>> d & 31], d = e; else return c.e;
        }
        function of(a, b) {
          return 0 <= b && b < a.g ? nf(a, b) : mf(b, a.g);
        }
        var qf = function pf(b, c, d, e, f) {
          var g = gf(d);
          if (c === 0) g.e[e & 31] = f; else {
            var h = e >>> c & 31;
            b = pf(b, c - 5, d.e[h], e, f);
            g.e[h] = b;
          }
          return g;
        }, sf = function rf(b, c, d) {
          var e = b.g - 2 >>> c & 31;
          if (5 < c) {
            b = rf(b, c - 5, d.e[e]);
            if (b == null && e === 0) return null;
            d = gf(d);
            d.e[e] = b;
            return d;
          }
          if (e === 0) return null;
          d = gf(d);
          d.e[e] = null;
          return d;
        };
        function tf(a, b, c, d, e, f) {
          this.m = a;
          this.zb = b;
          this.e = c;
          this.oa = d;
          this.start = e;
          this.end = f;
        }
        tf.prototype.ga = function () {
          return this.m < this.end;
        };
        tf.prototype.next = function () {
          this.m - this.zb === 32 && (this.e = nf(this.oa, this.m), this.zb += 32);
          var a = this.e[this.m & 31];
          this.m += 1;
          return a;
        };
        function W(a, b, c, d, e, f) {
          this.k = a;
          this.g = b;
          this.shift = c;
          this.root = d;
          this.W = e;
          this.p = f;
          this.j = 167668511;
          this.q = 8196;
        }
        k = W.prototype;
        k.toString = function () {
          return ec(this);
        };
        k.t = function (a, b) {
          return $a.c(this, b, null);
        };
        k.s = function (a, b, c) {
          return typeof b === "number" ? C.c(this, b, c) : c;
        };
        k.gb = function (a, b, c) {
          a = 0;
          for (var d = c; ; ) if (a < this.g) {
            var e = nf(this, a);
            c = e.length;
            a: {
              for (var f = 0; ; ) if (f < c) {
                var g = f + a, h = e[f], d = b.c ? b.c(d, g, h) : b.call(null, d, g, h);
                if (Ac(d)) {
                  e = d;
                  break a;
                }
                f += 1;
              } else {
                e = d;
                break a;
              }
              e = void 0;
            }
            if (Ac(e)) return (b = e, L.b ? L.b(b) : L.call(null, b));
            a += c;
            d = e;
          } else return d;
        };
        k.Q = function (a, b) {
          return of(this, b)[b & 31];
        };
        k.$ = function (a, b, c) {
          return 0 <= b && b < this.g ? nf(this, b)[b & 31] : c;
        };
        k.Ua = function (a, b, c) {
          if (0 <= b && b < this.g) return hf(this) <= b ? (a = Fa(this.W), a[b & 31] = c, new W(this.k, this.g, this.shift, this.root, a, null)) : new W(this.k, this.g, this.shift, qf(this, this.shift, this.root, b, c), this.W, null);
          if (b === this.g) return Ra(this, c);
          throw Error([z("Index "), z(b), z(" out of bounds  [0,"), z(this.g), z("]")].join(""));
        };
        k.vb = true;
        k.fb = function () {
          var a = this.g;
          return new tf(0, 0, 0 < Q(this) ? nf(this, 0) : null, this, 0, a);
        };
        k.H = function () {
          return this.k;
        };
        k.L = function () {
          return this.g;
        };
        k.hb = function () {
          return C.a(this, 0);
        };
        k.ib = function () {
          return C.a(this, 1);
        };
        k.La = function () {
          return 0 < this.g ? C.a(this, this.g - 1) : null;
        };
        k.Ma = function () {
          if (this.g === 0) throw Error("Can't pop empty vector");
          if (this.g === 1) return ub(Mc, this.k);
          if (1 < this.g - hf(this)) return new W(this.k, this.g - 1, this.shift, this.root, this.W.slice(0, -1), null);
          var a = nf(this, this.g - 2), b = sf(this, this.shift, this.root), b = b == null ? uf : b, c = this.g - 1;
          return 5 < this.shift && b.e[1] == null ? new W(this.k, c, this.shift - 5, b.e[0], a, null) : new W(this.k, c, this.shift, b, a, null);
        };
        k.ab = function () {
          return 0 < this.g ? new Hc(this, this.g - 1, null) : null;
        };
        k.B = function () {
          var a = this.p;
          return a != null ? a : this.p = a = wc(this);
        };
        k.A = function (a, b) {
          if (b instanceof W) if (this.g === Q(b)) for (var c = cc(this), d = cc(b); ; ) if (t(c.ga())) {
            var e = c.next(), f = d.next();
            if (!sc.a(e, f)) return false;
          } else return true; else return false; else return Ic(this, b);
        };
        k.$a = function () {
          var a = this;
          return new vf(a.g, a.shift, (function () {
            var b = a.root;
            return wf.b ? wf.b(b) : wf.call(null, b);
          })(), (function () {
            var b = a.W;
            return xf.b ? xf.b(b) : xf.call(null, b);
          })());
        };
        k.J = function () {
          return O(Mc, this.k);
        };
        k.R = function (a, b) {
          return Cc.a(this, b);
        };
        k.O = function (a, b, c) {
          a = 0;
          for (var d = c; ; ) if (a < this.g) {
            var e = nf(this, a);
            c = e.length;
            a: {
              for (var f = 0; ; ) if (f < c) {
                var g = e[f], d = b.a ? b.a(d, g) : b.call(null, d, g);
                if (Ac(d)) {
                  e = d;
                  break a;
                }
                f += 1;
              } else {
                e = d;
                break a;
              }
              e = void 0;
            }
            if (Ac(e)) return (b = e, L.b ? L.b(b) : L.call(null, b));
            a += c;
            d = e;
          } else return d;
        };
        k.Ka = function (a, b, c) {
          if (typeof b === "number") return pb(this, b, c);
          throw Error("Vector's key for assoc must be a number.");
        };
        k.D = function () {
          if (this.g === 0) return null;
          if (32 >= this.g) return new F(this.W, 0);
          var a;
          a: {
            a = this.root;
            for (var b = this.shift; ; ) if (0 < b) (b -= 5, a = a.e[0]); else {
              a = a.e;
              break a;
            }
            a = void 0;
          }
          return yf.n ? yf.n(this, a, 0, 0) : yf.call(null, this, a, 0, 0);
        };
        k.F = function (a, b) {
          return new W(b, this.g, this.shift, this.root, this.W, this.p);
        };
        k.G = function (a, b) {
          if (32 > this.g - hf(this)) {
            for (var c = this.W.length, d = Array(c + 1), e = 0; ; ) if (e < c) (d[e] = this.W[e], e += 1); else break;
            d[c] = b;
            return new W(this.k, this.g + 1, this.shift, this.root, d, null);
          }
          c = (d = this.g >>> 5 > 1 << this.shift) ? this.shift + 5 : this.shift;
          d ? (d = ff(null), d.e[0] = this.root, e = jf(null, this.shift, new ef(null, this.W)), d.e[1] = e) : d = lf(this, this.shift, this.root, new ef(null, this.W));
          return new W(this.k, this.g + 1, c, d, [b], null);
        };
        k.call = (function () {
          var a = null, a = function (a2, c, d) {
            switch (arguments.length) {
              case 2:
                return this.Q(null, c);
              case 3:
                return this.$(null, c, d);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          a.a = function (a2, c) {
            return this.Q(null, c);
          };
          a.c = function (a2, c, d) {
            return this.$(null, c, d);
          };
          return a;
        })();
        k.apply = function (a, b) {
          return this.call.apply(this, [this].concat(Fa(b)));
        };
        k.b = function (a) {
          return this.Q(null, a);
        };
        k.a = function (a, b) {
          return this.$(null, a, b);
        };
        var uf = new ef(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]), Mc = new W(null, 0, 5, uf, [], 0);
        W.prototype[Ea] = function () {
          return uc(this);
        };
        function zf(a) {
          return Qb(A.c(Pb, Ob(Mc), a));
        }
        var Af = (function () {
          function a(a2) {
            var d = null;
            if (0 < arguments.length) {
              for (var d = 0, e = Array(arguments.length - 0); d < e.length; ) (e[d] = arguments[d + 0], ++d);
              d = new F(e, 0);
            }
            return b.call(this, d);
          }
          function b(a2) {
            if (a2 instanceof F && a2.m === 0) a: {
              a2 = a2.e;
              var b2 = a2.length;
              if (32 > b2) a2 = new W(null, b2, 5, uf, a2, null); else {
                for (var e = 32, f = new W(null, 32, 5, uf, a2.slice(0, 32), null).$a(null); ; ) if (e < b2) var g = e + 1, f = de.a(f, a2[e]), e = g; else {
                  a2 = Qb(f);
                  break a;
                }
                a2 = void 0;
              }
            } else a2 = zf(a2);
            return a2;
          }
          a.i = 0;
          a.f = function (a2) {
            a2 = D(a2);
            return b(a2);
          };
          a.d = b;
          return a;
        })();
        function Bf(a, b, c, d, e, f) {
          this.ha = a;
          this.Ja = b;
          this.m = c;
          this.V = d;
          this.k = e;
          this.p = f;
          this.j = 32375020;
          this.q = 1536;
        }
        k = Bf.prototype;
        k.toString = function () {
          return ec(this);
        };
        k.H = function () {
          return this.k;
        };
        k.T = function () {
          if (this.V + 1 < this.Ja.length) {
            var a;
            a = this.ha;
            var b = this.Ja, c = this.m, d = this.V + 1;
            a = yf.n ? yf.n(a, b, c, d) : yf.call(null, a, b, c, d);
            return a == null ? null : a;
          }
          return $b(this);
        };
        k.B = function () {
          var a = this.p;
          return a != null ? a : this.p = a = wc(this);
        };
        k.A = function (a, b) {
          return Ic(this, b);
        };
        k.J = function () {
          return O(Mc, this.k);
        };
        k.R = function (a, b) {
          var c = this;
          return Cc.a((function () {
            var a2 = c.ha, b2 = c.m + c.V, f = Q(c.ha);
            return Cf.c ? Cf.c(a2, b2, f) : Cf.call(null, a2, b2, f);
          })(), b);
        };
        k.O = function (a, b, c) {
          var d = this;
          return Cc.c((function () {
            var a2 = d.ha, b2 = d.m + d.V, c2 = Q(d.ha);
            return Cf.c ? Cf.c(a2, b2, c2) : Cf.call(null, a2, b2, c2);
          })(), b, c);
        };
        k.N = function () {
          return this.Ja[this.V];
        };
        k.S = function () {
          if (this.V + 1 < this.Ja.length) {
            var a;
            a = this.ha;
            var b = this.Ja, c = this.m, d = this.V + 1;
            a = yf.n ? yf.n(a, b, c, d) : yf.call(null, a, b, c, d);
            return a == null ? J : a;
          }
          return Zb(this);
        };
        k.D = function () {
          return this;
        };
        k.Cb = function () {
          return Ud.a(this.Ja, this.V);
        };
        k.Db = function () {
          var a = this.m + this.Ja.length;
          if (a < Ma(this.ha)) {
            var b = this.ha, c = nf(this.ha, a);
            return yf.n ? yf.n(b, c, a, 0) : yf.call(null, b, c, a, 0);
          }
          return J;
        };
        k.F = function (a, b) {
          var c = this.ha, d = this.Ja, e = this.m, f = this.V;
          return yf.r ? yf.r(c, d, e, f, b) : yf.call(null, c, d, e, f, b);
        };
        k.G = function (a, b) {
          return M(b, this);
        };
        k.Bb = function () {
          var a = this.m + this.Ja.length;
          if (a < Ma(this.ha)) {
            var b = this.ha, c = nf(this.ha, a);
            return yf.n ? yf.n(b, c, a, 0) : yf.call(null, b, c, a, 0);
          }
          return null;
        };
        Bf.prototype[Ea] = function () {
          return uc(this);
        };
        var yf = (function () {
          function a(a2, b2, c2, d2, l) {
            return new Bf(a2, b2, c2, d2, l, null);
          }
          function b(a2, b2, c2, d2) {
            return new Bf(a2, b2, c2, d2, null, null);
          }
          function c(a2, b2, c2) {
            return new Bf(a2, of(a2, b2), b2, c2, null, null);
          }
          var d = null, d = function (d2, f, g, h, l) {
            switch (arguments.length) {
              case 3:
                return c.call(this, d2, f, g);
              case 4:
                return b.call(this, d2, f, g, h);
              case 5:
                return a.call(this, d2, f, g, h, l);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          d.c = c;
          d.n = b;
          d.r = a;
          return d;
        })();
        function Df(a, b, c, d, e) {
          this.k = a;
          this.oa = b;
          this.start = c;
          this.end = d;
          this.p = e;
          this.j = 166617887;
          this.q = 8192;
        }
        k = Df.prototype;
        k.toString = function () {
          return ec(this);
        };
        k.t = function (a, b) {
          return $a.c(this, b, null);
        };
        k.s = function (a, b, c) {
          return typeof b === "number" ? C.c(this, b, c) : c;
        };
        k.Q = function (a, b) {
          return 0 > b || this.end <= this.start + b ? mf(b, this.end - this.start) : C.a(this.oa, this.start + b);
        };
        k.$ = function (a, b, c) {
          return 0 > b || this.end <= this.start + b ? c : C.c(this.oa, this.start + b, c);
        };
        k.Ua = function (a, b, c) {
          var d = this.start + b;
          a = this.k;
          c = Rc.c(this.oa, d, c);
          b = this.start;
          var e = this.end, d = d + 1, d = e > d ? e : d;
          return Ef.r ? Ef.r(a, c, b, d, null) : Ef.call(null, a, c, b, d, null);
        };
        k.H = function () {
          return this.k;
        };
        k.L = function () {
          return this.end - this.start;
        };
        k.La = function () {
          return C.a(this.oa, this.end - 1);
        };
        k.Ma = function () {
          if (this.start === this.end) throw Error("Can't pop empty vector");
          var a = this.k, b = this.oa, c = this.start, d = this.end - 1;
          return Ef.r ? Ef.r(a, b, c, d, null) : Ef.call(null, a, b, c, d, null);
        };
        k.ab = function () {
          return this.start !== this.end ? new Hc(this, this.end - this.start - 1, null) : null;
        };
        k.B = function () {
          var a = this.p;
          return a != null ? a : this.p = a = wc(this);
        };
        k.A = function (a, b) {
          return Ic(this, b);
        };
        k.J = function () {
          return O(Mc, this.k);
        };
        k.R = function (a, b) {
          return Cc.a(this, b);
        };
        k.O = function (a, b, c) {
          return Cc.c(this, b, c);
        };
        k.Ka = function (a, b, c) {
          if (typeof b === "number") return pb(this, b, c);
          throw Error("Subvec's key for assoc must be a number.");
        };
        k.D = function () {
          var a = this;
          return (function (b) {
            return function d(e) {
              return e === a.end ? null : M(C.a(a.oa, e), new V(null, (function () {
                return function () {
                  return d(e + 1);
                };
              })(b), null, null));
            };
          })(this)(a.start);
        };
        k.F = function (a, b) {
          var c = this.oa, d = this.start, e = this.end, f = this.p;
          return Ef.r ? Ef.r(b, c, d, e, f) : Ef.call(null, b, c, d, e, f);
        };
        k.G = function (a, b) {
          var c = this.k, d = pb(this.oa, this.end, b), e = this.start, f = this.end + 1;
          return Ef.r ? Ef.r(c, d, e, f, null) : Ef.call(null, c, d, e, f, null);
        };
        k.call = (function () {
          var a = null, a = function (a2, c, d) {
            switch (arguments.length) {
              case 2:
                return this.Q(null, c);
              case 3:
                return this.$(null, c, d);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          a.a = function (a2, c) {
            return this.Q(null, c);
          };
          a.c = function (a2, c, d) {
            return this.$(null, c, d);
          };
          return a;
        })();
        k.apply = function (a, b) {
          return this.call.apply(this, [this].concat(Fa(b)));
        };
        k.b = function (a) {
          return this.Q(null, a);
        };
        k.a = function (a, b) {
          return this.$(null, a, b);
        };
        Df.prototype[Ea] = function () {
          return uc(this);
        };
        function Ef(a, b, c, d, e) {
          for (; ; ) if (b instanceof Df) (c = b.start + c, d = b.start + d, b = b.oa); else {
            var f = Q(b);
            if (0 > c || 0 > d || c > f || d > f) throw Error("Index out of bounds");
            return new Df(a, b, c, d, e);
          }
        }
        var Cf = (function () {
          function a(a2, b2, c2) {
            return Ef(null, a2, b2, c2, null);
          }
          function b(a2, b2) {
            return c.c(a2, b2, Q(a2));
          }
          var c = null, c = function (c2, e, f) {
            switch (arguments.length) {
              case 2:
                return b.call(this, c2, e);
              case 3:
                return a.call(this, c2, e, f);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.a = b;
          c.c = a;
          return c;
        })();
        function Ff(a, b) {
          return a === b.u ? b : new ef(a, Fa(b.e));
        }
        function wf(a) {
          return new ef({}, Fa(a.e));
        }
        function xf(a) {
          var b = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
          hd(a, 0, b, 0, a.length);
          return b;
        }
        var Hf = function Gf(b, c, d, e) {
          d = Ff(b.root.u, d);
          var f = b.g - 1 >>> c & 31;
          if (c === 5) b = e; else {
            var g = d.e[f];
            b = g != null ? Gf(b, c - 5, g, e) : jf(b.root.u, c - 5, e);
          }
          d.e[f] = b;
          return d;
        }, Jf = function If(b, c, d) {
          d = Ff(b.root.u, d);
          var e = b.g - 2 >>> c & 31;
          if (5 < c) {
            b = If(b, c - 5, d.e[e]);
            if (b == null && e === 0) return null;
            d.e[e] = b;
            return d;
          }
          if (e === 0) return null;
          d.e[e] = null;
          return d;
        };
        function vf(a, b, c, d) {
          this.g = a;
          this.shift = b;
          this.root = c;
          this.W = d;
          this.j = 275;
          this.q = 88;
        }
        k = vf.prototype;
        k.call = (function () {
          var a = null, a = function (a2, c, d) {
            switch (arguments.length) {
              case 2:
                return this.t(null, c);
              case 3:
                return this.s(null, c, d);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          a.a = function (a2, c) {
            return this.t(null, c);
          };
          a.c = function (a2, c, d) {
            return this.s(null, c, d);
          };
          return a;
        })();
        k.apply = function (a, b) {
          return this.call.apply(this, [this].concat(Fa(b)));
        };
        k.b = function (a) {
          return this.t(null, a);
        };
        k.a = function (a, b) {
          return this.s(null, a, b);
        };
        k.t = function (a, b) {
          return $a.c(this, b, null);
        };
        k.s = function (a, b, c) {
          return typeof b === "number" ? C.c(this, b, c) : c;
        };
        k.Q = function (a, b) {
          if (this.root.u) return of(this, b)[b & 31];
          throw Error("nth after persistent!");
        };
        k.$ = function (a, b, c) {
          return 0 <= b && b < this.g ? C.a(this, b) : c;
        };
        k.L = function () {
          if (this.root.u) return this.g;
          throw Error("count after persistent!");
        };
        k.Ub = function (a, b, c) {
          var d = this;
          if (d.root.u) {
            if (0 <= b && b < d.g) return (hf(this) <= b ? d.W[b & 31] = c : (a = (function () {
              return function f(a2, h) {
                var l = Ff(d.root.u, h);
                if (a2 === 0) l.e[b & 31] = c; else {
                  var m = b >>> a2 & 31, p = f(a2 - 5, l.e[m]);
                  l.e[m] = p;
                }
                return l;
              };
            })(this).call(null, d.shift, d.root), d.root = a), this);
            if (b === d.g) return Pb(this, c);
            throw Error([z("Index "), z(b), z(" out of bounds for TransientVector of length"), z(d.g)].join(""));
          }
          throw Error("assoc! after persistent!");
        };
        k.Vb = function () {
          if (this.root.u) {
            if (this.g === 0) throw Error("Can't pop empty vector");
            if (this.g === 1) this.g = 0; else if (0 < (this.g - 1 & 31)) this.g -= 1; else {
              var a;
              a: if ((a = this.g - 2, a >= hf(this))) a = this.W; else {
                for (var b = this.root, c = b, d = this.shift; ; ) if (0 < d) (c = Ff(b.u, c.e[a >>> d & 31]), d -= 5); else {
                  a = c.e;
                  break a;
                }
                a = void 0;
              }
              b = Jf(this, this.shift, this.root);
              b = b != null ? b : new ef(this.root.u, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
              5 < this.shift && b.e[1] == null ? (this.root = Ff(this.root.u, b.e[0]), this.shift -= 5) : this.root = b;
              this.g -= 1;
              this.W = a;
            }
            return this;
          }
          throw Error("pop! after persistent!");
        };
        k.kb = function (a, b, c) {
          if (typeof b === "number") return Tb(this, b, c);
          throw Error("TransientVector's key for assoc! must be a number.");
        };
        k.Sa = function (a, b) {
          if (this.root.u) {
            if (32 > this.g - hf(this)) this.W[this.g & 31] = b; else {
              var c = new ef(this.root.u, this.W), d = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              d[0] = b;
              this.W = d;
              if (this.g >>> 5 > 1 << this.shift) {
                var d = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], e = this.shift + 5;
                d[0] = this.root;
                d[1] = jf(this.root.u, this.shift, c);
                this.root = new ef(this.root.u, d);
                this.shift = e;
              } else this.root = Hf(this, this.shift, this.root, c);
            }
            this.g += 1;
            return this;
          }
          throw Error("conj! after persistent!");
        };
        k.Ta = function () {
          if (this.root.u) {
            this.root.u = null;
            var a = this.g - hf(this), b = Array(a);
            hd(this.W, 0, b, 0, a);
            return new W(null, this.g, this.shift, this.root, b, null);
          }
          throw Error("persistent! called twice");
        };
        function Kf(a, b, c, d) {
          this.k = a;
          this.ea = b;
          this.sa = c;
          this.p = d;
          this.q = 0;
          this.j = 31850572;
        }
        k = Kf.prototype;
        k.toString = function () {
          return ec(this);
        };
        k.H = function () {
          return this.k;
        };
        k.B = function () {
          var a = this.p;
          return a != null ? a : this.p = a = wc(this);
        };
        k.A = function (a, b) {
          return Ic(this, b);
        };
        k.J = function () {
          return O(J, this.k);
        };
        k.N = function () {
          return G(this.ea);
        };
        k.S = function () {
          var a = K(this.ea);
          return a ? new Kf(this.k, a, this.sa, null) : this.sa == null ? Na(this) : new Kf(this.k, this.sa, null, null);
        };
        k.D = function () {
          return this;
        };
        k.F = function (a, b) {
          return new Kf(b, this.ea, this.sa, this.p);
        };
        k.G = function (a, b) {
          return M(b, this);
        };
        Kf.prototype[Ea] = function () {
          return uc(this);
        };
        function Lf(a, b, c, d, e) {
          this.k = a;
          this.count = b;
          this.ea = c;
          this.sa = d;
          this.p = e;
          this.j = 31858766;
          this.q = 8192;
        }
        k = Lf.prototype;
        k.toString = function () {
          return ec(this);
        };
        k.H = function () {
          return this.k;
        };
        k.L = function () {
          return this.count;
        };
        k.La = function () {
          return G(this.ea);
        };
        k.Ma = function () {
          if (t(this.ea)) {
            var a = K(this.ea);
            return a ? new Lf(this.k, this.count - 1, a, this.sa, null) : new Lf(this.k, this.count - 1, D(this.sa), Mc, null);
          }
          return this;
        };
        k.B = function () {
          var a = this.p;
          return a != null ? a : this.p = a = wc(this);
        };
        k.A = function (a, b) {
          return Ic(this, b);
        };
        k.J = function () {
          return O(Mf, this.k);
        };
        k.N = function () {
          return G(this.ea);
        };
        k.S = function () {
          return H(D(this));
        };
        k.D = function () {
          var a = D(this.sa), b = this.ea;
          return t(t(b) ? b : a) ? new Kf(null, this.ea, D(a), null) : null;
        };
        k.F = function (a, b) {
          return new Lf(b, this.count, this.ea, this.sa, this.p);
        };
        k.G = function (a, b) {
          var c;
          t(this.ea) ? (c = this.sa, c = new Lf(this.k, this.count + 1, this.ea, Nc.a(t(c) ? c : Mc, b), null)) : c = new Lf(this.k, this.count + 1, Nc.a(this.ea, b), Mc, null);
          return c;
        };
        var Mf = new Lf(null, 0, null, Mc, 0);
        Lf.prototype[Ea] = function () {
          return uc(this);
        };
        function Nf() {
          this.q = 0;
          this.j = 2097152;
        }
        Nf.prototype.A = function () {
          return false;
        };
        var Of = new Nf();
        function Pf(a, b) {
          return md(dd(b) ? Q(a) === Q(b) ? Ee(ud, Oe.a(function (a2) {
            return sc.a(S.c(b, G(a2), Of), Lc(a2));
          }, a)) : null : null);
        }
        function Qf(a, b) {
          var c = a.e;
          if (b instanceof U) a: {
            for (var d = c.length, e = b.pa, f = 0; ; ) {
              if (d <= f) {
                c = -1;
                break a;
              }
              var g = c[f];
              if (g instanceof U && e === g.pa) {
                c = f;
                break a;
              }
              f += 2;
            }
            c = void 0;
          } else if ((d = typeof b == "string", t(t(d) ? d : typeof b === "number"))) a: {
            d = c.length;
            for (e = 0; ; ) {
              if (d <= e) {
                c = -1;
                break a;
              }
              if (b === c[e]) {
                c = e;
                break a;
              }
              e += 2;
            }
            c = void 0;
          } else if (b instanceof qc) a: {
            d = c.length;
            e = b.ta;
            for (f = 0; ; ) {
              if (d <= f) {
                c = -1;
                break a;
              }
              g = c[f];
              if (g instanceof qc && e === g.ta) {
                c = f;
                break a;
              }
              f += 2;
            }
            c = void 0;
          } else if (b == null) a: {
            d = c.length;
            for (e = 0; ; ) {
              if (d <= e) {
                c = -1;
                break a;
              }
              if (c[e] == null) {
                c = e;
                break a;
              }
              e += 2;
            }
            c = void 0;
          } else a: {
            d = c.length;
            for (e = 0; ; ) {
              if (d <= e) {
                c = -1;
                break a;
              }
              if (sc.a(b, c[e])) {
                c = e;
                break a;
              }
              e += 2;
            }
            c = void 0;
          }
          return c;
        }
        function Rf(a, b, c) {
          this.e = a;
          this.m = b;
          this.Z = c;
          this.q = 0;
          this.j = 32374990;
        }
        k = Rf.prototype;
        k.toString = function () {
          return ec(this);
        };
        k.H = function () {
          return this.Z;
        };
        k.T = function () {
          return this.m < this.e.length - 2 ? new Rf(this.e, this.m + 2, this.Z) : null;
        };
        k.L = function () {
          return (this.e.length - this.m) / 2;
        };
        k.B = function () {
          return wc(this);
        };
        k.A = function (a, b) {
          return Ic(this, b);
        };
        k.J = function () {
          return O(J, this.Z);
        };
        k.R = function (a, b) {
          return P.a(b, this);
        };
        k.O = function (a, b, c) {
          return P.c(b, c, this);
        };
        k.N = function () {
          return new W(null, 2, 5, uf, [this.e[this.m], this.e[this.m + 1]], null);
        };
        k.S = function () {
          return this.m < this.e.length - 2 ? new Rf(this.e, this.m + 2, this.Z) : J;
        };
        k.D = function () {
          return this;
        };
        k.F = function (a, b) {
          return new Rf(this.e, this.m, b);
        };
        k.G = function (a, b) {
          return M(b, this);
        };
        Rf.prototype[Ea] = function () {
          return uc(this);
        };
        function Sf(a, b, c) {
          this.e = a;
          this.m = b;
          this.g = c;
        }
        Sf.prototype.ga = function () {
          return this.m < this.g;
        };
        Sf.prototype.next = function () {
          var a = new W(null, 2, 5, uf, [this.e[this.m], this.e[this.m + 1]], null);
          this.m += 2;
          return a;
        };
        function pa(a, b, c, d) {
          this.k = a;
          this.g = b;
          this.e = c;
          this.p = d;
          this.j = 16647951;
          this.q = 8196;
        }
        k = pa.prototype;
        k.toString = function () {
          return ec(this);
        };
        k.t = function (a, b) {
          return $a.c(this, b, null);
        };
        k.s = function (a, b, c) {
          a = Qf(this, b);
          return a === -1 ? c : this.e[a + 1];
        };
        k.gb = function (a, b, c) {
          a = this.e.length;
          for (var d = 0; ; ) if (d < a) {
            var e = this.e[d], f = this.e[d + 1];
            c = b.c ? b.c(c, e, f) : b.call(null, c, e, f);
            if (Ac(c)) return (b = c, L.b ? L.b(b) : L.call(null, b));
            d += 2;
          } else return c;
        };
        k.vb = true;
        k.fb = function () {
          return new Sf(this.e, 0, 2 * this.g);
        };
        k.H = function () {
          return this.k;
        };
        k.L = function () {
          return this.g;
        };
        k.B = function () {
          var a = this.p;
          return a != null ? a : this.p = a = xc(this);
        };
        k.A = function (a, b) {
          if (b && (b.j & 1024 || b.ic)) {
            var c = this.e.length;
            if (this.g === b.L(null)) for (var d = 0; ; ) if (d < c) {
              var e = b.s(null, this.e[d], jd);
              if (e !== jd) if (sc.a(this.e[d + 1], e)) d += 2; else return false; else return false;
            } else return true; else return false;
          } else return Pf(this, b);
        };
        k.$a = function () {
          return new Tf({}, this.e.length, Fa(this.e));
        };
        k.J = function () {
          return ub(Uf, this.k);
        };
        k.R = function (a, b) {
          return P.a(b, this);
        };
        k.O = function (a, b, c) {
          return P.c(b, c, this);
        };
        k.wb = function (a, b) {
          if (0 <= Qf(this, b)) {
            var c = this.e.length, d = c - 2;
            if (d === 0) return Na(this);
            for (var d = Array(d), e = 0, f = 0; ; ) {
              if (e >= c) return new pa(this.k, this.g - 1, d, null);
              sc.a(b, this.e[e]) || (d[f] = this.e[e], d[f + 1] = this.e[e + 1], f += 2);
              e += 2;
            }
          } else return this;
        };
        k.Ka = function (a, b, c) {
          a = Qf(this, b);
          if (a === -1) {
            if (this.g < Vf) {
              a = this.e;
              for (var d = a.length, e = Array(d + 2), f = 0; ; ) if (f < d) (e[f] = a[f], f += 1); else break;
              e[d] = b;
              e[d + 1] = c;
              return new pa(this.k, this.g + 1, e, null);
            }
            return ub(cb(af.a(Qc, this), b, c), this.k);
          }
          if (c === this.e[a + 1]) return this;
          b = Fa(this.e);
          b[a + 1] = c;
          return new pa(this.k, this.g, b, null);
        };
        k.rb = function (a, b) {
          return Qf(this, b) !== -1;
        };
        k.D = function () {
          var a = this.e;
          return 0 <= a.length - 2 ? new Rf(a, 0, null) : null;
        };
        k.F = function (a, b) {
          return new pa(b, this.g, this.e, this.p);
        };
        k.G = function (a, b) {
          if (ed(b)) return cb(this, C.a(b, 0), C.a(b, 1));
          for (var c = this, d = D(b); ; ) {
            if (d == null) return c;
            var e = G(d);
            if (ed(e)) (c = cb(c, C.a(e, 0), C.a(e, 1)), d = K(d)); else throw Error("conj on a map takes map entries or seqables of map entries");
          }
        };
        k.call = (function () {
          var a = null, a = function (a2, c, d) {
            switch (arguments.length) {
              case 2:
                return this.t(null, c);
              case 3:
                return this.s(null, c, d);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          a.a = function (a2, c) {
            return this.t(null, c);
          };
          a.c = function (a2, c, d) {
            return this.s(null, c, d);
          };
          return a;
        })();
        k.apply = function (a, b) {
          return this.call.apply(this, [this].concat(Fa(b)));
        };
        k.b = function (a) {
          return this.t(null, a);
        };
        k.a = function (a, b) {
          return this.s(null, a, b);
        };
        var Uf = new pa(null, 0, [], null), Vf = 8;
        pa.prototype[Ea] = function () {
          return uc(this);
        };
        function Tf(a, b, c) {
          this.Va = a;
          this.qa = b;
          this.e = c;
          this.q = 56;
          this.j = 258;
        }
        k = Tf.prototype;
        k.Jb = function (a, b) {
          if (t(this.Va)) {
            var c = Qf(this, b);
            0 <= c && (this.e[c] = this.e[this.qa - 2], this.e[c + 1] = this.e[this.qa - 1], c = this.e, c.pop(), c.pop(), this.qa -= 2);
            return this;
          }
          throw Error("dissoc! after persistent!");
        };
        k.kb = function (a, b, c) {
          var d = this;
          if (t(d.Va)) {
            a = Qf(this, b);
            if (a === -1) return d.qa + 2 <= 2 * Vf ? (d.qa += 2, d.e.push(b), d.e.push(c), this) : ee.c((function () {
              var a2 = d.qa, b2 = d.e;
              return Xf.a ? Xf.a(a2, b2) : Xf.call(null, a2, b2);
            })(), b, c);
            c !== d.e[a + 1] && (d.e[a + 1] = c);
            return this;
          }
          throw Error("assoc! after persistent!");
        };
        k.Sa = function (a, b) {
          if (t(this.Va)) {
            if (b ? b.j & 2048 || b.jc || (b.j ? 0 : w(fb, b)) : w(fb, b)) return Rb(this, Yf.b ? Yf.b(b) : Yf.call(null, b), Zf.b ? Zf.b(b) : Zf.call(null, b));
            for (var c = D(b), d = this; ; ) {
              var e = G(c);
              if (t(e)) var f = e, c = K(c), d = Rb(d, (function () {
                var a2 = f;
                return Yf.b ? Yf.b(a2) : Yf.call(null, a2);
              })(), (function () {
                var a2 = f;
                return Zf.b ? Zf.b(a2) : Zf.call(null, a2);
              })()); else return d;
            }
          } else throw Error("conj! after persistent!");
        };
        k.Ta = function () {
          if (t(this.Va)) return (this.Va = false, new pa(null, Cd(this.qa, 2), this.e, null));
          throw Error("persistent! called twice");
        };
        k.t = function (a, b) {
          return $a.c(this, b, null);
        };
        k.s = function (a, b, c) {
          if (t(this.Va)) return (a = Qf(this, b), a === -1 ? c : this.e[a + 1]);
          throw Error("lookup after persistent!");
        };
        k.L = function () {
          if (t(this.Va)) return Cd(this.qa, 2);
          throw Error("count after persistent!");
        };
        function Xf(a, b) {
          for (var c = Ob(Qc), d = 0; ; ) if (d < a) (c = ee.c(c, b[d], b[d + 1]), d += 2); else return c;
        }
        function $f() {
          this.o = false;
        }
        function ag(a, b) {
          return a === b ? true : Nd(a, b) ? true : sc.a(a, b);
        }
        var bg = (function () {
          function a(a2, b2, c2, g, h) {
            a2 = Fa(a2);
            a2[b2] = c2;
            a2[g] = h;
            return a2;
          }
          function b(a2, b2, c2) {
            a2 = Fa(a2);
            a2[b2] = c2;
            return a2;
          }
          var c = null, c = function (c2, e, f, g, h) {
            switch (arguments.length) {
              case 3:
                return b.call(this, c2, e, f);
              case 5:
                return a.call(this, c2, e, f, g, h);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.c = b;
          c.r = a;
          return c;
        })();
        function cg(a, b) {
          var c = Array(a.length - 2);
          hd(a, 0, c, 0, 2 * b);
          hd(a, 2 * (b + 1), c, 2 * b, c.length - 2 * b);
          return c;
        }
        var dg = (function () {
          function a(a2, b2, c2, g, h, l) {
            a2 = a2.Na(b2);
            a2.e[c2] = g;
            a2.e[h] = l;
            return a2;
          }
          function b(a2, b2, c2, g) {
            a2 = a2.Na(b2);
            a2.e[c2] = g;
            return a2;
          }
          var c = null, c = function (c2, e, f, g, h, l) {
            switch (arguments.length) {
              case 4:
                return b.call(this, c2, e, f, g);
              case 6:
                return a.call(this, c2, e, f, g, h, l);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.n = b;
          c.P = a;
          return c;
        })();
        function eg(a, b, c) {
          for (var d = a.length, e = 0, f = c; ; ) if (e < d) {
            c = a[e];
            if (c != null) {
              var g = a[e + 1];
              c = b.c ? b.c(f, c, g) : b.call(null, f, c, g);
            } else (c = a[e + 1], c = c != null ? c.Xa(b, f) : f);
            if (Ac(c)) return (a = c, L.b ? L.b(a) : L.call(null, a));
            e += 2;
            f = c;
          } else return f;
        }
        function fg(a, b, c) {
          this.u = a;
          this.w = b;
          this.e = c;
        }
        k = fg.prototype;
        k.Na = function (a) {
          if (a === this.u) return this;
          var b = Dd(this.w), c = Array(0 > b ? 4 : 2 * (b + 1));
          hd(this.e, 0, c, 0, 2 * b);
          return new fg(a, this.w, c);
        };
        k.nb = function (a, b, c, d, e) {
          var f = 1 << (c >>> b & 31);
          if ((this.w & f) === 0) return this;
          var g = Dd(this.w & f - 1), h = this.e[2 * g], l = this.e[2 * g + 1];
          return h == null ? (b = l.nb(a, b + 5, c, d, e), b === l ? this : b != null ? dg.n(this, a, 2 * g + 1, b) : this.w === f ? null : gg(this, a, f, g)) : ag(d, h) ? (e[0] = true, gg(this, a, f, g)) : this;
        };
        function gg(a, b, c, d) {
          if (a.w === c) return null;
          a = a.Na(b);
          b = a.e;
          var e = b.length;
          a.w ^= c;
          hd(b, 2 * (d + 1), b, 2 * d, e - 2 * (d + 1));
          b[e - 2] = null;
          b[e - 1] = null;
          return a;
        }
        k.lb = function () {
          var a = this.e;
          return hg.b ? hg.b(a) : hg.call(null, a);
        };
        k.Xa = function (a, b) {
          return eg(this.e, a, b);
        };
        k.Oa = function (a, b, c, d) {
          var e = 1 << (b >>> a & 31);
          if ((this.w & e) === 0) return d;
          var f = Dd(this.w & e - 1), e = this.e[2 * f], f = this.e[2 * f + 1];
          return e == null ? f.Oa(a + 5, b, c, d) : ag(c, e) ? f : d;
        };
        k.la = function (a, b, c, d, e, f) {
          var g = 1 << (c >>> b & 31), h = Dd(this.w & g - 1);
          if ((this.w & g) === 0) {
            var l = Dd(this.w);
            if (2 * l < this.e.length) {
              var m = this.Na(a), p = m.e;
              f.o = true;
              id(p, 2 * h, p, 2 * (h + 1), 2 * (l - h));
              p[2 * h] = d;
              p[2 * h + 1] = e;
              m.w |= g;
              return m;
            }
            if (16 <= l) {
              g = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              g[c >>> b & 31] = ig.la(a, b + 5, c, d, e, f);
              for (m = h = 0; ; ) if (32 > h) ((this.w >>> h & 1) !== 0 && (g[h] = this.e[m] != null ? ig.la(a, b + 5, nc(this.e[m]), this.e[m], this.e[m + 1], f) : this.e[m + 1], m += 2), h += 1); else break;
              return new jg(a, l + 1, g);
            }
            p = Array(2 * (l + 4));
            hd(this.e, 0, p, 0, 2 * h);
            p[2 * h] = d;
            p[2 * h + 1] = e;
            hd(this.e, 2 * h, p, 2 * (h + 1), 2 * (l - h));
            f.o = true;
            m = this.Na(a);
            m.e = p;
            m.w |= g;
            return m;
          }
          var q = this.e[2 * h], s = this.e[2 * h + 1];
          if (q == null) return (l = s.la(a, b + 5, c, d, e, f), l === s ? this : dg.n(this, a, 2 * h + 1, l));
          if (ag(d, q)) return e === s ? this : dg.n(this, a, 2 * h + 1, e);
          f.o = true;
          return dg.P(this, a, 2 * h, null, 2 * h + 1, (function () {
            var f2 = b + 5;
            return kg.ia ? kg.ia(a, f2, q, s, c, d, e) : kg.call(null, a, f2, q, s, c, d, e);
          })());
        };
        k.ka = function (a, b, c, d, e) {
          var f = 1 << (b >>> a & 31), g = Dd(this.w & f - 1);
          if ((this.w & f) === 0) {
            var h = Dd(this.w);
            if (16 <= h) {
              f = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              f[b >>> a & 31] = ig.ka(a + 5, b, c, d, e);
              for (var l = g = 0; ; ) if (32 > g) ((this.w >>> g & 1) !== 0 && (f[g] = this.e[l] != null ? ig.ka(a + 5, nc(this.e[l]), this.e[l], this.e[l + 1], e) : this.e[l + 1], l += 2), g += 1); else break;
              return new jg(null, h + 1, f);
            }
            l = Array(2 * (h + 1));
            hd(this.e, 0, l, 0, 2 * g);
            l[2 * g] = c;
            l[2 * g + 1] = d;
            hd(this.e, 2 * g, l, 2 * (g + 1), 2 * (h - g));
            e.o = true;
            return new fg(null, this.w | f, l);
          }
          var m = this.e[2 * g], p = this.e[2 * g + 1];
          if (m == null) return (h = p.ka(a + 5, b, c, d, e), h === p ? this : new fg(null, this.w, bg.c(this.e, 2 * g + 1, h)));
          if (ag(c, m)) return d === p ? this : new fg(null, this.w, bg.c(this.e, 2 * g + 1, d));
          e.o = true;
          return new fg(null, this.w, bg.r(this.e, 2 * g, null, 2 * g + 1, (function () {
            var e2 = a + 5;
            return kg.P ? kg.P(e2, m, p, b, c, d) : kg.call(null, e2, m, p, b, c, d);
          })()));
        };
        k.mb = function (a, b, c) {
          var d = 1 << (b >>> a & 31);
          if ((this.w & d) === 0) return this;
          var e = Dd(this.w & d - 1), f = this.e[2 * e], g = this.e[2 * e + 1];
          return f == null ? (a = g.mb(a + 5, b, c), a === g ? this : a != null ? new fg(null, this.w, bg.c(this.e, 2 * e + 1, a)) : this.w === d ? null : new fg(null, this.w ^ d, cg(this.e, e))) : ag(c, f) ? new fg(null, this.w ^ d, cg(this.e, e)) : this;
        };
        var ig = new fg(null, 0, []);
        function lg(a, b, c) {
          var d = a.e, e = d.length;
          a = Array(2 * (a.g - 1));
          for (var f = 0, g = 1, h = 0; ; ) if (f < e) (f !== c && d[f] != null && (a[g] = d[f], g += 2, h |= 1 << f), f += 1); else return new fg(b, h, a);
        }
        function jg(a, b, c) {
          this.u = a;
          this.g = b;
          this.e = c;
        }
        k = jg.prototype;
        k.Na = function (a) {
          return a === this.u ? this : new jg(a, this.g, Fa(this.e));
        };
        k.nb = function (a, b, c, d, e) {
          var f = c >>> b & 31, g = this.e[f];
          if (g == null) return this;
          b = g.nb(a, b + 5, c, d, e);
          if (b === g) return this;
          if (b == null) {
            if (8 >= this.g) return lg(this, a, f);
            a = dg.n(this, a, f, b);
            a.g -= 1;
            return a;
          }
          return dg.n(this, a, f, b);
        };
        k.lb = function () {
          var a = this.e;
          return mg.b ? mg.b(a) : mg.call(null, a);
        };
        k.Xa = function (a, b) {
          for (var c = this.e.length, d = 0, e = b; ; ) if (d < c) {
            var f = this.e[d];
            if (f != null && (e = f.Xa(a, e), Ac(e))) return (c = e, L.b ? L.b(c) : L.call(null, c));
            d += 1;
          } else return e;
        };
        k.Oa = function (a, b, c, d) {
          var e = this.e[b >>> a & 31];
          return e != null ? e.Oa(a + 5, b, c, d) : d;
        };
        k.la = function (a, b, c, d, e, f) {
          var g = c >>> b & 31, h = this.e[g];
          if (h == null) return (a = dg.n(this, a, g, ig.la(a, b + 5, c, d, e, f)), a.g += 1, a);
          b = h.la(a, b + 5, c, d, e, f);
          return b === h ? this : dg.n(this, a, g, b);
        };
        k.ka = function (a, b, c, d, e) {
          var f = b >>> a & 31, g = this.e[f];
          if (g == null) return new jg(null, this.g + 1, bg.c(this.e, f, ig.ka(a + 5, b, c, d, e)));
          a = g.ka(a + 5, b, c, d, e);
          return a === g ? this : new jg(null, this.g, bg.c(this.e, f, a));
        };
        k.mb = function (a, b, c) {
          var d = b >>> a & 31, e = this.e[d];
          return e != null ? (a = e.mb(a + 5, b, c), a === e ? this : a == null ? 8 >= this.g ? lg(this, null, d) : new jg(null, this.g - 1, bg.c(this.e, d, a)) : new jg(null, this.g, bg.c(this.e, d, a))) : this;
        };
        function ng(a, b, c) {
          b *= 2;
          for (var d = 0; ; ) if (d < b) {
            if (ag(c, a[d])) return d;
            d += 2;
          } else return -1;
        }
        function og(a, b, c, d) {
          this.u = a;
          this.Ia = b;
          this.g = c;
          this.e = d;
        }
        k = og.prototype;
        k.Na = function (a) {
          if (a === this.u) return this;
          var b = Array(2 * (this.g + 1));
          hd(this.e, 0, b, 0, 2 * this.g);
          return new og(a, this.Ia, this.g, b);
        };
        k.nb = function (a, b, c, d, e) {
          b = ng(this.e, this.g, d);
          if (b === -1) return this;
          e[0] = true;
          if (this.g === 1) return null;
          a = this.Na(a);
          e = a.e;
          e[b] = e[2 * this.g - 2];
          e[b + 1] = e[2 * this.g - 1];
          e[2 * this.g - 1] = null;
          e[2 * this.g - 2] = null;
          a.g -= 1;
          return a;
        };
        k.lb = function () {
          var a = this.e;
          return hg.b ? hg.b(a) : hg.call(null, a);
        };
        k.Xa = function (a, b) {
          return eg(this.e, a, b);
        };
        k.Oa = function (a, b, c, d) {
          a = ng(this.e, this.g, c);
          return 0 > a ? d : ag(c, this.e[a]) ? this.e[a + 1] : d;
        };
        k.la = function (a, b, c, d, e, f) {
          if (c === this.Ia) {
            b = ng(this.e, this.g, d);
            if (b === -1) {
              if (this.e.length > 2 * this.g) return (a = dg.P(this, a, 2 * this.g, d, 2 * this.g + 1, e), f.o = true, a.g += 1, a);
              c = this.e.length;
              b = Array(c + 2);
              hd(this.e, 0, b, 0, c);
              b[c] = d;
              b[c + 1] = e;
              f.o = true;
              f = this.g + 1;
              a === this.u ? (this.e = b, this.g = f, a = this) : a = new og(this.u, this.Ia, f, b);
              return a;
            }
            return this.e[b + 1] === e ? this : dg.n(this, a, b + 1, e);
          }
          return new fg(a, 1 << (this.Ia >>> b & 31), [null, this, null, null]).la(a, b, c, d, e, f);
        };
        k.ka = function (a, b, c, d, e) {
          return b === this.Ia ? (a = ng(this.e, this.g, c), a === -1 ? (a = 2 * this.g, b = Array(a + 2), hd(this.e, 0, b, 0, a), b[a] = c, b[a + 1] = d, e.o = true, new og(null, this.Ia, this.g + 1, b)) : sc.a(this.e[a], d) ? this : new og(null, this.Ia, this.g, bg.c(this.e, a + 1, d))) : new fg(null, 1 << (this.Ia >>> a & 31), [null, this]).ka(a, b, c, d, e);
        };
        k.mb = function (a, b, c) {
          a = ng(this.e, this.g, c);
          return a === -1 ? this : this.g === 1 ? null : new og(null, this.Ia, this.g - 1, cg(this.e, Cd(a, 2)));
        };
        var kg = (function () {
          function a(a2, b2, c2, g, h, l, m) {
            var p = nc(c2);
            if (p === h) return new og(null, p, 2, [c2, g, l, m]);
            var q = new $f();
            return ig.la(a2, b2, p, c2, g, q).la(a2, b2, h, l, m, q);
          }
          function b(a2, b2, c2, g, h, l) {
            var m = nc(b2);
            if (m === g) return new og(null, m, 2, [b2, c2, h, l]);
            var p = new $f();
            return ig.ka(a2, m, b2, c2, p).ka(a2, g, h, l, p);
          }
          var c = null, c = function (c2, e, f, g, h, l, m) {
            switch (arguments.length) {
              case 6:
                return b.call(this, c2, e, f, g, h, l);
              case 7:
                return a.call(this, c2, e, f, g, h, l, m);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.P = b;
          c.ia = a;
          return c;
        })();
        function pg(a, b, c, d, e) {
          this.k = a;
          this.Pa = b;
          this.m = c;
          this.C = d;
          this.p = e;
          this.q = 0;
          this.j = 32374860;
        }
        k = pg.prototype;
        k.toString = function () {
          return ec(this);
        };
        k.H = function () {
          return this.k;
        };
        k.B = function () {
          var a = this.p;
          return a != null ? a : this.p = a = wc(this);
        };
        k.A = function (a, b) {
          return Ic(this, b);
        };
        k.J = function () {
          return O(J, this.k);
        };
        k.R = function (a, b) {
          return P.a(b, this);
        };
        k.O = function (a, b, c) {
          return P.c(b, c, this);
        };
        k.N = function () {
          return this.C == null ? new W(null, 2, 5, uf, [this.Pa[this.m], this.Pa[this.m + 1]], null) : G(this.C);
        };
        k.S = function () {
          if (this.C == null) {
            var a = this.Pa, b = this.m + 2;
            return hg.c ? hg.c(a, b, null) : hg.call(null, a, b, null);
          }
          var a = this.Pa, b = this.m, c = K(this.C);
          return hg.c ? hg.c(a, b, c) : hg.call(null, a, b, c);
        };
        k.D = function () {
          return this;
        };
        k.F = function (a, b) {
          return new pg(b, this.Pa, this.m, this.C, this.p);
        };
        k.G = function (a, b) {
          return M(b, this);
        };
        pg.prototype[Ea] = function () {
          return uc(this);
        };
        var hg = (function () {
          function a(a2, b2, c2) {
            if (c2 == null) for (c2 = a2.length; ; ) if (b2 < c2) {
              if (a2[b2] != null) return new pg(null, a2, b2, null, null);
              var g = a2[b2 + 1];
              if (t(g) && (g = g.lb(), t(g))) return new pg(null, a2, b2 + 2, g, null);
              b2 += 2;
            } else return null; else return new pg(null, a2, b2, c2, null);
          }
          function b(a2) {
            return c.c(a2, 0, null);
          }
          var c = null, c = function (c2, e, f) {
            switch (arguments.length) {
              case 1:
                return b.call(this, c2);
              case 3:
                return a.call(this, c2, e, f);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.b = b;
          c.c = a;
          return c;
        })();
        function qg(a, b, c, d, e) {
          this.k = a;
          this.Pa = b;
          this.m = c;
          this.C = d;
          this.p = e;
          this.q = 0;
          this.j = 32374860;
        }
        k = qg.prototype;
        k.toString = function () {
          return ec(this);
        };
        k.H = function () {
          return this.k;
        };
        k.B = function () {
          var a = this.p;
          return a != null ? a : this.p = a = wc(this);
        };
        k.A = function (a, b) {
          return Ic(this, b);
        };
        k.J = function () {
          return O(J, this.k);
        };
        k.R = function (a, b) {
          return P.a(b, this);
        };
        k.O = function (a, b, c) {
          return P.c(b, c, this);
        };
        k.N = function () {
          return G(this.C);
        };
        k.S = function () {
          var a = this.Pa, b = this.m, c = K(this.C);
          return mg.n ? mg.n(null, a, b, c) : mg.call(null, null, a, b, c);
        };
        k.D = function () {
          return this;
        };
        k.F = function (a, b) {
          return new qg(b, this.Pa, this.m, this.C, this.p);
        };
        k.G = function (a, b) {
          return M(b, this);
        };
        qg.prototype[Ea] = function () {
          return uc(this);
        };
        var mg = (function () {
          function a(a2, b2, c2, g) {
            if (g == null) for (g = b2.length; ; ) if (c2 < g) {
              var h = b2[c2];
              if (t(h) && (h = h.lb(), t(h))) return new qg(a2, b2, c2 + 1, h, null);
              c2 += 1;
            } else return null; else return new qg(a2, b2, c2, g, null);
          }
          function b(a2) {
            return c.n(null, a2, 0, null);
          }
          var c = null, c = function (c2, e, f, g) {
            switch (arguments.length) {
              case 1:
                return b.call(this, c2);
              case 4:
                return a.call(this, c2, e, f, g);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.b = b;
          c.n = a;
          return c;
        })();
        function rg(a, b, c, d, e, f) {
          this.k = a;
          this.g = b;
          this.root = c;
          this.U = d;
          this.da = e;
          this.p = f;
          this.j = 16123663;
          this.q = 8196;
        }
        k = rg.prototype;
        k.toString = function () {
          return ec(this);
        };
        k.t = function (a, b) {
          return $a.c(this, b, null);
        };
        k.s = function (a, b, c) {
          return b == null ? this.U ? this.da : c : this.root == null ? c : this.root.Oa(0, nc(b), b, c);
        };
        k.gb = function (a, b, c) {
          this.U && (a = this.da, c = b.c ? b.c(c, null, a) : b.call(null, c, null, a));
          return Ac(c) ? L.b ? L.b(c) : L.call(null, c) : this.root != null ? this.root.Xa(b, c) : c;
        };
        k.H = function () {
          return this.k;
        };
        k.L = function () {
          return this.g;
        };
        k.B = function () {
          var a = this.p;
          return a != null ? a : this.p = a = xc(this);
        };
        k.A = function (a, b) {
          return Pf(this, b);
        };
        k.$a = function () {
          return new sg({}, this.root, this.g, this.U, this.da);
        };
        k.J = function () {
          return ub(Qc, this.k);
        };
        k.wb = function (a, b) {
          if (b == null) return this.U ? new rg(this.k, this.g - 1, this.root, false, null, null) : this;
          if (this.root == null) return this;
          var c = this.root.mb(0, nc(b), b);
          return c === this.root ? this : new rg(this.k, this.g - 1, c, this.U, this.da, null);
        };
        k.Ka = function (a, b, c) {
          if (b == null) return this.U && c === this.da ? this : new rg(this.k, this.U ? this.g : this.g + 1, this.root, true, c, null);
          a = new $f();
          b = (this.root == null ? ig : this.root).ka(0, nc(b), b, c, a);
          return b === this.root ? this : new rg(this.k, a.o ? this.g + 1 : this.g, b, this.U, this.da, null);
        };
        k.rb = function (a, b) {
          return b == null ? this.U : this.root == null ? false : this.root.Oa(0, nc(b), b, jd) !== jd;
        };
        k.D = function () {
          if (0 < this.g) {
            var a = this.root != null ? this.root.lb() : null;
            return this.U ? M(new W(null, 2, 5, uf, [null, this.da], null), a) : a;
          }
          return null;
        };
        k.F = function (a, b) {
          return new rg(b, this.g, this.root, this.U, this.da, this.p);
        };
        k.G = function (a, b) {
          if (ed(b)) return cb(this, C.a(b, 0), C.a(b, 1));
          for (var c = this, d = D(b); ; ) {
            if (d == null) return c;
            var e = G(d);
            if (ed(e)) (c = cb(c, C.a(e, 0), C.a(e, 1)), d = K(d)); else throw Error("conj on a map takes map entries or seqables of map entries");
          }
        };
        k.call = (function () {
          var a = null, a = function (a2, c, d) {
            switch (arguments.length) {
              case 2:
                return this.t(null, c);
              case 3:
                return this.s(null, c, d);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          a.a = function (a2, c) {
            return this.t(null, c);
          };
          a.c = function (a2, c, d) {
            return this.s(null, c, d);
          };
          return a;
        })();
        k.apply = function (a, b) {
          return this.call.apply(this, [this].concat(Fa(b)));
        };
        k.b = function (a) {
          return this.t(null, a);
        };
        k.a = function (a, b) {
          return this.s(null, a, b);
        };
        var Qc = new rg(null, 0, null, false, null, 0);
        rg.prototype[Ea] = function () {
          return uc(this);
        };
        function sg(a, b, c, d, e) {
          this.u = a;
          this.root = b;
          this.count = c;
          this.U = d;
          this.da = e;
          this.q = 56;
          this.j = 258;
        }
        k = sg.prototype;
        k.Jb = function (a, b) {
          if (this.u) if (b == null) this.U && (this.U = false, this.da = null, this.count -= 1); else {
            if (this.root != null) {
              var c = new $f(), d = this.root.nb(this.u, 0, nc(b), b, c);
              d !== this.root && (this.root = d);
              t(c[0]) && (this.count -= 1);
            }
          } else throw Error("dissoc! after persistent!");
          return this;
        };
        k.kb = function (a, b, c) {
          return tg(this, b, c);
        };
        k.Sa = function (a, b) {
          return ug(this, b);
        };
        k.Ta = function () {
          var a;
          if (this.u) (this.u = null, a = new rg(null, this.count, this.root, this.U, this.da, null)); else throw Error("persistent! called twice");
          return a;
        };
        k.t = function (a, b) {
          return b == null ? this.U ? this.da : null : this.root == null ? null : this.root.Oa(0, nc(b), b);
        };
        k.s = function (a, b, c) {
          return b == null ? this.U ? this.da : c : this.root == null ? c : this.root.Oa(0, nc(b), b, c);
        };
        k.L = function () {
          if (this.u) return this.count;
          throw Error("count after persistent!");
        };
        function ug(a, b) {
          if (a.u) {
            if (b ? b.j & 2048 || b.jc || (b.j ? 0 : w(fb, b)) : w(fb, b)) return tg(a, Yf.b ? Yf.b(b) : Yf.call(null, b), Zf.b ? Zf.b(b) : Zf.call(null, b));
            for (var c = D(b), d = a; ; ) {
              var e = G(c);
              if (t(e)) var f = e, c = K(c), d = tg(d, (function () {
                var a2 = f;
                return Yf.b ? Yf.b(a2) : Yf.call(null, a2);
              })(), (function () {
                var a2 = f;
                return Zf.b ? Zf.b(a2) : Zf.call(null, a2);
              })()); else return d;
            }
          } else throw Error("conj! after persistent");
        }
        function tg(a, b, c) {
          if (a.u) {
            if (b == null) (a.da !== c && (a.da = c), a.U || (a.count += 1, a.U = true)); else {
              var d = new $f();
              b = (a.root == null ? ig : a.root).la(a.u, 0, nc(b), b, c, d);
              b !== a.root && (a.root = b);
              d.o && (a.count += 1);
            }
            return a;
          }
          throw Error("assoc! after persistent!");
        }
        function vg(a, b, c) {
          for (var d = b; ; ) if (a != null) (b = c ? a.left : a.right, d = Nc.a(d, a), a = b); else return d;
        }
        function wg(a, b, c, d, e) {
          this.k = a;
          this.stack = b;
          this.pb = c;
          this.g = d;
          this.p = e;
          this.q = 0;
          this.j = 32374862;
        }
        k = wg.prototype;
        k.toString = function () {
          return ec(this);
        };
        k.H = function () {
          return this.k;
        };
        k.L = function () {
          return 0 > this.g ? Q(K(this)) + 1 : this.g;
        };
        k.B = function () {
          var a = this.p;
          return a != null ? a : this.p = a = wc(this);
        };
        k.A = function (a, b) {
          return Ic(this, b);
        };
        k.J = function () {
          return O(J, this.k);
        };
        k.R = function (a, b) {
          return P.a(b, this);
        };
        k.O = function (a, b, c) {
          return P.c(b, c, this);
        };
        k.N = function () {
          return Wc(this.stack);
        };
        k.S = function () {
          var a = G(this.stack), a = vg(this.pb ? a.right : a.left, K(this.stack), this.pb);
          return a != null ? new wg(null, a, this.pb, this.g - 1, null) : J;
        };
        k.D = function () {
          return this;
        };
        k.F = function (a, b) {
          return new wg(b, this.stack, this.pb, this.g, this.p);
        };
        k.G = function (a, b) {
          return M(b, this);
        };
        wg.prototype[Ea] = function () {
          return uc(this);
        };
        function xg(a, b, c) {
          return new wg(null, vg(a, null, b), b, c, null);
        }
        function yg(a, b, c, d) {
          return c instanceof X ? c.left instanceof X ? new X(c.key, c.o, c.left.ua(), new Z(a, b, c.right, d, null), null) : c.right instanceof X ? new X(c.right.key, c.right.o, new Z(c.key, c.o, c.left, c.right.left, null), new Z(a, b, c.right.right, d, null), null) : new Z(a, b, c, d, null) : new Z(a, b, c, d, null);
        }
        function zg(a, b, c, d) {
          return d instanceof X ? d.right instanceof X ? new X(d.key, d.o, new Z(a, b, c, d.left, null), d.right.ua(), null) : d.left instanceof X ? new X(d.left.key, d.left.o, new Z(a, b, c, d.left.left, null), new Z(d.key, d.o, d.left.right, d.right, null), null) : new Z(a, b, c, d, null) : new Z(a, b, c, d, null);
        }
        function Ag(a, b, c, d) {
          if (c instanceof X) return new X(a, b, c.ua(), d, null);
          if (d instanceof Z) return zg(a, b, c, d.ob());
          if (d instanceof X && d.left instanceof Z) return new X(d.left.key, d.left.o, new Z(a, b, c, d.left.left, null), zg(d.key, d.o, d.left.right, d.right.ob()), null);
          throw Error("red-black tree invariant violation");
        }
        var Cg = function Bg(b, c, d) {
          d = b.left != null ? Bg(b.left, c, d) : d;
          if (Ac(d)) return L.b ? L.b(d) : L.call(null, d);
          var e = b.key, f = b.o;
          d = c.c ? c.c(d, e, f) : c.call(null, d, e, f);
          if (Ac(d)) return L.b ? L.b(d) : L.call(null, d);
          b = b.right != null ? Bg(b.right, c, d) : d;
          return Ac(b) ? L.b ? L.b(b) : L.call(null, b) : b;
        };
        function Z(a, b, c, d, e) {
          this.key = a;
          this.o = b;
          this.left = c;
          this.right = d;
          this.p = e;
          this.q = 0;
          this.j = 32402207;
        }
        k = Z.prototype;
        k.Mb = function (a) {
          return a.Ob(this);
        };
        k.ob = function () {
          return new X(this.key, this.o, this.left, this.right, null);
        };
        k.ua = function () {
          return this;
        };
        k.Lb = function (a) {
          return a.Nb(this);
        };
        k.replace = function (a, b, c, d) {
          return new Z(a, b, c, d, null);
        };
        k.Nb = function (a) {
          return new Z(a.key, a.o, this, a.right, null);
        };
        k.Ob = function (a) {
          return new Z(a.key, a.o, a.left, this, null);
        };
        k.Xa = function (a, b) {
          return Cg(this, a, b);
        };
        k.t = function (a, b) {
          return C.c(this, b, null);
        };
        k.s = function (a, b, c) {
          return C.c(this, b, c);
        };
        k.Q = function (a, b) {
          return b === 0 ? this.key : b === 1 ? this.o : null;
        };
        k.$ = function (a, b, c) {
          return b === 0 ? this.key : b === 1 ? this.o : c;
        };
        k.Ua = function (a, b, c) {
          return new W(null, 2, 5, uf, [this.key, this.o], null).Ua(null, b, c);
        };
        k.H = function () {
          return null;
        };
        k.L = function () {
          return 2;
        };
        k.hb = function () {
          return this.key;
        };
        k.ib = function () {
          return this.o;
        };
        k.La = function () {
          return this.o;
        };
        k.Ma = function () {
          return new W(null, 1, 5, uf, [this.key], null);
        };
        k.B = function () {
          var a = this.p;
          return a != null ? a : this.p = a = wc(this);
        };
        k.A = function (a, b) {
          return Ic(this, b);
        };
        k.J = function () {
          return Mc;
        };
        k.R = function (a, b) {
          return Cc.a(this, b);
        };
        k.O = function (a, b, c) {
          return Cc.c(this, b, c);
        };
        k.Ka = function (a, b, c) {
          return Rc.c(new W(null, 2, 5, uf, [this.key, this.o], null), b, c);
        };
        k.D = function () {
          return Ra(Ra(J, this.o), this.key);
        };
        k.F = function (a, b) {
          return O(new W(null, 2, 5, uf, [this.key, this.o], null), b);
        };
        k.G = function (a, b) {
          return new W(null, 3, 5, uf, [this.key, this.o, b], null);
        };
        k.call = (function () {
          var a = null, a = function (a2, c, d) {
            switch (arguments.length) {
              case 2:
                return this.t(null, c);
              case 3:
                return this.s(null, c, d);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          a.a = function (a2, c) {
            return this.t(null, c);
          };
          a.c = function (a2, c, d) {
            return this.s(null, c, d);
          };
          return a;
        })();
        k.apply = function (a, b) {
          return this.call.apply(this, [this].concat(Fa(b)));
        };
        k.b = function (a) {
          return this.t(null, a);
        };
        k.a = function (a, b) {
          return this.s(null, a, b);
        };
        Z.prototype[Ea] = function () {
          return uc(this);
        };
        function X(a, b, c, d, e) {
          this.key = a;
          this.o = b;
          this.left = c;
          this.right = d;
          this.p = e;
          this.q = 0;
          this.j = 32402207;
        }
        k = X.prototype;
        k.Mb = function (a) {
          return new X(this.key, this.o, this.left, a, null);
        };
        k.ob = function () {
          throw Error("red-black tree invariant violation");
        };
        k.ua = function () {
          return new Z(this.key, this.o, this.left, this.right, null);
        };
        k.Lb = function (a) {
          return new X(this.key, this.o, a, this.right, null);
        };
        k.replace = function (a, b, c, d) {
          return new X(a, b, c, d, null);
        };
        k.Nb = function (a) {
          return this.left instanceof X ? new X(this.key, this.o, this.left.ua(), new Z(a.key, a.o, this.right, a.right, null), null) : this.right instanceof X ? new X(this.right.key, this.right.o, new Z(this.key, this.o, this.left, this.right.left, null), new Z(a.key, a.o, this.right.right, a.right, null), null) : new Z(a.key, a.o, this, a.right, null);
        };
        k.Ob = function (a) {
          return this.right instanceof X ? new X(this.key, this.o, new Z(a.key, a.o, a.left, this.left, null), this.right.ua(), null) : this.left instanceof X ? new X(this.left.key, this.left.o, new Z(a.key, a.o, a.left, this.left.left, null), new Z(this.key, this.o, this.left.right, this.right, null), null) : new Z(a.key, a.o, a.left, this, null);
        };
        k.Xa = function (a, b) {
          return Cg(this, a, b);
        };
        k.t = function (a, b) {
          return C.c(this, b, null);
        };
        k.s = function (a, b, c) {
          return C.c(this, b, c);
        };
        k.Q = function (a, b) {
          return b === 0 ? this.key : b === 1 ? this.o : null;
        };
        k.$ = function (a, b, c) {
          return b === 0 ? this.key : b === 1 ? this.o : c;
        };
        k.Ua = function (a, b, c) {
          return new W(null, 2, 5, uf, [this.key, this.o], null).Ua(null, b, c);
        };
        k.H = function () {
          return null;
        };
        k.L = function () {
          return 2;
        };
        k.hb = function () {
          return this.key;
        };
        k.ib = function () {
          return this.o;
        };
        k.La = function () {
          return this.o;
        };
        k.Ma = function () {
          return new W(null, 1, 5, uf, [this.key], null);
        };
        k.B = function () {
          var a = this.p;
          return a != null ? a : this.p = a = wc(this);
        };
        k.A = function (a, b) {
          return Ic(this, b);
        };
        k.J = function () {
          return Mc;
        };
        k.R = function (a, b) {
          return Cc.a(this, b);
        };
        k.O = function (a, b, c) {
          return Cc.c(this, b, c);
        };
        k.Ka = function (a, b, c) {
          return Rc.c(new W(null, 2, 5, uf, [this.key, this.o], null), b, c);
        };
        k.D = function () {
          return Ra(Ra(J, this.o), this.key);
        };
        k.F = function (a, b) {
          return O(new W(null, 2, 5, uf, [this.key, this.o], null), b);
        };
        k.G = function (a, b) {
          return new W(null, 3, 5, uf, [this.key, this.o, b], null);
        };
        k.call = (function () {
          var a = null, a = function (a2, c, d) {
            switch (arguments.length) {
              case 2:
                return this.t(null, c);
              case 3:
                return this.s(null, c, d);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          a.a = function (a2, c) {
            return this.t(null, c);
          };
          a.c = function (a2, c, d) {
            return this.s(null, c, d);
          };
          return a;
        })();
        k.apply = function (a, b) {
          return this.call.apply(this, [this].concat(Fa(b)));
        };
        k.b = function (a) {
          return this.t(null, a);
        };
        k.a = function (a, b) {
          return this.s(null, a, b);
        };
        X.prototype[Ea] = function () {
          return uc(this);
        };
        var Eg = function Dg(b, c, d, e, f) {
          if (c == null) return new X(d, e, null, null, null);
          var g;
          g = c.key;
          g = b.a ? b.a(d, g) : b.call(null, d, g);
          if (g === 0) return (f[0] = c, null);
          if (0 > g) return (b = Dg(b, c.left, d, e, f), b != null ? c.Lb(b) : null);
          b = Dg(b, c.right, d, e, f);
          return b != null ? c.Mb(b) : null;
        }, Gg = function Fg(b, c) {
          if (b == null) return c;
          if (c == null) return b;
          if (b instanceof X) {
            if (c instanceof X) {
              var d = Fg(b.right, c.left);
              return d instanceof X ? new X(d.key, d.o, new X(b.key, b.o, b.left, d.left, null), new X(c.key, c.o, d.right, c.right, null), null) : new X(b.key, b.o, b.left, new X(c.key, c.o, d, c.right, null), null);
            }
            return new X(b.key, b.o, b.left, Fg(b.right, c), null);
          }
          if (c instanceof X) return new X(c.key, c.o, Fg(b, c.left), c.right, null);
          d = Fg(b.right, c.left);
          return d instanceof X ? new X(d.key, d.o, new Z(b.key, b.o, b.left, d.left, null), new Z(c.key, c.o, d.right, c.right, null), null) : Ag(b.key, b.o, b.left, new Z(c.key, c.o, d, c.right, null));
        }, Ig = function Hg(b, c, d, e) {
          if (c != null) {
            var f;
            f = c.key;
            f = b.a ? b.a(d, f) : b.call(null, d, f);
            if (f === 0) return (e[0] = c, Gg(c.left, c.right));
            if (0 > f) return (b = Hg(b, c.left, d, e), b != null || e[0] != null ? c.left instanceof Z ? Ag(c.key, c.o, b, c.right) : new X(c.key, c.o, b, c.right, null) : null);
            b = Hg(b, c.right, d, e);
            if (b != null || e[0] != null) if (c.right instanceof Z) if ((e = c.key, d = c.o, c = c.left, b instanceof X)) c = new X(e, d, c, b.ua(), null); else if (c instanceof Z) c = yg(e, d, c.ob(), b); else if (c instanceof X && c.right instanceof Z) c = new X(c.right.key, c.right.o, yg(c.key, c.o, c.left.ob(), c.right.left), new Z(e, d, c.right.right, b, null), null); else throw Error("red-black tree invariant violation"); else c = new X(c.key, c.o, c.left, b, null); else c = null;
            return c;
          }
          return null;
        }, Kg = function Jg(b, c, d, e) {
          var f = c.key, g = b.a ? b.a(d, f) : b.call(null, d, f);
          return g === 0 ? c.replace(f, e, c.left, c.right) : 0 > g ? c.replace(f, c.o, Jg(b, c.left, d, e), c.right) : c.replace(f, c.o, c.left, Jg(b, c.right, d, e));
        };
        function Lg(a, b, c, d, e) {
          this.aa = a;
          this.na = b;
          this.g = c;
          this.k = d;
          this.p = e;
          this.j = 418776847;
          this.q = 8192;
        }
        k = Lg.prototype;
        k.toString = function () {
          return ec(this);
        };
        function Mg(a, b) {
          for (var c = a.na; ; ) if (c != null) {
            var d;
            d = c.key;
            d = a.aa.a ? a.aa.a(b, d) : a.aa.call(null, b, d);
            if (d === 0) return c;
            c = 0 > d ? c.left : c.right;
          } else return null;
        }
        k.t = function (a, b) {
          return $a.c(this, b, null);
        };
        k.s = function (a, b, c) {
          a = Mg(this, b);
          return a != null ? a.o : c;
        };
        k.gb = function (a, b, c) {
          return this.na != null ? Cg(this.na, b, c) : c;
        };
        k.H = function () {
          return this.k;
        };
        k.L = function () {
          return this.g;
        };
        k.ab = function () {
          return 0 < this.g ? xg(this.na, false, this.g) : null;
        };
        k.B = function () {
          var a = this.p;
          return a != null ? a : this.p = a = xc(this);
        };
        k.A = function (a, b) {
          return Pf(this, b);
        };
        k.J = function () {
          return new Lg(this.aa, null, 0, this.k, 0);
        };
        k.wb = function (a, b) {
          var c = [null], d = Ig(this.aa, this.na, b, c);
          return d == null ? R.a(c, 0) == null ? this : new Lg(this.aa, null, 0, this.k, null) : new Lg(this.aa, d.ua(), this.g - 1, this.k, null);
        };
        k.Ka = function (a, b, c) {
          a = [null];
          var d = Eg(this.aa, this.na, b, c, a);
          return d == null ? (a = R.a(a, 0), sc.a(c, a.o) ? this : new Lg(this.aa, Kg(this.aa, this.na, b, c), this.g, this.k, null)) : new Lg(this.aa, d.ua(), this.g + 1, this.k, null);
        };
        k.rb = function (a, b) {
          return Mg(this, b) != null;
        };
        k.D = function () {
          return 0 < this.g ? xg(this.na, true, this.g) : null;
        };
        k.F = function (a, b) {
          return new Lg(this.aa, this.na, this.g, b, this.p);
        };
        k.G = function (a, b) {
          if (ed(b)) return cb(this, C.a(b, 0), C.a(b, 1));
          for (var c = this, d = D(b); ; ) {
            if (d == null) return c;
            var e = G(d);
            if (ed(e)) (c = cb(c, C.a(e, 0), C.a(e, 1)), d = K(d)); else throw Error("conj on a map takes map entries or seqables of map entries");
          }
        };
        k.call = (function () {
          var a = null, a = function (a2, c, d) {
            switch (arguments.length) {
              case 2:
                return this.t(null, c);
              case 3:
                return this.s(null, c, d);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          a.a = function (a2, c) {
            return this.t(null, c);
          };
          a.c = function (a2, c, d) {
            return this.s(null, c, d);
          };
          return a;
        })();
        k.apply = function (a, b) {
          return this.call.apply(this, [this].concat(Fa(b)));
        };
        k.b = function (a) {
          return this.t(null, a);
        };
        k.a = function (a, b) {
          return this.s(null, a, b);
        };
        k.Hb = function (a, b) {
          return 0 < this.g ? xg(this.na, b, this.g) : null;
        };
        k.Ib = function (a, b, c) {
          if (0 < this.g) {
            a = null;
            for (var d = this.na; ; ) if (d != null) {
              var e;
              e = d.key;
              e = this.aa.a ? this.aa.a(b, e) : this.aa.call(null, b, e);
              if (e === 0) return new wg(null, Nc.a(a, d), c, -1, null);
              t(c) ? 0 > e ? (a = Nc.a(a, d), d = d.left) : d = d.right : 0 < e ? (a = Nc.a(a, d), d = d.right) : d = d.left;
            } else return a == null ? null : new wg(null, a, c, -1, null);
          } else return null;
        };
        k.Gb = function (a, b) {
          return Yf.b ? Yf.b(b) : Yf.call(null, b);
        };
        k.Fb = function () {
          return this.aa;
        };
        var Ng = new Lg(od, null, 0, null, 0);
        Lg.prototype[Ea] = function () {
          return uc(this);
        };
        var Og = (function () {
          function a(a2) {
            var d = null;
            if (0 < arguments.length) {
              for (var d = 0, e = Array(arguments.length - 0); d < e.length; ) (e[d] = arguments[d + 0], ++d);
              d = new F(e, 0);
            }
            return b.call(this, d);
          }
          function b(a2) {
            a2 = D(a2);
            for (var b2 = Ob(Qc); ; ) if (a2) {
              var e = K(K(a2)), b2 = ee.c(b2, G(a2), Lc(a2));
              a2 = e;
            } else return Qb(b2);
          }
          a.i = 0;
          a.f = function (a2) {
            a2 = D(a2);
            return b(a2);
          };
          a.d = b;
          return a;
        })(), Pg = (function () {
          function a(a2) {
            var d = null;
            if (0 < arguments.length) {
              for (var d = 0, e = Array(arguments.length - 0); d < e.length; ) (e[d] = arguments[d + 0], ++d);
              d = new F(e, 0);
            }
            return b.call(this, d);
          }
          function b(a2) {
            a: {
              a2 = T.a(Ha, a2);
              for (var b2 = a2.length, e = 0, f = Ob(Uf); ; ) if (e < b2) var g = e + 2, f = Rb(f, a2[e], a2[e + 1]), e = g; else {
                a2 = Qb(f);
                break a;
              }
              a2 = void 0;
            }
            return a2;
          }
          a.i = 0;
          a.f = function (a2) {
            a2 = D(a2);
            return b(a2);
          };
          a.d = b;
          return a;
        })(), Qg = (function () {
          function a(a2) {
            var d = null;
            if (0 < arguments.length) {
              for (var d = 0, e = Array(arguments.length - 0); d < e.length; ) (e[d] = arguments[d + 0], ++d);
              d = new F(e, 0);
            }
            return b.call(this, d);
          }
          function b(a2) {
            a2 = D(a2);
            for (var b2 = Ng; ; ) if (a2) {
              var e = K(K(a2)), b2 = Rc.c(b2, G(a2), Lc(a2));
              a2 = e;
            } else return b2;
          }
          a.i = 0;
          a.f = function (a2) {
            a2 = D(a2);
            return b(a2);
          };
          a.d = b;
          return a;
        })(), Rg = (function () {
          function a(a2, d) {
            var e = null;
            if (1 < arguments.length) {
              for (var e = 0, f = Array(arguments.length - 1); e < f.length; ) (f[e] = arguments[e + 1], ++e);
              e = new F(f, 0);
            }
            return b.call(this, a2, e);
          }
          function b(a2, b2) {
            for (var e = D(b2), f = new Lg(qd(a2), null, 0, null, 0); ; ) if (e) var g = K(K(e)), f = Rc.c(f, G(e), Lc(e)), e = g; else return f;
          }
          a.i = 1;
          a.f = function (a2) {
            var d = G(a2);
            a2 = H(a2);
            return b(d, a2);
          };
          a.d = b;
          return a;
        })();
        function Sg(a, b) {
          this.Y = a;
          this.Z = b;
          this.q = 0;
          this.j = 32374988;
        }
        k = Sg.prototype;
        k.toString = function () {
          return ec(this);
        };
        k.H = function () {
          return this.Z;
        };
        k.T = function () {
          var a = this.Y, a = (a ? a.j & 128 || a.xb || (a.j ? 0 : w(Xa, a)) : w(Xa, a)) ? this.Y.T(null) : K(this.Y);
          return a == null ? null : new Sg(a, this.Z);
        };
        k.B = function () {
          return wc(this);
        };
        k.A = function (a, b) {
          return Ic(this, b);
        };
        k.J = function () {
          return O(J, this.Z);
        };
        k.R = function (a, b) {
          return P.a(b, this);
        };
        k.O = function (a, b, c) {
          return P.c(b, c, this);
        };
        k.N = function () {
          return this.Y.N(null).hb(null);
        };
        k.S = function () {
          var a = this.Y, a = (a ? a.j & 128 || a.xb || (a.j ? 0 : w(Xa, a)) : w(Xa, a)) ? this.Y.T(null) : K(this.Y);
          return a != null ? new Sg(a, this.Z) : J;
        };
        k.D = function () {
          return this;
        };
        k.F = function (a, b) {
          return new Sg(this.Y, b);
        };
        k.G = function (a, b) {
          return M(b, this);
        };
        Sg.prototype[Ea] = function () {
          return uc(this);
        };
        function Tg(a) {
          return (a = D(a)) ? new Sg(a, null) : null;
        }
        function Yf(a) {
          return hb(a);
        }
        function Ug(a, b) {
          this.Y = a;
          this.Z = b;
          this.q = 0;
          this.j = 32374988;
        }
        k = Ug.prototype;
        k.toString = function () {
          return ec(this);
        };
        k.H = function () {
          return this.Z;
        };
        k.T = function () {
          var a = this.Y, a = (a ? a.j & 128 || a.xb || (a.j ? 0 : w(Xa, a)) : w(Xa, a)) ? this.Y.T(null) : K(this.Y);
          return a == null ? null : new Ug(a, this.Z);
        };
        k.B = function () {
          return wc(this);
        };
        k.A = function (a, b) {
          return Ic(this, b);
        };
        k.J = function () {
          return O(J, this.Z);
        };
        k.R = function (a, b) {
          return P.a(b, this);
        };
        k.O = function (a, b, c) {
          return P.c(b, c, this);
        };
        k.N = function () {
          return this.Y.N(null).ib(null);
        };
        k.S = function () {
          var a = this.Y, a = (a ? a.j & 128 || a.xb || (a.j ? 0 : w(Xa, a)) : w(Xa, a)) ? this.Y.T(null) : K(this.Y);
          return a != null ? new Ug(a, this.Z) : J;
        };
        k.D = function () {
          return this;
        };
        k.F = function (a, b) {
          return new Ug(this.Y, b);
        };
        k.G = function (a, b) {
          return M(b, this);
        };
        Ug.prototype[Ea] = function () {
          return uc(this);
        };
        function Vg(a) {
          return (a = D(a)) ? new Ug(a, null) : null;
        }
        function Zf(a) {
          return ib(a);
        }
        var Wg = (function () {
          function a(a2) {
            var d = null;
            if (0 < arguments.length) {
              for (var d = 0, e = Array(arguments.length - 0); d < e.length; ) (e[d] = arguments[d + 0], ++d);
              d = new F(e, 0);
            }
            return b.call(this, d);
          }
          function b(a2) {
            return t(Fe(ud, a2)) ? A.a(function (a3, b2) {
              return Nc.a(t(a3) ? a3 : Uf, b2);
            }, a2) : null;
          }
          a.i = 0;
          a.f = function (a2) {
            a2 = D(a2);
            return b(a2);
          };
          a.d = b;
          return a;
        })(), Xg = (function () {
          function a(a2, d) {
            var e = null;
            if (1 < arguments.length) {
              for (var e = 0, f = Array(arguments.length - 1); e < f.length; ) (f[e] = arguments[e + 1], ++e);
              e = new F(f, 0);
            }
            return b.call(this, a2, e);
          }
          function b(a2, b2) {
            return t(Fe(ud, b2)) ? A.a((function (a3) {
              return function (b3, c) {
                return A.c(a3, t(b3) ? b3 : Uf, D(c));
              };
            })(function (b3, d) {
              var g = G(d), h = Lc(d);
              return nd(b3, g) ? Rc.c(b3, g, (function () {
                var d2 = S.a(b3, g);
                return a2.a ? a2.a(d2, h) : a2.call(null, d2, h);
              })()) : Rc.c(b3, g, h);
            }), b2) : null;
          }
          a.i = 1;
          a.f = function (a2) {
            var d = G(a2);
            a2 = H(a2);
            return b(d, a2);
          };
          a.d = b;
          return a;
        })();
        function Yg(a, b) {
          for (var c = Uf, d = D(b); ; ) if (d) var e = G(d), f = S.c(a, e, Zg), c = je.a(f, Zg) ? Rc.c(c, e, f) : c, d = K(d); else return O(c, Vc(a));
        }
        function $g(a, b, c) {
          this.k = a;
          this.Wa = b;
          this.p = c;
          this.j = 15077647;
          this.q = 8196;
        }
        k = $g.prototype;
        k.toString = function () {
          return ec(this);
        };
        k.t = function (a, b) {
          return $a.c(this, b, null);
        };
        k.s = function (a, b, c) {
          return bb(this.Wa, b) ? b : c;
        };
        k.H = function () {
          return this.k;
        };
        k.L = function () {
          return Ma(this.Wa);
        };
        k.B = function () {
          var a = this.p;
          return a != null ? a : this.p = a = xc(this);
        };
        k.A = function (a, b) {
          return ad(b) && Q(this) === Q(b) && Ee((function (a2) {
            return function (b2) {
              return nd(a2, b2);
            };
          })(this), b);
        };
        k.$a = function () {
          return new ah(Ob(this.Wa));
        };
        k.J = function () {
          return O(bh, this.k);
        };
        k.Eb = function (a, b) {
          return new $g(this.k, eb(this.Wa, b), null);
        };
        k.D = function () {
          return Tg(this.Wa);
        };
        k.F = function (a, b) {
          return new $g(b, this.Wa, this.p);
        };
        k.G = function (a, b) {
          return new $g(this.k, Rc.c(this.Wa, b, null), null);
        };
        k.call = (function () {
          var a = null, a = function (a2, c, d) {
            switch (arguments.length) {
              case 2:
                return this.t(null, c);
              case 3:
                return this.s(null, c, d);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          a.a = function (a2, c) {
            return this.t(null, c);
          };
          a.c = function (a2, c, d) {
            return this.s(null, c, d);
          };
          return a;
        })();
        k.apply = function (a, b) {
          return this.call.apply(this, [this].concat(Fa(b)));
        };
        k.b = function (a) {
          return this.t(null, a);
        };
        k.a = function (a, b) {
          return this.s(null, a, b);
        };
        var bh = new $g(null, Uf, 0);
        $g.prototype[Ea] = function () {
          return uc(this);
        };
        function ah(a) {
          this.ma = a;
          this.j = 259;
          this.q = 136;
        }
        k = ah.prototype;
        k.call = (function () {
          function a(a2, b2, c2) {
            return $a.c(this.ma, b2, jd) === jd ? c2 : b2;
          }
          function b(a2, b2) {
            return $a.c(this.ma, b2, jd) === jd ? null : b2;
          }
          var c = null, c = function (c2, e, f) {
            switch (arguments.length) {
              case 2:
                return b.call(this, c2, e);
              case 3:
                return a.call(this, c2, e, f);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.a = b;
          c.c = a;
          return c;
        })();
        k.apply = function (a, b) {
          return this.call.apply(this, [this].concat(Fa(b)));
        };
        k.b = function (a) {
          return $a.c(this.ma, a, jd) === jd ? null : a;
        };
        k.a = function (a, b) {
          return $a.c(this.ma, a, jd) === jd ? b : a;
        };
        k.t = function (a, b) {
          return $a.c(this, b, null);
        };
        k.s = function (a, b, c) {
          return $a.c(this.ma, b, jd) === jd ? c : b;
        };
        k.L = function () {
          return Q(this.ma);
        };
        k.Tb = function (a, b) {
          this.ma = fe.a(this.ma, b);
          return this;
        };
        k.Sa = function (a, b) {
          this.ma = ee.c(this.ma, b, null);
          return this;
        };
        k.Ta = function () {
          return new $g(null, Qb(this.ma), null);
        };
        function ch(a, b, c) {
          this.k = a;
          this.ja = b;
          this.p = c;
          this.j = 417730831;
          this.q = 8192;
        }
        k = ch.prototype;
        k.toString = function () {
          return ec(this);
        };
        k.t = function (a, b) {
          return $a.c(this, b, null);
        };
        k.s = function (a, b, c) {
          a = Mg(this.ja, b);
          return a != null ? a.key : c;
        };
        k.H = function () {
          return this.k;
        };
        k.L = function () {
          return Q(this.ja);
        };
        k.ab = function () {
          return 0 < Q(this.ja) ? Oe.a(Yf, Gb(this.ja)) : null;
        };
        k.B = function () {
          var a = this.p;
          return a != null ? a : this.p = a = xc(this);
        };
        k.A = function (a, b) {
          return ad(b) && Q(this) === Q(b) && Ee((function (a2) {
            return function (b2) {
              return nd(a2, b2);
            };
          })(this), b);
        };
        k.J = function () {
          return new ch(this.k, Na(this.ja), 0);
        };
        k.Eb = function (a, b) {
          return new ch(this.k, Sc.a(this.ja, b), null);
        };
        k.D = function () {
          return Tg(this.ja);
        };
        k.F = function (a, b) {
          return new ch(b, this.ja, this.p);
        };
        k.G = function (a, b) {
          return new ch(this.k, Rc.c(this.ja, b, null), null);
        };
        k.call = (function () {
          var a = null, a = function (a2, c, d) {
            switch (arguments.length) {
              case 2:
                return this.t(null, c);
              case 3:
                return this.s(null, c, d);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          a.a = function (a2, c) {
            return this.t(null, c);
          };
          a.c = function (a2, c, d) {
            return this.s(null, c, d);
          };
          return a;
        })();
        k.apply = function (a, b) {
          return this.call.apply(this, [this].concat(Fa(b)));
        };
        k.b = function (a) {
          return this.t(null, a);
        };
        k.a = function (a, b) {
          return this.s(null, a, b);
        };
        k.Hb = function (a, b) {
          return Oe.a(Yf, Hb(this.ja, b));
        };
        k.Ib = function (a, b, c) {
          return Oe.a(Yf, Ib(this.ja, b, c));
        };
        k.Gb = function (a, b) {
          return b;
        };
        k.Fb = function () {
          return Kb(this.ja);
        };
        var eh = new ch(null, Ng, 0);
        ch.prototype[Ea] = function () {
          return uc(this);
        };
        function fh(a) {
          a = D(a);
          if (a == null) return bh;
          if (a instanceof F && a.m === 0) {
            a = a.e;
            a: {
              for (var b = 0, c = Ob(bh); ; ) if (b < a.length) var d = b + 1, c = c.Sa(null, a[b]), b = d; else {
                a = c;
                break a;
              }
              a = void 0;
            }
            return a.Ta(null);
          }
          for (d = Ob(bh); ; ) if (a != null) (b = a.T(null), d = d.Sa(null, a.N(null)), a = b); else return d.Ta(null);
        }
        var gh = (function () {
          function a(a2) {
            var d = null;
            if (0 < arguments.length) {
              for (var d = 0, e = Array(arguments.length - 0); d < e.length; ) (e[d] = arguments[d + 0], ++d);
              d = new F(e, 0);
            }
            return b.call(this, d);
          }
          function b(a2) {
            return A.c(Ra, eh, a2);
          }
          a.i = 0;
          a.f = function (a2) {
            a2 = D(a2);
            return b(a2);
          };
          a.d = b;
          return a;
        })(), hh = (function () {
          function a(a2, d) {
            var e = null;
            if (1 < arguments.length) {
              for (var e = 0, f = Array(arguments.length - 1); e < f.length; ) (f[e] = arguments[e + 1], ++e);
              e = new F(f, 0);
            }
            return b.call(this, a2, e);
          }
          function b(a2, b2) {
            return A.c(Ra, new ch(null, Rg(a2), 0), b2);
          }
          a.i = 1;
          a.f = function (a2) {
            var d = G(a2);
            a2 = H(a2);
            return b(d, a2);
          };
          a.d = b;
          return a;
        })();
        function Od(a) {
          if (a && (a.q & 4096 || a.lc)) return a.name;
          if (typeof a === "string") return a;
          throw Error([z("Doesn't support name: "), z(a)].join(""));
        }
        var ih = (function () {
          function a(a2, b2, c2) {
            return (a2.b ? a2.b(b2) : a2.call(null, b2)) > (a2.b ? a2.b(c2) : a2.call(null, c2)) ? b2 : c2;
          }
          var b = null, c = (function () {
            function a2(b2, d, h, l) {
              var m = null;
              if (3 < arguments.length) {
                for (var m = 0, p = Array(arguments.length - 3); m < p.length; ) (p[m] = arguments[m + 3], ++m);
                m = new F(p, 0);
              }
              return c2.call(this, b2, d, h, m);
            }
            function c2(a3, d, e, l) {
              return A.c(function (c3, d2) {
                return b.c(a3, c3, d2);
              }, b.c(a3, d, e), l);
            }
            a2.i = 3;
            a2.f = function (a3) {
              var b2 = G(a3);
              a3 = K(a3);
              var d = G(a3);
              a3 = K(a3);
              var l = G(a3);
              a3 = H(a3);
              return c2(b2, d, l, a3);
            };
            a2.d = c2;
            return a2;
          })(), b = function (b2, e, f, g) {
            switch (arguments.length) {
              case 2:
                return e;
              case 3:
                return a.call(this, b2, e, f);
              default:
                var h = null;
                if (3 < arguments.length) {
                  for (var h = 0, l = Array(arguments.length - 3); h < l.length; ) (l[h] = arguments[h + 3], ++h);
                  h = new F(l, 0);
                }
                return c.d(b2, e, f, h);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          b.i = 3;
          b.f = c.f;
          b.a = function (a2, b2) {
            return b2;
          };
          b.c = a;
          b.d = c.d;
          return b;
        })();
        function jh(a) {
          this.e = a;
        }
        jh.prototype.add = function (a) {
          return this.e.push(a);
        };
        jh.prototype.size = function () {
          return this.e.length;
        };
        jh.prototype.clear = function () {
          return this.e = [];
        };
        var kh = (function () {
          function a(a2, b2, c2) {
            return new V(null, function () {
              var h = D(c2);
              return h ? M(Pe.a(a2, h), d.c(a2, b2, Qe.a(b2, h))) : null;
            }, null, null);
          }
          function b(a2, b2) {
            return d.c(a2, a2, b2);
          }
          function c(a2) {
            return function (b2) {
              return (function (c2) {
                return (function () {
                  function d2(h, l2) {
                    c2.add(l2);
                    if (a2 === c2.size()) {
                      var m2 = zf(c2.e);
                      c2.clear();
                      return b2.a ? b2.a(h, m2) : b2.call(null, h, m2);
                    }
                    return h;
                  }
                  function l(a3) {
                    if (!t(c2.e.length === 0)) {
                      var d3 = zf(c2.e);
                      c2.clear();
                      a3 = Bc(b2.a ? b2.a(a3, d3) : b2.call(null, a3, d3));
                    }
                    return b2.b ? b2.b(a3) : b2.call(null, a3);
                  }
                  function m() {
                    return b2.l ? b2.l() : b2.call(null);
                  }
                  var p = null, p = function (a3, b3) {
                    switch (arguments.length) {
                      case 0:
                        return m.call(this);
                      case 1:
                        return l.call(this, a3);
                      case 2:
                        return d2.call(this, a3, b3);
                    }
                    throw Error("Invalid arity: " + arguments.length);
                  };
                  p.l = m;
                  p.b = l;
                  p.a = d2;
                  return p;
                })();
              })(new jh([]));
            };
          }
          var d = null, d = function (d2, f, g) {
            switch (arguments.length) {
              case 1:
                return c.call(this, d2);
              case 2:
                return b.call(this, d2, f);
              case 3:
                return a.call(this, d2, f, g);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          d.b = c;
          d.a = b;
          d.c = a;
          return d;
        })(), lh = (function () {
          function a(a2, b2) {
            return new V(null, function () {
              var f = D(b2);
              if (f) {
                var g;
                g = G(f);
                g = a2.b ? a2.b(g) : a2.call(null, g);
                f = t(g) ? M(G(f), c.a(a2, H(f))) : null;
              } else f = null;
              return f;
            }, null, null);
          }
          function b(a2) {
            return function (b2) {
              return (function () {
                function c2(f, g2) {
                  return t(a2.b ? a2.b(g2) : a2.call(null, g2)) ? b2.a ? b2.a(f, g2) : b2.call(null, f, g2) : new yc(f);
                }
                function g(a3) {
                  return b2.b ? b2.b(a3) : b2.call(null, a3);
                }
                function h() {
                  return b2.l ? b2.l() : b2.call(null);
                }
                var l = null, l = function (a3, b3) {
                  switch (arguments.length) {
                    case 0:
                      return h.call(this);
                    case 1:
                      return g.call(this, a3);
                    case 2:
                      return c2.call(this, a3, b3);
                  }
                  throw Error("Invalid arity: " + arguments.length);
                };
                l.l = h;
                l.b = g;
                l.a = c2;
                return l;
              })();
            };
          }
          var c = null, c = function (c2, e) {
            switch (arguments.length) {
              case 1:
                return b.call(this, c2);
              case 2:
                return a.call(this, c2, e);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.b = b;
          c.a = a;
          return c;
        })();
        function mh(a, b, c) {
          return function (d) {
            var e = Kb(a);
            d = Jb(a, d);
            e = e.a ? e.a(d, c) : e.call(null, d, c);
            return b.a ? b.a(e, 0) : b.call(null, e, 0);
          };
        }
        var nh = (function () {
          function a(a2, b2, c2, g, h) {
            var l = Ib(a2, c2, true);
            if (t(l)) {
              var m = R.c(l, 0, null);
              return lh.a(mh(a2, g, h), t(mh(a2, b2, c2).call(null, m)) ? l : K(l));
            }
            return null;
          }
          function b(a2, b2, c2) {
            var g = mh(a2, b2, c2), h;
            a: {
              h = [Ad, Bd];
              var l = h.length;
              if (l <= Vf) for (var m = 0, p = Ob(Uf); ; ) if (m < l) var q = m + 1, p = Rb(p, h[m], null), m = q; else {
                h = new $g(null, Qb(p), null);
                break a;
              } else for ((m = 0, p = Ob(bh)); ; ) if (m < l) (q = m + 1, p = Pb(p, h[m]), m = q); else {
                h = Qb(p);
                break a;
              }
              h = void 0;
            }
            return t(h.call(null, b2)) ? (a2 = Ib(a2, c2, true), t(a2) ? (b2 = R.c(a2, 0, null), t(g.b ? g.b(b2) : g.call(null, b2)) ? a2 : K(a2)) : null) : lh.a(g, Hb(a2, true));
          }
          var c = null, c = function (c2, e, f, g, h) {
            switch (arguments.length) {
              case 3:
                return b.call(this, c2, e, f);
              case 5:
                return a.call(this, c2, e, f, g, h);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.c = b;
          c.r = a;
          return c;
        })();
        function oh(a, b, c) {
          this.m = a;
          this.end = b;
          this.step = c;
        }
        oh.prototype.ga = function () {
          return 0 < this.step ? this.m < this.end : this.m > this.end;
        };
        oh.prototype.next = function () {
          var a = this.m;
          this.m += this.step;
          return a;
        };
        function ph(a, b, c, d, e) {
          this.k = a;
          this.start = b;
          this.end = c;
          this.step = d;
          this.p = e;
          this.j = 32375006;
          this.q = 8192;
        }
        k = ph.prototype;
        k.toString = function () {
          return ec(this);
        };
        k.Q = function (a, b) {
          if (b < Ma(this)) return this.start + b * this.step;
          if (this.start > this.end && this.step === 0) return this.start;
          throw Error("Index out of bounds");
        };
        k.$ = function (a, b, c) {
          return b < Ma(this) ? this.start + b * this.step : this.start > this.end && this.step === 0 ? this.start : c;
        };
        k.vb = true;
        k.fb = function () {
          return new oh(this.start, this.end, this.step);
        };
        k.H = function () {
          return this.k;
        };
        k.T = function () {
          return 0 < this.step ? this.start + this.step < this.end ? new ph(this.k, this.start + this.step, this.end, this.step, null) : null : this.start + this.step > this.end ? new ph(this.k, this.start + this.step, this.end, this.step, null) : null;
        };
        k.L = function () {
          if (Aa(Cb(this))) return 0;
          var a = (this.end - this.start) / this.step;
          return Math.ceil.b ? Math.ceil.b(a) : Math.ceil.call(null, a);
        };
        k.B = function () {
          var a = this.p;
          return a != null ? a : this.p = a = wc(this);
        };
        k.A = function (a, b) {
          return Ic(this, b);
        };
        k.J = function () {
          return O(J, this.k);
        };
        k.R = function (a, b) {
          return Cc.a(this, b);
        };
        k.O = function (a, b, c) {
          for (a = this.start; ; ) if (0 < this.step ? a < this.end : a > this.end) {
            var d = a;
            c = b.a ? b.a(c, d) : b.call(null, c, d);
            if (Ac(c)) return (b = c, L.b ? L.b(b) : L.call(null, b));
            a += this.step;
          } else return c;
        };
        k.N = function () {
          return Cb(this) == null ? null : this.start;
        };
        k.S = function () {
          return Cb(this) != null ? new ph(this.k, this.start + this.step, this.end, this.step, null) : J;
        };
        k.D = function () {
          return 0 < this.step ? this.start < this.end ? this : null : this.start > this.end ? this : null;
        };
        k.F = function (a, b) {
          return new ph(b, this.start, this.end, this.step, this.p);
        };
        k.G = function (a, b) {
          return M(b, this);
        };
        ph.prototype[Ea] = function () {
          return uc(this);
        };
        var qh = (function () {
          function a(a2, b2, c2) {
            return new ph(null, a2, b2, c2, null);
          }
          function b(a2, b2) {
            return e.c(a2, b2, 1);
          }
          function c(a2) {
            return e.c(0, a2, 1);
          }
          function d() {
            return e.c(0, Number.MAX_VALUE, 1);
          }
          var e = null, e = function (e2, g, h) {
            switch (arguments.length) {
              case 0:
                return d.call(this);
              case 1:
                return c.call(this, e2);
              case 2:
                return b.call(this, e2, g);
              case 3:
                return a.call(this, e2, g, h);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          e.l = d;
          e.b = c;
          e.a = b;
          e.c = a;
          return e;
        })(), rh = (function () {
          function a(a2, b2) {
            return new V(null, function () {
              var f = D(b2);
              return f ? M(G(f), c.a(a2, Qe.a(a2, f))) : null;
            }, null, null);
          }
          function b(a2) {
            return function (b2) {
              return (function (c2) {
                return (function () {
                  function g(g2, h2) {
                    var l2 = c2.bb(0, c2.Ra(null) + 1), m2 = Cd(l2, a2);
                    return l2 - a2 * m2 === 0 ? b2.a ? b2.a(g2, h2) : b2.call(null, g2, h2) : g2;
                  }
                  function h(a3) {
                    return b2.b ? b2.b(a3) : b2.call(null, a3);
                  }
                  function l() {
                    return b2.l ? b2.l() : b2.call(null);
                  }
                  var m = null, m = function (a3, b3) {
                    switch (arguments.length) {
                      case 0:
                        return l.call(this);
                      case 1:
                        return h.call(this, a3);
                      case 2:
                        return g.call(this, a3, b3);
                    }
                    throw Error("Invalid arity: " + arguments.length);
                  };
                  m.l = l;
                  m.b = h;
                  m.a = g;
                  return m;
                })();
              })(new Me(-1));
            };
          }
          var c = null, c = function (c2, e) {
            switch (arguments.length) {
              case 1:
                return b.call(this, c2);
              case 2:
                return a.call(this, c2, e);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.b = b;
          c.a = a;
          return c;
        })(), th = (function () {
          function a(a2, b2) {
            return new V(null, function () {
              var f = D(b2);
              if (f) {
                var g = G(f), h = a2.b ? a2.b(g) : a2.call(null, g), g = M(g, lh.a((function (b3, c2) {
                  return function (b4) {
                    return sc.a(c2, a2.b ? a2.b(b4) : a2.call(null, b4));
                  };
                })(g, h, f, f), K(f)));
                return M(g, c.a(a2, D(Qe.a(Q(g), f))));
              }
              return null;
            }, null, null);
          }
          function b(a2) {
            return function (b2) {
              return (function (c2, g) {
                return (function () {
                  function h(h2, l2) {
                    var m2 = L.b ? L.b(g) : L.call(null, g), p2 = a2.b ? a2.b(l2) : a2.call(null, l2);
                    ac(g, p2);
                    if (Nd(m2, sh) || sc.a(p2, m2)) return (c2.add(l2), h2);
                    m2 = zf(c2.e);
                    c2.clear();
                    m2 = b2.a ? b2.a(h2, m2) : b2.call(null, h2, m2);
                    Ac(m2) || c2.add(l2);
                    return m2;
                  }
                  function l(a3) {
                    if (!t(c2.e.length === 0)) {
                      var d = zf(c2.e);
                      c2.clear();
                      a3 = Bc(b2.a ? b2.a(a3, d) : b2.call(null, a3, d));
                    }
                    return b2.b ? b2.b(a3) : b2.call(null, a3);
                  }
                  function m() {
                    return b2.l ? b2.l() : b2.call(null);
                  }
                  var p = null, p = function (a3, b3) {
                    switch (arguments.length) {
                      case 0:
                        return m.call(this);
                      case 1:
                        return l.call(this, a3);
                      case 2:
                        return h.call(this, a3, b3);
                    }
                    throw Error("Invalid arity: " + arguments.length);
                  };
                  p.l = m;
                  p.b = l;
                  p.a = h;
                  return p;
                })();
              })(new jh([]), new Me(sh));
            };
          }
          var c = null, c = function (c2, e) {
            switch (arguments.length) {
              case 1:
                return b.call(this, c2);
              case 2:
                return a.call(this, c2, e);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.b = b;
          c.a = a;
          return c;
        })(), uh = (function () {
          function a(a2, b2) {
            for (; ; ) if (D(b2) && 0 < a2) {
              var c2 = a2 - 1, g = K(b2);
              a2 = c2;
              b2 = g;
            } else return null;
          }
          function b(a2) {
            for (; ; ) if (D(a2)) a2 = K(a2); else return null;
          }
          var c = null, c = function (c2, e) {
            switch (arguments.length) {
              case 1:
                return b.call(this, c2);
              case 2:
                return a.call(this, c2, e);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.b = b;
          c.a = a;
          return c;
        })(), vh = (function () {
          function a(a2, b2) {
            uh.a(a2, b2);
            return b2;
          }
          function b(a2) {
            uh.b(a2);
            return a2;
          }
          var c = null, c = function (c2, e) {
            switch (arguments.length) {
              case 1:
                return b.call(this, c2);
              case 2:
                return a.call(this, c2, e);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.b = b;
          c.a = a;
          return c;
        })();
        function wh(a, b, c, d, e, f, g) {
          var h = ma;
          try {
            ma = ma == null ? null : ma - 1;
            if (ma != null && 0 > ma) return Lb(a, "#");
            Lb(a, c);
            if (D(g)) {
              var l = G(g);
              b.c ? b.c(l, a, f) : b.call(null, l, a, f);
            }
            for (var m = K(g), p = za.b(f) - 1; ; ) if (!m || p != null && p === 0) {
              D(m) && p === 0 && (Lb(a, d), Lb(a, "..."));
              break;
            } else {
              Lb(a, d);
              var q = G(m);
              c = a;
              g = f;
              b.c ? b.c(q, c, g) : b.call(null, q, c, g);
              var s = K(m);
              c = p - 1;
              m = s;
              p = c;
            }
            return Lb(a, e);
          } finally {
            ma = h;
          }
        }
        var xh = (function () {
          function a(a2, d) {
            var e = null;
            if (1 < arguments.length) {
              for (var e = 0, f = Array(arguments.length - 1); e < f.length; ) (f[e] = arguments[e + 1], ++e);
              e = new F(f, 0);
            }
            return b.call(this, a2, e);
          }
          function b(a2, b2) {
            for (var e = D(b2), f = null, g = 0, h = 0; ; ) if (h < g) {
              var l = f.Q(null, h);
              Lb(a2, l);
              h += 1;
            } else if (e = D(e)) (f = e, fd(f) ? (e = Yb(f), g = Zb(f), f = e, l = Q(e), e = g, g = l) : (l = G(f), Lb(a2, l), e = K(f), f = null, g = 0), h = 0); else return null;
          }
          a.i = 1;
          a.f = function (a2) {
            var d = G(a2);
            a2 = H(a2);
            return b(d, a2);
          };
          a.d = b;
          return a;
        })(), yh = {
          '"': '\\"',
          "\\": "\\\\",
          "\b": "\\b",
          "\f": "\\f",
          "\n": "\\n",
          "\r": "\\r",
          "	": "\\t"
        };
        function zh(a) {
          return [z('"'), z(a.replace(RegExp('[\\\\"\b\f\n\r	]', "g"), function (a2) {
            return yh[a2];
          })), z('"')].join("");
        }
        var $ = function Ah(b, c, d) {
          if (b == null) return Lb(c, "nil");
          if (b === void 0) return Lb(c, "#<undefined>");
          t((function () {
            var c2 = S.a(d, wa);
            return t(c2) ? (c2 = b ? b.j & 131072 || b.kc ? true : b.j ? false : w(rb, b) : w(rb, b)) ? Vc(b) : c2 : c2;
          })()) && (Lb(c, "^"), Ah(Vc(b), c, d), Lb(c, " "));
          if (b == null) return Lb(c, "nil");
          if (b.Yb) return b.nc(c);
          if (b && (b.j & 2147483648 || b.I)) return b.v(null, c, d);
          if (Ba(b) === Boolean || typeof b === "number") return Lb(c, "" + z(b));
          if (b != null && b.constructor === Object) {
            Lb(c, "#js ");
            var e = Oe.a(function (c2) {
              return new W(null, 2, 5, uf, [Pd.b(c2), b[c2]], null);
            }, gd(b));
            return Bh.n ? Bh.n(e, Ah, c, d) : Bh.call(null, e, Ah, c, d);
          }
          return b instanceof Array ? wh(c, Ah, "#js [", " ", "]", d, b) : t(typeof b == "string") ? t(ua.b(d)) ? Lb(c, zh(b)) : Lb(c, b) : Tc(b) ? xh.d(c, Kc(["#<", "" + z(b), ">"], 0)) : b instanceof Date ? (e = function (b2, c2) {
            for (var d2 = "" + z(b2); ; ) if (Q(d2) < c2) d2 = [z("0"), z(d2)].join(""); else return d2;
          }, xh.d(c, Kc(['#inst "', "" + z(b.getUTCFullYear()), "-", e(b.getUTCMonth() + 1, 2), "-", e(b.getUTCDate(), 2), "T", e(b.getUTCHours(), 2), ":", e(b.getUTCMinutes(), 2), ":", e(b.getUTCSeconds(), 2), ".", e(b.getUTCMilliseconds(), 3), "-", '00:00"'], 0))) : b instanceof RegExp ? xh.d(c, Kc(['#"', b.source, '"'], 0)) : (b ? b.j & 2147483648 || b.I || (b.j ? 0 : w(Mb, b)) : w(Mb, b)) ? Nb(b, c, d) : xh.d(c, Kc(["#<", "" + z(b), ">"], 0));
        }, Ch = (function () {
          function a(a2) {
            var d = null;
            if (0 < arguments.length) {
              for (var d = 0, e = Array(arguments.length - 0); d < e.length; ) (e[d] = arguments[d + 0], ++d);
              d = new F(e, 0);
            }
            return b.call(this, d);
          }
          function b(a2) {
            var b2 = oa();
            if (Yc(a2)) b2 = ""; else {
              var e = z, f = new fa();
              a: {
                var g = new dc(f);
                $(G(a2), g, b2);
                a2 = D(K(a2));
                for (var h = null, l = 0, m = 0; ; ) if (m < l) {
                  var p = h.Q(null, m);
                  Lb(g, " ");
                  $(p, g, b2);
                  m += 1;
                } else if (a2 = D(a2)) (h = a2, fd(h) ? (a2 = Yb(h), l = Zb(h), h = a2, p = Q(a2), a2 = l, l = p) : (p = G(h), Lb(g, " "), $(p, g, b2), a2 = K(h), h = null, l = 0), m = 0); else break a;
              }
              b2 = "" + e(f);
            }
            return b2;
          }
          a.i = 0;
          a.f = function (a2) {
            a2 = D(a2);
            return b(a2);
          };
          a.d = b;
          return a;
        })();
        function Bh(a, b, c, d) {
          return wh(c, function (a2, c2, d2) {
            var h = hb(a2);
            b.c ? b.c(h, c2, d2) : b.call(null, h, c2, d2);
            Lb(c2, " ");
            a2 = ib(a2);
            return b.c ? b.c(a2, c2, d2) : b.call(null, a2, c2, d2);
          }, "{", ", ", "}", d, D(a));
        }
        Me.prototype.I = true;
        Me.prototype.v = function (a, b, c) {
          Lb(b, "#<Volatile: ");
          $(this.state, b, c);
          return Lb(b, ">");
        };
        F.prototype.I = true;
        F.prototype.v = function (a, b, c) {
          return wh(b, $, "(", " ", ")", c, this);
        };
        V.prototype.I = true;
        V.prototype.v = function (a, b, c) {
          return wh(b, $, "(", " ", ")", c, this);
        };
        wg.prototype.I = true;
        wg.prototype.v = function (a, b, c) {
          return wh(b, $, "(", " ", ")", c, this);
        };
        pg.prototype.I = true;
        pg.prototype.v = function (a, b, c) {
          return wh(b, $, "(", " ", ")", c, this);
        };
        Z.prototype.I = true;
        Z.prototype.v = function (a, b, c) {
          return wh(b, $, "[", " ", "]", c, this);
        };
        Rf.prototype.I = true;
        Rf.prototype.v = function (a, b, c) {
          return wh(b, $, "(", " ", ")", c, this);
        };
        ch.prototype.I = true;
        ch.prototype.v = function (a, b, c) {
          return wh(b, $, "#{", " ", "}", c, this);
        };
        Bf.prototype.I = true;
        Bf.prototype.v = function (a, b, c) {
          return wh(b, $, "(", " ", ")", c, this);
        };
        Ld.prototype.I = true;
        Ld.prototype.v = function (a, b, c) {
          return wh(b, $, "(", " ", ")", c, this);
        };
        Hc.prototype.I = true;
        Hc.prototype.v = function (a, b, c) {
          return wh(b, $, "(", " ", ")", c, this);
        };
        rg.prototype.I = true;
        rg.prototype.v = function (a, b, c) {
          return Bh(this, $, b, c);
        };
        qg.prototype.I = true;
        qg.prototype.v = function (a, b, c) {
          return wh(b, $, "(", " ", ")", c, this);
        };
        Df.prototype.I = true;
        Df.prototype.v = function (a, b, c) {
          return wh(b, $, "[", " ", "]", c, this);
        };
        Lg.prototype.I = true;
        Lg.prototype.v = function (a, b, c) {
          return Bh(this, $, b, c);
        };
        $g.prototype.I = true;
        $g.prototype.v = function (a, b, c) {
          return wh(b, $, "#{", " ", "}", c, this);
        };
        Vd.prototype.I = true;
        Vd.prototype.v = function (a, b, c) {
          return wh(b, $, "(", " ", ")", c, this);
        };
        Ug.prototype.I = true;
        Ug.prototype.v = function (a, b, c) {
          return wh(b, $, "(", " ", ")", c, this);
        };
        X.prototype.I = true;
        X.prototype.v = function (a, b, c) {
          return wh(b, $, "[", " ", "]", c, this);
        };
        W.prototype.I = true;
        W.prototype.v = function (a, b, c) {
          return wh(b, $, "[", " ", "]", c, this);
        };
        Kf.prototype.I = true;
        Kf.prototype.v = function (a, b, c) {
          return wh(b, $, "(", " ", ")", c, this);
        };
        Hd.prototype.I = true;
        Hd.prototype.v = function (a, b) {
          return Lb(b, "()");
        };
        ze.prototype.I = true;
        ze.prototype.v = function (a, b, c) {
          return wh(b, $, "(", " ", ")", c, this);
        };
        Lf.prototype.I = true;
        Lf.prototype.v = function (a, b, c) {
          return wh(b, $, "#queue [", " ", "]", c, D(this));
        };
        pa.prototype.I = true;
        pa.prototype.v = function (a, b, c) {
          return Bh(this, $, b, c);
        };
        ph.prototype.I = true;
        ph.prototype.v = function (a, b, c) {
          return wh(b, $, "(", " ", ")", c, this);
        };
        Sg.prototype.I = true;
        Sg.prototype.v = function (a, b, c) {
          return wh(b, $, "(", " ", ")", c, this);
        };
        Fd.prototype.I = true;
        Fd.prototype.v = function (a, b, c) {
          return wh(b, $, "(", " ", ")", c, this);
        };
        W.prototype.sb = true;
        W.prototype.tb = function (a, b) {
          return pd.a(this, b);
        };
        Df.prototype.sb = true;
        Df.prototype.tb = function (a, b) {
          return pd.a(this, b);
        };
        U.prototype.sb = true;
        U.prototype.tb = function (a, b) {
          return Md(this, b);
        };
        qc.prototype.sb = true;
        qc.prototype.tb = function (a, b) {
          return pc(this, b);
        };
        var Dh = (function () {
          function a(a2, d, e) {
            var f = null;
            if (2 < arguments.length) {
              for (var f = 0, g = Array(arguments.length - 2); f < g.length; ) (g[f] = arguments[f + 2], ++f);
              f = new F(g, 0);
            }
            return b.call(this, a2, d, f);
          }
          function b(a2, b2, e) {
            return a2.k = T.c(b2, a2.k, e);
          }
          a.i = 2;
          a.f = function (a2) {
            var d = G(a2);
            a2 = K(a2);
            var e = G(a2);
            a2 = H(a2);
            return b(d, e, a2);
          };
          a.d = b;
          return a;
        })();
        function Eh(a) {
          return function (b, c) {
            var d = a.a ? a.a(b, c) : a.call(null, b, c);
            return Ac(d) ? new yc(d) : d;
          };
        }
        function Ve(a) {
          return (function (b) {
            return (function () {
              function c(a2, c2) {
                return A.c(b, a2, c2);
              }
              function d(b2) {
                return a.b ? a.b(b2) : a.call(null, b2);
              }
              function e() {
                return a.l ? a.l() : a.call(null);
              }
              var f = null, f = function (a2, b2) {
                switch (arguments.length) {
                  case 0:
                    return e.call(this);
                  case 1:
                    return d.call(this, a2);
                  case 2:
                    return c.call(this, a2, b2);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              f.l = e;
              f.b = d;
              f.a = c;
              return f;
            })();
          })(Eh(a));
        }
        var Fh = (function () {
          function a(a2) {
            return Ce.a(c.l(), a2);
          }
          function b() {
            return function (a2) {
              return (function (b2) {
                return (function () {
                  function c2(f, g2) {
                    var h2 = L.b ? L.b(b2) : L.call(null, b2);
                    ac(b2, g2);
                    return sc.a(h2, g2) ? f : a2.a ? a2.a(f, g2) : a2.call(null, f, g2);
                  }
                  function g(b3) {
                    return a2.b ? a2.b(b3) : a2.call(null, b3);
                  }
                  function h() {
                    return a2.l ? a2.l() : a2.call(null);
                  }
                  var l = null, l = function (a3, b3) {
                    switch (arguments.length) {
                      case 0:
                        return h.call(this);
                      case 1:
                        return g.call(this, a3);
                      case 2:
                        return c2.call(this, a3, b3);
                    }
                    throw Error("Invalid arity: " + arguments.length);
                  };
                  l.l = h;
                  l.b = g;
                  l.a = c2;
                  return l;
                })();
              })(new Me(sh));
            };
          }
          var c = null, c = function (c2) {
            switch (arguments.length) {
              case 0:
                return b.call(this);
              case 1:
                return a.call(this, c2);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.l = b;
          c.b = a;
          return c;
        })();
        function Gh(a, b) {
          this.fa = a;
          this.Zb = b;
          this.q = 0;
          this.j = 2173173760;
        }
        Gh.prototype.v = function (a, b, c) {
          return wh(b, $, "(", " ", ")", c, this);
        };
        Gh.prototype.O = function (a, b, c) {
          return wd.n(this.fa, b, c, this.Zb);
        };
        Gh.prototype.D = function () {
          return D(Ce.a(this.fa, this.Zb));
        };
        Gh.prototype[Ea] = function () {
          return uc(this);
        };
        var Hh = {};
        function Ih(a) {
          if (a ? a.gc : a) return a.gc(a);
          var b;
          b = Ih[n(a == null ? null : a)];
          if (!b && (b = Ih._, !b)) throw x("IEncodeJS.-clj->js", a);
          return b.call(null, a);
        }
        function Jh(a) {
          return (a ? t(t(null) ? null : a.fc) || (a.yb ? 0 : w(Hh, a)) : w(Hh, a)) ? Ih(a) : typeof a === "string" || typeof a === "number" || a instanceof U || a instanceof qc ? Kh.b ? Kh.b(a) : Kh.call(null, a) : Ch.d(Kc([a], 0));
        }
        var Kh = function Lh(b) {
          if (b == null) return null;
          if (b ? t(t(null) ? null : b.fc) || (b.yb ? 0 : w(Hh, b)) : w(Hh, b)) return Ih(b);
          if (b instanceof U) return Od(b);
          if (b instanceof qc) return "" + z(b);
          if (dd(b)) {
            var c = {};
            b = D(b);
            for (var d = null, e = 0, f = 0; ; ) if (f < e) {
              var g = d.Q(null, f), h = R.c(g, 0, null), g = R.c(g, 1, null);
              c[Jh(h)] = Lh(g);
              f += 1;
            } else if (b = D(b)) (fd(b) ? (e = Yb(b), b = Zb(b), d = e, e = Q(e)) : (e = G(b), d = R.c(e, 0, null), e = R.c(e, 1, null), c[Jh(d)] = Lh(e), b = K(b), d = null, e = 0), f = 0); else break;
            return c;
          }
          if ($c(b)) {
            c = [];
            b = D(Oe.a(Lh, b));
            d = null;
            for (f = e = 0; ; ) if (f < e) (h = d.Q(null, f), c.push(h), f += 1); else if (b = D(b)) (d = b, fd(d) ? (b = Yb(d), f = Zb(d), d = b, e = Q(b), b = f) : (b = G(d), c.push(b), b = K(d), d = null, e = 0), f = 0); else break;
            return c;
          }
          return b;
        }, Mh = {};
        function Nh(a, b) {
          if (a ? a.ec : a) return a.ec(a, b);
          var c;
          c = Nh[n(a == null ? null : a)];
          if (!c && (c = Nh._, !c)) throw x("IEncodeClojure.-js->clj", a);
          return c.call(null, a, b);
        }
        var Ph = (function () {
          function a(a2) {
            return b.d(a2, Kc([new pa(null, 1, [Oh, false], null)], 0));
          }
          var b = null, c = (function () {
            function a2(c2, d) {
              var h = null;
              if (1 < arguments.length) {
                for (var h = 0, l = Array(arguments.length - 1); h < l.length; ) (l[h] = arguments[h + 1], ++h);
                h = new F(l, 0);
              }
              return b2.call(this, c2, h);
            }
            function b2(a3, c2) {
              var d = kd(c2) ? T.a(Og, c2) : c2, e = S.a(d, Oh);
              return (function (a4, b3, d2, e2) {
                return function v(f) {
                  return (f ? t(t(null) ? null : f.uc) || (f.yb ? 0 : w(Mh, f)) : w(Mh, f)) ? Nh(f, T.a(Pg, c2)) : kd(f) ? vh.b(Oe.a(v, f)) : $c(f) ? af.a(Oc(f), Oe.a(v, f)) : f instanceof Array ? zf(Oe.a(v, f)) : Ba(f) === Object ? af.a(Uf, (function () {
                    return (function (a5, b4, c3, d3) {
                      return function Pa(e3) {
                        return new V(null, (function (a6, b5, c4, d4) {
                          return function () {
                            for (; ; ) {
                              var a7 = D(e3);
                              if (a7) {
                                if (fd(a7)) {
                                  var b6 = Yb(a7), c5 = Q(b6), g = Td(c5);
                                  return (function () {
                                    for (var a8 = 0; ; ) if (a8 < c5) {
                                      var e4 = C.a(b6, a8), h2 = g, l = uf, m;
                                      m = e4;
                                      m = d4.b ? d4.b(m) : d4.call(null, m);
                                      e4 = new W(null, 2, 5, l, [m, v(f[e4])], null);
                                      h2.add(e4);
                                      a8 += 1;
                                    } else return true;
                                  })() ? Wd(g.ca(), Pa(Zb(a7))) : Wd(g.ca(), null);
                                }
                                var h = G(a7);
                                return M(new W(null, 2, 5, uf, [(function () {
                                  var a8 = h;
                                  return d4.b ? d4.b(a8) : d4.call(null, a8);
                                })(), v(f[h])], null), Pa(H(a7)));
                              }
                              return null;
                            }
                          };
                        })(a5, b4, c3, d3), null, null);
                      };
                    })(a4, b3, d2, e2)(gd(f));
                  })()) : f;
                };
              })(c2, d, e, t(e) ? Pd : z)(a3);
            }
            a2.i = 1;
            a2.f = function (a3) {
              var c2 = G(a3);
              a3 = H(a3);
              return b2(c2, a3);
            };
            a2.d = b2;
            return a2;
          })(), b = function (b2, e) {
            switch (arguments.length) {
              case 1:
                return a.call(this, b2);
              default:
                var f = null;
                if (1 < arguments.length) {
                  for (var f = 0, g = Array(arguments.length - 1); f < g.length; ) (g[f] = arguments[f + 1], ++f);
                  f = new F(g, 0);
                }
                return c.d(b2, f);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          b.i = 1;
          b.f = c.f;
          b.b = a;
          b.d = c.d;
          return b;
        })();
        var wa = new U(null, "meta", "meta", 1499536964), ya = new U(null, "dup", "dup", 556298533), sh = new U("cljs.core", "none", "cljs.core/none", 926646439), pe = new U(null, "file", "file", -1269645878), le = new U(null, "end-column", "end-column", 1425389514), sa = new U(null, "flush-on-newline", "flush-on-newline", -151457939), ne = new U(null, "column", "column", 2078222095), ua = new U(null, "readably", "readably", 1129599760), oe = new U(null, "line", "line", 212345235), za = new U(null, "print-length", "print-length", 1931866356), me = new U(null, "end-line", "end-line", 1837326455), Oh = new U(null, "keywordize-keys", "keywordize-keys", 1310784252), Zg = new U("cljs.core", "not-found", "cljs.core/not-found", -1572889185);
        function Qh(a, b) {
          var c = T.c(ih, a, b);
          return M(c, Ye.a((function (a2) {
            return function (b2) {
              return a2 === b2;
            };
          })(c), b));
        }
        var Rh = (function () {
          function a(a2, b2) {
            return Q(a2) < Q(b2) ? A.c(Nc, b2, a2) : A.c(Nc, a2, b2);
          }
          var b = null, c = (function () {
            function a2(c2, d, h) {
              var l = null;
              if (2 < arguments.length) {
                for (var l = 0, m = Array(arguments.length - 2); l < m.length; ) (m[l] = arguments[l + 2], ++l);
                l = new F(m, 0);
              }
              return b2.call(this, c2, d, l);
            }
            function b2(a3, c2, d) {
              a3 = Qh(Q, Nc.d(d, c2, Kc([a3], 0)));
              return A.c(af, G(a3), H(a3));
            }
            a2.i = 2;
            a2.f = function (a3) {
              var c2 = G(a3);
              a3 = K(a3);
              var d = G(a3);
              a3 = H(a3);
              return b2(c2, d, a3);
            };
            a2.d = b2;
            return a2;
          })(), b = function (b2, e, f) {
            switch (arguments.length) {
              case 0:
                return bh;
              case 1:
                return b2;
              case 2:
                return a.call(this, b2, e);
              default:
                var g = null;
                if (2 < arguments.length) {
                  for (var g = 0, h = Array(arguments.length - 2); g < h.length; ) (h[g] = arguments[g + 2], ++g);
                  g = new F(h, 0);
                }
                return c.d(b2, e, g);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          b.i = 2;
          b.f = c.f;
          b.l = function () {
            return bh;
          };
          b.b = function (a2) {
            return a2;
          };
          b.a = a;
          b.d = c.d;
          return b;
        })(), Sh = (function () {
          function a(a2, b2) {
            for (; ; ) if (Q(b2) < Q(a2)) {
              var c2 = a2;
              a2 = b2;
              b2 = c2;
            } else return A.c((function (a3, b3) {
              return function (a4, c3) {
                return nd(b3, c3) ? a4 : Xc.a(a4, c3);
              };
            })(a2, b2), a2, a2);
          }
          var b = null, c = (function () {
            function a2(b2, d, h) {
              var l = null;
              if (2 < arguments.length) {
                for (var l = 0, m = Array(arguments.length - 2); l < m.length; ) (m[l] = arguments[l + 2], ++l);
                l = new F(m, 0);
              }
              return c2.call(this, b2, d, l);
            }
            function c2(a3, d, e) {
              a3 = Qh(function (a4) {
                return -Q(a4);
              }, Nc.d(e, d, Kc([a3], 0)));
              return A.c(b, G(a3), H(a3));
            }
            a2.i = 2;
            a2.f = function (a3) {
              var b2 = G(a3);
              a3 = K(a3);
              var d = G(a3);
              a3 = H(a3);
              return c2(b2, d, a3);
            };
            a2.d = c2;
            return a2;
          })(), b = function (b2, e, f) {
            switch (arguments.length) {
              case 1:
                return b2;
              case 2:
                return a.call(this, b2, e);
              default:
                var g = null;
                if (2 < arguments.length) {
                  for (var g = 0, h = Array(arguments.length - 2); g < h.length; ) (h[g] = arguments[g + 2], ++g);
                  g = new F(h, 0);
                }
                return c.d(b2, e, g);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          b.i = 2;
          b.f = c.f;
          b.b = function (a2) {
            return a2;
          };
          b.a = a;
          b.d = c.d;
          return b;
        })(), Th = (function () {
          function a(a2, b2) {
            return Q(a2) < Q(b2) ? A.c(function (a3, c2) {
              return nd(b2, c2) ? Xc.a(a3, c2) : a3;
            }, a2, a2) : A.c(Xc, a2, b2);
          }
          var b = null, c = (function () {
            function a2(b2, d, h) {
              var l = null;
              if (2 < arguments.length) {
                for (var l = 0, m = Array(arguments.length - 2); l < m.length; ) (m[l] = arguments[l + 2], ++l);
                l = new F(m, 0);
              }
              return c2.call(this, b2, d, l);
            }
            function c2(a3, d, e) {
              return A.c(b, a3, Nc.a(e, d));
            }
            a2.i = 2;
            a2.f = function (a3) {
              var b2 = G(a3);
              a3 = K(a3);
              var d = G(a3);
              a3 = H(a3);
              return c2(b2, d, a3);
            };
            a2.d = c2;
            return a2;
          })(), b = function (b2, e, f) {
            switch (arguments.length) {
              case 1:
                return b2;
              case 2:
                return a.call(this, b2, e);
              default:
                var g = null;
                if (2 < arguments.length) {
                  for (var g = 0, h = Array(arguments.length - 2); g < h.length; ) (h[g] = arguments[g + 2], ++g);
                  g = new F(h, 0);
                }
                return c.d(b2, e, g);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          b.i = 2;
          b.f = c.f;
          b.b = function (a2) {
            return a2;
          };
          b.a = a;
          b.d = c.d;
          return b;
        })();
        function Uh(a, b) {
          return A.c(function (b2, d) {
            var e = R.c(d, 0, null), f = R.c(d, 1, null);
            return nd(a, e) ? Rc.c(b2, f, S.a(a, e)) : b2;
          }, T.c(Sc, a, Tg(b)), b);
        }
        function Vh(a, b) {
          return A.c(function (a2, d) {
            var e = Yg(d, b);
            return Rc.c(a2, e, Nc.a(S.c(a2, e, bh), d));
          }, Uf, a);
        }
        function Wh(a) {
          return A.c(function (a2, c) {
            var d = R.c(c, 0, null), e = R.c(c, 1, null);
            return Rc.c(a2, e, d);
          }, Uf, a);
        }
        var Xh = (function () {
          function a(a2, b2, c2) {
            a2 = Q(a2) <= Q(b2) ? new W(null, 3, 5, uf, [a2, b2, Wh(c2)], null) : new W(null, 3, 5, uf, [b2, a2, c2], null);
            b2 = R.c(a2, 0, null);
            c2 = R.c(a2, 1, null);
            var g = R.c(a2, 2, null), h = Vh(b2, Vg(g));
            return A.c((function (a3, b3, c3, d, e) {
              return function (f, g2) {
                var h2 = (function () {
                  var a4 = Uh(Yg(g2, Tg(d)), d);
                  return e.b ? e.b(a4) : e.call(null, a4);
                })();
                return t(h2) ? A.c((function () {
                  return function (a4, b4) {
                    return Nc.a(a4, Wg.d(Kc([b4, g2], 0)));
                  };
                })(h2, a3, b3, c3, d, e), f, h2) : f;
              };
            })(a2, b2, c2, g, h), bh, c2);
          }
          function b(a2, b2) {
            if (D(a2) && D(b2)) {
              var c2 = Sh.a(fh(Tg(G(a2))), fh(Tg(G(b2)))), g = Q(a2) <= Q(b2) ? new W(null, 2, 5, uf, [a2, b2], null) : new W(null, 2, 5, uf, [b2, a2], null), h = R.c(g, 0, null), l = R.c(g, 1, null), m = Vh(h, c2);
              return A.c((function (a3, b3, c3, d, e) {
                return function (f, g2) {
                  var h2 = (function () {
                    var b4 = Yg(g2, a3);
                    return e.b ? e.b(b4) : e.call(null, b4);
                  })();
                  return t(h2) ? A.c((function () {
                    return function (a4, b4) {
                      return Nc.a(a4, Wg.d(Kc([b4, g2], 0)));
                    };
                  })(h2, a3, b3, c3, d, e), f, h2) : f;
                };
              })(c2, g, h, l, m), bh, l);
            }
            return bh;
          }
          var c = null, c = function (c2, e, f) {
            switch (arguments.length) {
              case 2:
                return b.call(this, c2, e);
              case 3:
                return a.call(this, c2, e, f);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.a = b;
          c.c = a;
          return c;
        })();
        r("mori.apply", T);
        r("mori.apply.f2", T.a);
        r("mori.apply.f3", T.c);
        r("mori.apply.f4", T.n);
        r("mori.apply.f5", T.r);
        r("mori.apply.fn", T.K);
        r("mori.count", Q);
        r("mori.distinct", function (a) {
          return (function c(a2, e) {
            return new V(null, function () {
              return (function (a3, d) {
                for (; ; ) {
                  var e2 = a3, l = R.c(e2, 0, null);
                  if (e2 = D(e2)) if (nd(d, l)) (l = H(e2), e2 = d, a3 = l, d = e2); else return M(l, c(H(e2), Nc.a(d, l))); else return null;
                }
              }).call(null, a2, e);
            }, null, null);
          })(a, bh);
        });
        r("mori.empty", Oc);
        r("mori.first", G);
        r("mori.second", Lc);
        r("mori.next", K);
        r("mori.rest", H);
        r("mori.seq", D);
        r("mori.conj", Nc);
        r("mori.conj.f0", Nc.l);
        r("mori.conj.f1", Nc.b);
        r("mori.conj.f2", Nc.a);
        r("mori.conj.fn", Nc.K);
        r("mori.cons", M);
        r("mori.find", function (a, b) {
          return a != null && bd(a) && nd(a, b) ? new W(null, 2, 5, uf, [b, S.a(a, b)], null) : null;
        });
        r("mori.nth", R);
        r("mori.nth.f2", R.a);
        r("mori.nth.f3", R.c);
        r("mori.last", function (a) {
          for (; ; ) {
            var b = K(a);
            if (b != null) a = b; else return G(a);
          }
        });
        r("mori.assoc", Rc);
        r("mori.assoc.f3", Rc.c);
        r("mori.assoc.fn", Rc.K);
        r("mori.dissoc", Sc);
        r("mori.dissoc.f1", Sc.b);
        r("mori.dissoc.f2", Sc.a);
        r("mori.dissoc.fn", Sc.K);
        r("mori.getIn", cf);
        r("mori.getIn.f2", cf.a);
        r("mori.getIn.f3", cf.c);
        r("mori.updateIn", df);
        r("mori.updateIn.f3", df.c);
        r("mori.updateIn.f4", df.n);
        r("mori.updateIn.f5", df.r);
        r("mori.updateIn.f6", df.P);
        r("mori.updateIn.fn", df.K);
        r("mori.assocIn", function Yh(b, c, d) {
          var e = R.c(c, 0, null);
          return (c = Ed(c)) ? Rc.c(b, e, Yh(S.a(b, e), c, d)) : Rc.c(b, e, d);
        });
        r("mori.fnil", Ke);
        r("mori.fnil.f2", Ke.a);
        r("mori.fnil.f3", Ke.c);
        r("mori.fnil.f4", Ke.n);
        r("mori.disj", Xc);
        r("mori.disj.f1", Xc.b);
        r("mori.disj.f2", Xc.a);
        r("mori.disj.fn", Xc.K);
        r("mori.pop", function (a) {
          return a == null ? null : mb(a);
        });
        r("mori.peek", Wc);
        r("mori.hash", nc);
        r("mori.get", S);
        r("mori.get.f2", S.a);
        r("mori.get.f3", S.c);
        r("mori.hasKey", nd);
        r("mori.isEmpty", Yc);
        r("mori.reverse", Jd);
        r("mori.take", Pe);
        r("mori.take.f1", Pe.b);
        r("mori.take.f2", Pe.a);
        r("mori.drop", Qe);
        r("mori.drop.f1", Qe.b);
        r("mori.drop.f2", Qe.a);
        r("mori.takeNth", rh);
        r("mori.takeNth.f1", rh.b);
        r("mori.takeNth.f2", rh.a);
        r("mori.partition", bf);
        r("mori.partition.f2", bf.a);
        r("mori.partition.f3", bf.c);
        r("mori.partition.f4", bf.n);
        r("mori.partitionAll", kh);
        r("mori.partitionAll.f1", kh.b);
        r("mori.partitionAll.f2", kh.a);
        r("mori.partitionAll.f3", kh.c);
        r("mori.partitionBy", th);
        r("mori.partitionBy.f1", th.b);
        r("mori.partitionBy.f2", th.a);
        r("mori.iterate", function Zh(b, c) {
          return M(c, new V(null, function () {
            return Zh(b, b.b ? b.b(c) : b.call(null, c));
          }, null, null));
        });
        r("mori.into", af);
        r("mori.into.f2", af.a);
        r("mori.into.f3", af.c);
        r("mori.merge", Wg);
        r("mori.mergeWith", Xg);
        r("mori.subvec", Cf);
        r("mori.subvec.f2", Cf.a);
        r("mori.subvec.f3", Cf.c);
        r("mori.takeWhile", lh);
        r("mori.takeWhile.f1", lh.b);
        r("mori.takeWhile.f2", lh.a);
        r("mori.dropWhile", Re);
        r("mori.dropWhile.f1", Re.b);
        r("mori.dropWhile.f2", Re.a);
        r("mori.groupBy", function (a, b) {
          return ce(A.c(function (b2, d) {
            var e = a.b ? a.b(d) : a.call(null, d);
            return ee.c(b2, e, Nc.a(S.c(b2, e, Mc), d));
          }, Ob(Uf), b));
        });
        r("mori.interpose", function (a, b) {
          return Qe.a(1, Ue.a(Se.b(a), b));
        });
        r("mori.interleave", Ue);
        r("mori.interleave.f2", Ue.a);
        r("mori.interleave.fn", Ue.K);
        r("mori.concat", ae);
        r("mori.concat.f0", ae.l);
        r("mori.concat.f1", ae.b);
        r("mori.concat.f2", ae.a);
        r("mori.concat.fn", ae.K);
        function $e(a) {
          return a instanceof Array || cd(a);
        }
        r("mori.flatten", function (a) {
          return Xe.a(function (a2) {
            return !$e(a2);
          }, H(Ze(a)));
        });
        r("mori.lazySeq", function (a) {
          return new V(null, a, null, null);
        });
        r("mori.keys", Tg);
        r("mori.selectKeys", Yg);
        r("mori.vals", Vg);
        r("mori.primSeq", Jc);
        r("mori.primSeq.f1", Jc.b);
        r("mori.primSeq.f2", Jc.a);
        r("mori.map", Oe);
        r("mori.map.f1", Oe.b);
        r("mori.map.f2", Oe.a);
        r("mori.map.f3", Oe.c);
        r("mori.map.f4", Oe.n);
        r("mori.map.fn", Oe.K);
        r("mori.mapIndexed", function (a, b) {
          return (function d(b2, f) {
            return new V(null, function () {
              var g = D(f);
              if (g) {
                if (fd(g)) {
                  for (var h = Yb(g), l = Q(h), m = Td(l), p = 0; ; ) if (p < l) (Xd(m, (function () {
                    var d2 = b2 + p, f2 = C.a(h, p);
                    return a.a ? a.a(d2, f2) : a.call(null, d2, f2);
                  })()), p += 1); else break;
                  return Wd(m.ca(), d(b2 + l, Zb(g)));
                }
                return M((function () {
                  var d2 = G(g);
                  return a.a ? a.a(b2, d2) : a.call(null, b2, d2);
                })(), d(b2 + 1, H(g)));
              }
              return null;
            }, null, null);
          })(0, b);
        });
        r("mori.mapcat", We);
        r("mori.mapcat.f1", We.b);
        r("mori.mapcat.fn", We.K);
        r("mori.reduce", A);
        r("mori.reduce.f2", A.a);
        r("mori.reduce.f3", A.c);
        r("mori.reduceKV", function (a, b, c) {
          return c != null ? xb(c, a, b) : b;
        });
        r("mori.keep", Le);
        r("mori.keep.f1", Le.b);
        r("mori.keep.f2", Le.a);
        r("mori.keepIndexed", Ne);
        r("mori.keepIndexed.f1", Ne.b);
        r("mori.keepIndexed.f2", Ne.a);
        r("mori.filter", Xe);
        r("mori.filter.f1", Xe.b);
        r("mori.filter.f2", Xe.a);
        r("mori.remove", Ye);
        r("mori.remove.f1", Ye.b);
        r("mori.remove.f2", Ye.a);
        r("mori.some", Fe);
        r("mori.every", Ee);
        r("mori.equals", sc);
        r("mori.equals.f1", sc.b);
        r("mori.equals.f2", sc.a);
        r("mori.equals.fn", sc.K);
        r("mori.range", qh);
        r("mori.range.f0", qh.l);
        r("mori.range.f1", qh.b);
        r("mori.range.f2", qh.a);
        r("mori.range.f3", qh.c);
        r("mori.repeat", Se);
        r("mori.repeat.f1", Se.b);
        r("mori.repeat.f2", Se.a);
        r("mori.repeatedly", Te);
        r("mori.repeatedly.f1", Te.b);
        r("mori.repeatedly.f2", Te.a);
        r("mori.sort", sd);
        r("mori.sort.f1", sd.b);
        r("mori.sort.f2", sd.a);
        r("mori.sortBy", td);
        r("mori.sortBy.f2", td.a);
        r("mori.sortBy.f3", td.c);
        r("mori.intoArray", Ia);
        r("mori.intoArray.f1", Ia.b);
        r("mori.intoArray.f2", Ia.a);
        r("mori.subseq", nh);
        r("mori.subseq.f3", nh.c);
        r("mori.subseq.f5", nh.r);
        r("mori.dedupe", Fh);
        r("mori.dedupe.f0", Fh.l);
        r("mori.dedupe.f1", Fh.b);
        r("mori.transduce", wd);
        r("mori.transduce.f3", wd.c);
        r("mori.transduce.f4", wd.n);
        r("mori.eduction", function (a, b) {
          return new Gh(a, b);
        });
        r("mori.sequence", Ce);
        r("mori.sequence.f1", Ce.b);
        r("mori.sequence.f2", Ce.a);
        r("mori.sequence.fn", Ce.K);
        r("mori.completing", vd);
        r("mori.completing.f1", vd.b);
        r("mori.completing.f2", vd.a);
        r("mori.list", Kd);
        r("mori.vector", Af);
        r("mori.hashMap", Pg);
        r("mori.set", fh);
        r("mori.sortedSet", gh);
        r("mori.sortedSetBy", hh);
        r("mori.sortedMap", Qg);
        r("mori.sortedMapBy", Rg);
        r("mori.queue", (function () {
          function a(a2) {
            var d = null;
            if (0 < arguments.length) {
              for (var d = 0, e = Array(arguments.length - 0); d < e.length; ) (e[d] = arguments[d + 0], ++d);
              d = new F(e, 0);
            }
            return b.call(this, d);
          }
          function b(a2) {
            return af.a ? af.a(Mf, a2) : af.call(null, Mf, a2);
          }
          a.i = 0;
          a.f = function (a2) {
            a2 = D(a2);
            return b(a2);
          };
          a.d = b;
          return a;
        })());
        r("mori.keyword", Pd);
        r("mori.keyword.f1", Pd.b);
        r("mori.keyword.f2", Pd.a);
        r("mori.symbol", rc);
        r("mori.symbol.f1", rc.b);
        r("mori.symbol.f2", rc.a);
        r("mori.zipmap", function (a, b) {
          for (var c = Ob(Uf), d = D(a), e = D(b); ; ) if (d && e) (c = ee.c(c, G(d), G(e)), d = K(d), e = K(e)); else return Qb(c);
        });
        r("mori.isList", function (a) {
          return a ? a.j & 33554432 || a.wc ? true : a.j ? false : w(Eb, a) : w(Eb, a);
        });
        r("mori.isSeq", kd);
        r("mori.isVector", ed);
        r("mori.isMap", dd);
        r("mori.isSet", ad);
        r("mori.isKeyword", function (a) {
          return a instanceof U;
        });
        r("mori.isSymbol", function (a) {
          return a instanceof qc;
        });
        r("mori.isCollection", $c);
        r("mori.isSequential", cd);
        r("mori.isAssociative", bd);
        r("mori.isCounted", Ec);
        r("mori.isIndexed", Fc);
        r("mori.isReduceable", function (a) {
          return a ? a.j & 524288 || a.Sb ? true : a.j ? false : w(vb, a) : w(vb, a);
        });
        r("mori.isSeqable", ld);
        r("mori.isReversible", Id);
        r("mori.union", Rh);
        r("mori.union.f0", Rh.l);
        r("mori.union.f1", Rh.b);
        r("mori.union.f2", Rh.a);
        r("mori.union.fn", Rh.K);
        r("mori.intersection", Sh);
        r("mori.intersection.f1", Sh.b);
        r("mori.intersection.f2", Sh.a);
        r("mori.intersection.fn", Sh.K);
        r("mori.difference", Th);
        r("mori.difference.f1", Th.b);
        r("mori.difference.f2", Th.a);
        r("mori.difference.fn", Th.K);
        r("mori.join", Xh);
        r("mori.join.f2", Xh.a);
        r("mori.join.f3", Xh.c);
        r("mori.index", Vh);
        r("mori.project", function (a, b) {
          return fh(Oe.a(function (a2) {
            return Yg(a2, b);
          }, a));
        });
        r("mori.mapInvert", Wh);
        r("mori.rename", function (a, b) {
          return fh(Oe.a(function (a2) {
            return Uh(a2, b);
          }, a));
        });
        r("mori.renameKeys", Uh);
        r("mori.isSubset", function (a, b) {
          return Q(a) <= Q(b) && Ee(function (a2) {
            return nd(b, a2);
          }, a);
        });
        r("mori.isSuperset", function (a, b) {
          return Q(a) >= Q(b) && Ee(function (b2) {
            return nd(a, b2);
          }, b);
        });
        r("mori.notEquals", je);
        r("mori.notEquals.f1", je.b);
        r("mori.notEquals.f2", je.a);
        r("mori.notEquals.fn", je.K);
        r("mori.gt", Ad);
        r("mori.gt.f1", Ad.b);
        r("mori.gt.f2", Ad.a);
        r("mori.gt.fn", Ad.K);
        r("mori.gte", Bd);
        r("mori.gte.f1", Bd.b);
        r("mori.gte.f2", Bd.a);
        r("mori.gte.fn", Bd.K);
        r("mori.lt", yd);
        r("mori.lt.f1", yd.b);
        r("mori.lt.f2", yd.a);
        r("mori.lt.fn", yd.K);
        r("mori.lte", zd);
        r("mori.lte.f1", zd.b);
        r("mori.lte.f2", zd.a);
        r("mori.lte.fn", zd.K);
        r("mori.compare", od);
        r("mori.partial", Je);
        r("mori.partial.f1", Je.b);
        r("mori.partial.f2", Je.a);
        r("mori.partial.f3", Je.c);
        r("mori.partial.f4", Je.n);
        r("mori.partial.fn", Je.K);
        r("mori.comp", Ie);
        r("mori.comp.f0", Ie.l);
        r("mori.comp.f1", Ie.b);
        r("mori.comp.f2", Ie.a);
        r("mori.comp.f3", Ie.c);
        r("mori.comp.fn", Ie.K);
        r("mori.pipeline", (function () {
          function a(a2) {
            var d = null;
            if (0 < arguments.length) {
              for (var d = 0, e = Array(arguments.length - 0); d < e.length; ) (e[d] = arguments[d + 0], ++d);
              d = new F(e, 0);
            }
            return b.call(this, d);
          }
          function b(a2) {
            function b2(a3, c) {
              return c.b ? c.b(a3) : c.call(null, a3);
            }
            return A.a ? A.a(b2, a2) : A.call(null, b2, a2);
          }
          a.i = 0;
          a.f = function (a2) {
            a2 = D(a2);
            return b(a2);
          };
          a.d = b;
          return a;
        })());
        r("mori.curry", (function () {
          function a(a2, d) {
            var e = null;
            if (1 < arguments.length) {
              for (var e = 0, f = Array(arguments.length - 1); e < f.length; ) (f[e] = arguments[e + 1], ++e);
              e = new F(f, 0);
            }
            return b.call(this, a2, e);
          }
          function b(a2, b2) {
            return function (e) {
              return T.a(a2, M.a ? M.a(e, b2) : M.call(null, e, b2));
            };
          }
          a.i = 1;
          a.f = function (a2) {
            var d = G(a2);
            a2 = H(a2);
            return b(d, a2);
          };
          a.d = b;
          return a;
        })());
        r("mori.juxt", (function () {
          function a(a2) {
            var d = null;
            if (0 < arguments.length) {
              for (var d = 0, e = Array(arguments.length - 0); d < e.length; ) (e[d] = arguments[d + 0], ++d);
              d = new F(e, 0);
            }
            return b.call(this, d);
          }
          function b(a2) {
            return (function () {
              function b2(a3) {
                var c = null;
                if (0 < arguments.length) {
                  for (var c = 0, d = Array(arguments.length - 0); c < d.length; ) (d[c] = arguments[c + 0], ++c);
                  c = new F(d, 0);
                }
                return e.call(this, c);
              }
              function e(b3) {
                var d = (function () {
                  function d2(a3) {
                    return T.a(a3, b3);
                  }
                  return Oe.a ? Oe.a(d2, a2) : Oe.call(null, d2, a2);
                })();
                return Ia.b ? Ia.b(d) : Ia.call(null, d);
              }
              b2.i = 0;
              b2.f = function (a3) {
                a3 = D(a3);
                return e(a3);
              };
              b2.d = e;
              return b2;
            })();
          }
          a.i = 0;
          a.f = function (a2) {
            a2 = D(a2);
            return b(a2);
          };
          a.d = b;
          return a;
        })());
        r("mori.knit", (function () {
          function a(a2) {
            var d = null;
            if (0 < arguments.length) {
              for (var d = 0, e = Array(arguments.length - 0); d < e.length; ) (e[d] = arguments[d + 0], ++d);
              d = new F(e, 0);
            }
            return b.call(this, d);
          }
          function b(a2) {
            return function (b2) {
              var e = (function () {
                function e2(a3, b3) {
                  return a3.b ? a3.b(b3) : a3.call(null, b3);
                }
                return Oe.c ? Oe.c(e2, a2, b2) : Oe.call(null, e2, a2, b2);
              })();
              return Ia.b ? Ia.b(e) : Ia.call(null, e);
            };
          }
          a.i = 0;
          a.f = function (a2) {
            a2 = D(a2);
            return b(a2);
          };
          a.d = b;
          return a;
        })());
        r("mori.sum", xd);
        r("mori.sum.f0", xd.l);
        r("mori.sum.f1", xd.b);
        r("mori.sum.f2", xd.a);
        r("mori.sum.fn", xd.K);
        r("mori.inc", function (a) {
          return a + 1;
        });
        r("mori.dec", function (a) {
          return a - 1;
        });
        r("mori.isEven", Ge);
        r("mori.isOdd", function (a) {
          return !Ge(a);
        });
        r("mori.each", function (a, b) {
          for (var c = D(a), d = null, e = 0, f = 0; ; ) if (f < e) {
            var g = d.Q(null, f);
            b.b ? b.b(g) : b.call(null, g);
            f += 1;
          } else if (c = D(c)) (fd(c) ? (e = Yb(c), c = Zb(c), d = e, e = Q(e)) : (d = g = G(c), b.b ? b.b(d) : b.call(null, d), c = K(c), d = null, e = 0), f = 0); else return null;
        });
        r("mori.identity", ud);
        r("mori.constantly", function (a) {
          return (function () {
            function b(b2) {
              if (0 < arguments.length) for (var d = 0, e = Array(arguments.length - 0); d < e.length; ) (e[d] = arguments[d + 0], ++d);
              return a;
            }
            b.i = 0;
            b.f = function (b2) {
              D(b2);
              return a;
            };
            b.d = function () {
              return a;
            };
            return b;
          })();
        });
        r("mori.toJs", Kh);
        r("mori.toClj", (function () {
          function a(a2, b2) {
            return Ph.d(a2, Kc([Oh, b2], 0));
          }
          function b(a2) {
            return Ph.b(a2);
          }
          var c = null, c = function (c2, e) {
            switch (arguments.length) {
              case 1:
                return b.call(this, c2);
              case 2:
                return a.call(this, c2, e);
            }
            throw Error("Invalid arity: " + arguments.length);
          };
          c.b = b;
          c.a = a;
          return c;
        })());
        r("mori.configure", function (a, b) {
          switch (a) {
            case "print-length":
              return la = b;
            case "print-level":
              return ma = b;
            default:
              throw Error([z("No matching clause: "), z(a)].join(""));
          }
        });
        r("mori.meta", Vc);
        r("mori.withMeta", O);
        r("mori.varyMeta", ie);
        r("mori.varyMeta.f2", ie.a);
        r("mori.varyMeta.f3", ie.c);
        r("mori.varyMeta.f4", ie.n);
        r("mori.varyMeta.f5", ie.r);
        r("mori.varyMeta.f6", ie.P);
        r("mori.varyMeta.fn", ie.K);
        r("mori.alterMeta", Dh);
        r("mori.resetMeta", function (a, b) {
          return a.k = b;
        });
        V.prototype.inspect = function () {
          return this.toString();
        };
        F.prototype.inspect = function () {
          return this.toString();
        };
        Hc.prototype.inspect = function () {
          return this.toString();
        };
        wg.prototype.inspect = function () {
          return this.toString();
        };
        pg.prototype.inspect = function () {
          return this.toString();
        };
        qg.prototype.inspect = function () {
          return this.toString();
        };
        Fd.prototype.inspect = function () {
          return this.toString();
        };
        Ld.prototype.inspect = function () {
          return this.toString();
        };
        Hd.prototype.inspect = function () {
          return this.toString();
        };
        W.prototype.inspect = function () {
          return this.toString();
        };
        Vd.prototype.inspect = function () {
          return this.toString();
        };
        Bf.prototype.inspect = function () {
          return this.toString();
        };
        Df.prototype.inspect = function () {
          return this.toString();
        };
        Z.prototype.inspect = function () {
          return this.toString();
        };
        X.prototype.inspect = function () {
          return this.toString();
        };
        pa.prototype.inspect = function () {
          return this.toString();
        };
        rg.prototype.inspect = function () {
          return this.toString();
        };
        Lg.prototype.inspect = function () {
          return this.toString();
        };
        $g.prototype.inspect = function () {
          return this.toString();
        };
        ch.prototype.inspect = function () {
          return this.toString();
        };
        ph.prototype.inspect = function () {
          return this.toString();
        };
        U.prototype.inspect = function () {
          return this.toString();
        };
        qc.prototype.inspect = function () {
          return this.toString();
        };
        Lf.prototype.inspect = function () {
          return this.toString();
        };
        Kf.prototype.inspect = function () {
          return this.toString();
        };
        r("mori.mutable.thaw", function (a) {
          return Ob(a);
        });
        r("mori.mutable.freeze", ce);
        r("mori.mutable.conj", de);
        r("mori.mutable.conj.f0", de.l);
        r("mori.mutable.conj.f1", de.b);
        r("mori.mutable.conj.f2", de.a);
        r("mori.mutable.conj.fn", de.K);
        r("mori.mutable.assoc", ee);
        r("mori.mutable.assoc.f3", ee.c);
        r("mori.mutable.assoc.fn", ee.K);
        r("mori.mutable.dissoc", fe);
        r("mori.mutable.dissoc.f2", fe.a);
        r("mori.mutable.dissoc.fn", fe.K);
        r("mori.mutable.pop", function (a) {
          return Ub(a);
        });
        r("mori.mutable.disj", ge);
        r("mori.mutable.disj.f2", ge.a);
        r("mori.mutable.disj.fn", ge.K);
        ;
        return this.mori;
      }).call({});
    });
  });
  // _build/default/node_modules/rescript-vector/src/Vector.bs.js
  var require_Vector_bs = __commonJS(exports => {
    "use strict";
    var Curry = require_curry();
    var Caml_option = require_caml_option();
    function slice(ar, offset, len) {
      return ar.slice(offset, offset + len | 0);
    }
    function blit(src, srcOffset, dst, dstOffset, len) {
      for (var i = 0; i < len; ++i) {
        dst[dstOffset + i | 0] = src[srcOffset + i | 0];
      }
    }
    function cloneNode(x) {
      if (x.TAG === 0) {
        return {
          TAG: 0,
          _0: x._0.slice()
        };
      }
    }
    function setNode(node, idx, v) {
      if (node.TAG === 0) {
        node._0[idx] = v;
        return;
      }
    }
    function getNode(node, idx) {
      if (node.TAG === 0) {
        return node._0[idx];
      }
    }
    function make(param) {
      return {
        size: 0,
        shift: 5,
        root: {
          TAG: 0,
          _0: []
        },
        tail: []
      };
    }
    function length(v) {
      return v.size;
    }
    function tailOffset(param) {
      var size = param.size;
      if (size < 32) {
        return 0;
      } else {
        return (size - 1 | 0) >>> 5 << 5;
      }
    }
    function newPath(_level, _node) {
      while (true) {
        var node = _node;
        var level = _level;
        if (level === 0) {
          return node;
        }
        _node = {
          TAG: 0,
          _0: [node]
        };
        _level = level - 5 | 0;
        continue;
      }
      ;
    }
    function pushTail(size, level, parent, tail) {
      var ret = cloneNode(parent);
      var subIdx = (size - 1 | 0) >>> level & 31;
      if (level === 5) {
        setNode(ret, subIdx, tail);
        return ret;
      }
      if (parent.TAG !== 0) {
        return;
      }
      var ar = parent._0;
      var newChild = subIdx < ar.length ? pushTail(size, level - 5 | 0, ar[subIdx], tail) : newPath(level - 5 | 0, tail);
      setNode(ret, subIdx, newChild);
      return ret;
    }
    function push(vec, x) {
      var tail = vec.tail;
      var root = vec.root;
      var shift = vec.shift;
      var size = vec.size;
      if (tail.length < 32) {
        var newTail = tail.slice();
        newTail[tail.length] = x;
        return {
          size: size + 1 | 0,
          shift: vec.shift,
          root: vec.root,
          tail: newTail
        };
      }
      var isRootOverflow = size >>> 5 > 1 << shift;
      if (isRootOverflow) {
        var newRoot = {
          TAG: 0,
          _0: [root, newPath(shift, {
            TAG: 1,
            _0: tail
          })]
        };
        return {
          size: size + 1 | 0,
          shift: vec.shift + 5 | 0,
          root: newRoot,
          tail: [x]
        };
      }
      var newRoot$1 = pushTail(size, shift, root, {
        TAG: 1,
        _0: tail
      });
      return {
        size: size + 1 | 0,
        shift: vec.shift,
        root: newRoot$1,
        tail: [x]
      };
    }
    function getArrayUnsafe(vec, idx) {
      if (idx >= tailOffset(vec)) {
        return vec.tail;
      }
      var node = vec.root;
      var level = vec.shift;
      while (level > 0) {
        var subIdx = idx >>> level & 31;
        node = getNode(node, subIdx);
        level = level - 5 | 0;
      }
      ;
      var ar = node;
      if (ar.TAG === 0) {
        return;
      } else {
        return ar._0;
      }
    }
    function popTail(size, level, parent) {
      if (level <= 0) {
        return;
      }
      var subIdx = (size - 2 | 0) >>> level & 31;
      if (parent.TAG !== 0) {
        return;
      }
      var ar = parent._0;
      var child = popTail(size, level - 5 | 0, ar[subIdx]);
      if (child !== void 0) {
        var newAr = ar.slice();
        newAr[subIdx] = child;
        return {
          TAG: 0,
          _0: newAr
        };
      }
      if (subIdx === 0) {
        return;
      }
      var newAr$1 = slice(ar, 0, ar.length - 1 | 0);
      return {
        TAG: 0,
        _0: newAr$1
      };
    }
    function pop(vec) {
      var tail = vec.tail;
      var shift = vec.shift;
      var size = vec.size;
      if (size <= 1) {
        return make(void 0);
      }
      if (tail.length > 1) {
        var newTail = slice(tail, 0, tail.length - 1 | 0);
        return {
          size: size - 1 | 0,
          shift: vec.shift,
          root: vec.root,
          tail: newTail
        };
      }
      var newTail$1 = getArrayUnsafe(vec, size - 2 | 0);
      var nr = popTail(size, shift, vec.root);
      var newRoot = nr !== void 0 ? nr : {
        TAG: 0,
        _0: []
      };
      if (newRoot.TAG !== 0) {
        return;
      }
      var ar = newRoot._0;
      var isRootUnderflow = shift > 5 && ar.length === 1;
      if (isRootUnderflow) {
        return {
          size: size - 1 | 0,
          shift: shift - 5 | 0,
          root: ar[0],
          tail: newTail$1
        };
      } else {
        return {
          size: size - 1 | 0,
          shift: vec.shift,
          root: newRoot,
          tail: newTail$1
        };
      }
    }
    function getUnsafe(vec, i) {
      return getArrayUnsafe(vec, i)[i & 31];
    }
    function get(v, i) {
      if (i < 0 || i >= v.size) {
        return;
      } else {
        return Caml_option.some(getUnsafe(v, i));
      }
    }
    function getExn(v, i) {
      if (!(i >= 0 && i < v.size)) {
        throw {
          RE_EXN_ID: "Assert_failure",
          _1: ["Vector.res", 226, 2],
          Error: new Error()
        };
      }
      return getUnsafe(v, i);
    }
    function updatedPath(node, level, i, x) {
      if (node.TAG === 0) {
        var ar = node._0;
        var subIdx = i >>> level & 31;
        var m = ar.slice();
        m[subIdx] = updatedPath(ar[subIdx], level - 5 | 0, i, x);
        return {
          TAG: 0,
          _0: m
        };
      }
      var m$1 = node._0.slice();
      m$1[i % 32] = x;
      return {
        TAG: 1,
        _0: m$1
      };
    }
    function setUnsafe(vec, i, x) {
      var offset = tailOffset(vec);
      if (i < offset) {
        return {
          size: vec.size,
          shift: vec.shift,
          root: updatedPath(vec.root, vec.shift, i, x),
          tail: vec.tail
        };
      }
      var newTail = vec.tail.slice();
      newTail[i & 31] = x;
      return {
        size: vec.size,
        shift: vec.shift,
        root: vec.root,
        tail: newTail
      };
    }
    function set(vec, i, x) {
      if (i < 0 || i >= vec.size) {
        return;
      } else {
        return setUnsafe(vec, i, x);
      }
    }
    function setExn(vec, i, x) {
      if (!(i >= 0 && i < vec.size)) {
        throw {
          RE_EXN_ID: "Assert_failure",
          _1: ["Vector.res", 261, 2],
          Error: new Error()
        };
      }
      return setUnsafe(vec, i, x);
    }
    function fromArray(ar) {
      var len = ar.length;
      if (len === 0) {
        return make(void 0);
      }
      var tailSize = (len & 31) === 0 ? 32 : len & 31;
      var tailOffset2 = len - tailSize | 0;
      var tail = slice(ar, tailOffset2, tailSize);
      var i = 0;
      var init = make(void 0);
      var state = {
        size: tailSize,
        shift: init.shift,
        root: init.root,
        tail
      };
      while (i < tailOffset2) {
        var offset = i;
        var vec = state;
        var root = vec.root;
        var shift = vec.shift;
        var size = vec.size;
        var leaf = {
          TAG: 1,
          _0: slice(ar, offset, 32)
        };
        var isRootOverflow = offset === 1 << (shift + 5 | 0);
        var tmp;
        if (isRootOverflow) {
          var newRoot = {
            TAG: 0,
            _0: [root, newPath(shift, leaf)]
          };
          tmp = {
            size: size + 32 | 0,
            shift: shift + 5 | 0,
            root: newRoot,
            tail: vec.tail
          };
        } else {
          var newRoot$1 = pushTail(offset + 1 | 0, shift, root, leaf);
          tmp = {
            size: size + 32 | 0,
            shift: vec.shift,
            root: newRoot$1,
            tail: vec.tail
          };
        }
        state = tmp;
        i = offset + 32 | 0;
      }
      ;
      return state;
    }
    function toArray(param) {
      var tail = param.tail;
      var data = Array(param.size);
      var idx = {
        contents: 0
      };
      var fromTree = function (node) {
        if (node.TAG === 0) {
          var prim0 = node._0;
          prim0.forEach(Curry.__1(fromTree));
          return;
        }
        var ar = node._0;
        var len = ar.length;
        blit(ar, 0, data, idx.contents, len);
        idx.contents = idx.contents + len | 0;
      };
      fromTree(param.root);
      blit(tail, 0, data, idx.contents, tail.length);
      return data;
    }
    function reduceU(vec, init, f) {
      var i = 0;
      var acc = init;
      while (i < vec.size) {
        var ar = getArrayUnsafe(vec, i);
        var len = ar.length;
        for (var j = 0; j < len; ++j) {
          acc = f(acc, ar[j]);
        }
        i = i + len | 0;
      }
      ;
      return acc;
    }
    function reduce(vec, init, f) {
      return reduceU(vec, init, Curry.__2(f));
    }
    function mapU(vec, f) {
      return reduceU(vec, make(void 0), function (res, v) {
        return push(res, f(v));
      });
    }
    function map(vec, f) {
      return mapU(vec, Curry.__1(f));
    }
    function keepU(vec, f) {
      return reduceU(vec, make(void 0), function (res, v) {
        if (f(v)) {
          return push(res, v);
        } else {
          return res;
        }
      });
    }
    function keep(vec, f) {
      return keepU(vec, Curry.__1(f));
    }
    function keepMapU(vec, f) {
      return reduceU(vec, make(void 0), function (acc, v) {
        var v$1 = f(v);
        if (v$1 !== void 0) {
          return push(acc, Caml_option.valFromOption(v$1));
        } else {
          return acc;
        }
      });
    }
    function keepMap(vec, f) {
      return keepMapU(vec, Curry.__1(f));
    }
    function forEachU(vec, f) {
      var i = 0;
      while (i < vec.size) {
        var ar = getArrayUnsafe(vec, i);
        var len = ar.length;
        for (var j = 0; j < len; ++j) {
          f(ar[j]);
        }
        i = i + len | 0;
      }
      ;
    }
    function forEach(vec, f) {
      return forEachU(vec, Curry.__1(f));
    }
    function someU(vec, f) {
      var _i = 0;
      while (true) {
        var i = _i;
        if (i === vec.size) {
          return false;
        }
        if (f(getUnsafe(vec, i))) {
          return true;
        }
        _i = i + 1 | 0;
        continue;
      }
      ;
    }
    function some(vec, f) {
      return someU(vec, Curry.__1(f));
    }
    function everyU(vec, f) {
      var _i = 0;
      while (true) {
        var i = _i;
        if (i === vec.size) {
          return true;
        }
        if (!f(getUnsafe(vec, i))) {
          return false;
        }
        _i = i + 1 | 0;
        continue;
      }
      ;
    }
    function every(vec, f) {
      return everyU(vec, Curry.__1(f));
    }
    exports.make = make;
    exports.length = length;
    exports.push = push;
    exports.pop = pop;
    exports.get = get;
    exports.getExn = getExn;
    exports.getUnsafe = getUnsafe;
    exports.set = set;
    exports.setExn = setExn;
    exports.setUnsafe = setUnsafe;
    exports.reduceU = reduceU;
    exports.reduce = reduce;
    exports.mapU = mapU;
    exports.map = map;
    exports.keepU = keepU;
    exports.keep = keep;
    exports.keepMapU = keepMapU;
    exports.keepMap = keepMap;
    exports.forEachU = forEachU;
    exports.forEach = forEach;
    exports.someU = someU;
    exports.some = some;
    exports.everyU = everyU;
    exports.every = every;
    exports.fromArray = fromArray;
    exports.toArray = toArray;
  });
  // node_modules/immutable/dist/immutable.js
  var require_immutable = __commonJS((exports, module) => {
    (function (global2, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : factory(global2.Immutable = {});
    })(exports, function (exports2) {
      "use strict";
      var DELETE = "delete";
      var SHIFT = 5;
      var SIZE = 1 << SHIFT;
      var MASK = SIZE - 1;
      var NOT_SET = {};
      function MakeRef() {
        return {
          value: false
        };
      }
      function SetRef(ref) {
        if (ref) {
          ref.value = true;
        }
      }
      function OwnerID() {}
      function ensureSize(iter) {
        if (iter.size === void 0) {
          iter.size = iter.__iterate(returnTrue);
        }
        return iter.size;
      }
      function wrapIndex(iter, index) {
        if (typeof index !== "number") {
          var uint32Index = index >>> 0;
          if ("" + uint32Index !== index || uint32Index === 4294967295) {
            return NaN;
          }
          index = uint32Index;
        }
        return index < 0 ? ensureSize(iter) + index : index;
      }
      function returnTrue() {
        return true;
      }
      function wholeSlice(begin, end, size) {
        return (begin === 0 && !isNeg(begin) || size !== void 0 && begin <= -size) && (end === void 0 || size !== void 0 && end >= size);
      }
      function resolveBegin(begin, size) {
        return resolveIndex(begin, size, 0);
      }
      function resolveEnd(end, size) {
        return resolveIndex(end, size, size);
      }
      function resolveIndex(index, size, defaultIndex) {
        return index === void 0 ? defaultIndex : isNeg(index) ? size === Infinity ? size : Math.max(0, size + index) | 0 : size === void 0 || size === index ? index : Math.min(size, index) | 0;
      }
      function isNeg(value) {
        return value < 0 || value === 0 && 1 / value === -Infinity;
      }
      var IS_COLLECTION_SYMBOL = "@@__IMMUTABLE_ITERABLE__@@";
      function isCollection(maybeCollection) {
        return Boolean(maybeCollection && maybeCollection[IS_COLLECTION_SYMBOL]);
      }
      var IS_KEYED_SYMBOL = "@@__IMMUTABLE_KEYED__@@";
      function isKeyed(maybeKeyed) {
        return Boolean(maybeKeyed && maybeKeyed[IS_KEYED_SYMBOL]);
      }
      var IS_INDEXED_SYMBOL = "@@__IMMUTABLE_INDEXED__@@";
      function isIndexed(maybeIndexed) {
        return Boolean(maybeIndexed && maybeIndexed[IS_INDEXED_SYMBOL]);
      }
      function isAssociative(maybeAssociative) {
        return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);
      }
      var Collection = function Collection2(value) {
        return isCollection(value) ? value : Seq(value);
      };
      var KeyedCollection = /*@__PURE__*/(function (Collection2) {
        function KeyedCollection2(value) {
          return isKeyed(value) ? value : KeyedSeq(value);
        }
        if (Collection2) KeyedCollection2.__proto__ = Collection2;
        KeyedCollection2.prototype = Object.create(Collection2 && Collection2.prototype);
        KeyedCollection2.prototype.constructor = KeyedCollection2;
        return KeyedCollection2;
      })(Collection);
      var IndexedCollection = /*@__PURE__*/(function (Collection2) {
        function IndexedCollection2(value) {
          return isIndexed(value) ? value : IndexedSeq(value);
        }
        if (Collection2) IndexedCollection2.__proto__ = Collection2;
        IndexedCollection2.prototype = Object.create(Collection2 && Collection2.prototype);
        IndexedCollection2.prototype.constructor = IndexedCollection2;
        return IndexedCollection2;
      })(Collection);
      var SetCollection = /*@__PURE__*/(function (Collection2) {
        function SetCollection2(value) {
          return isCollection(value) && !isAssociative(value) ? value : SetSeq(value);
        }
        if (Collection2) SetCollection2.__proto__ = Collection2;
        SetCollection2.prototype = Object.create(Collection2 && Collection2.prototype);
        SetCollection2.prototype.constructor = SetCollection2;
        return SetCollection2;
      })(Collection);
      Collection.Keyed = KeyedCollection;
      Collection.Indexed = IndexedCollection;
      Collection.Set = SetCollection;
      var IS_SEQ_SYMBOL = "@@__IMMUTABLE_SEQ__@@";
      function isSeq(maybeSeq) {
        return Boolean(maybeSeq && maybeSeq[IS_SEQ_SYMBOL]);
      }
      var IS_RECORD_SYMBOL = "@@__IMMUTABLE_RECORD__@@";
      function isRecord(maybeRecord) {
        return Boolean(maybeRecord && maybeRecord[IS_RECORD_SYMBOL]);
      }
      function isImmutable(maybeImmutable) {
        return isCollection(maybeImmutable) || isRecord(maybeImmutable);
      }
      var IS_ORDERED_SYMBOL = "@@__IMMUTABLE_ORDERED__@@";
      function isOrdered(maybeOrdered) {
        return Boolean(maybeOrdered && maybeOrdered[IS_ORDERED_SYMBOL]);
      }
      var ITERATE_KEYS = 0;
      var ITERATE_VALUES = 1;
      var ITERATE_ENTRIES = 2;
      var REAL_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;
      var Iterator = function Iterator2(next) {
        this.next = next;
      };
      Iterator.prototype.toString = function toString() {
        return "[Iterator]";
      };
      Iterator.KEYS = ITERATE_KEYS;
      Iterator.VALUES = ITERATE_VALUES;
      Iterator.ENTRIES = ITERATE_ENTRIES;
      Iterator.prototype.inspect = Iterator.prototype.toSource = function () {
        return this.toString();
      };
      Iterator.prototype[ITERATOR_SYMBOL] = function () {
        return this;
      };
      function iteratorValue(type, k, v, iteratorResult) {
        var value = type === 0 ? k : type === 1 ? v : [k, v];
        iteratorResult ? iteratorResult.value = value : iteratorResult = {
          value,
          done: false
        };
        return iteratorResult;
      }
      function iteratorDone() {
        return {
          value: void 0,
          done: true
        };
      }
      function hasIterator(maybeIterable) {
        return !!getIteratorFn(maybeIterable);
      }
      function isIterator(maybeIterator) {
        return maybeIterator && typeof maybeIterator.next === "function";
      }
      function getIterator(iterable) {
        var iteratorFn = getIteratorFn(iterable);
        return iteratorFn && iteratorFn.call(iterable);
      }
      function getIteratorFn(iterable) {
        var iteratorFn = iterable && (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL] || iterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      function isArrayLike(value) {
        if (Array.isArray(value) || typeof value === "string") {
          return true;
        }
        return value && typeof value === "object" && Number.isInteger(value.length) && value.length >= 0 && (value.length === 0 ? Object.keys(value).length === 1 : value.hasOwnProperty(value.length - 1));
      }
      var Seq = /*@__PURE__*/(function (Collection$$1) {
        function Seq2(value) {
          return value === null || value === void 0 ? emptySequence() : isImmutable(value) ? value.toSeq() : seqFromValue(value);
        }
        if (Collection$$1) Seq2.__proto__ = Collection$$1;
        Seq2.prototype = Object.create(Collection$$1 && Collection$$1.prototype);
        Seq2.prototype.constructor = Seq2;
        Seq2.prototype.toSeq = function toSeq() {
          return this;
        };
        Seq2.prototype.toString = function toString() {
          return this.__toString("Seq {", "}");
        };
        Seq2.prototype.cacheResult = function cacheResult() {
          if (!this._cache && this.__iterateUncached) {
            this._cache = this.entrySeq().toArray();
            this.size = this._cache.length;
          }
          return this;
        };
        Seq2.prototype.__iterate = function __iterate(fn, reverse) {
          var cache = this._cache;
          if (cache) {
            var size = cache.length;
            var i = 0;
            while (i !== size) {
              var entry = cache[reverse ? size - ++i : i++];
              if (fn(entry[1], entry[0], this) === false) {
                break;
              }
            }
            return i;
          }
          return this.__iterateUncached(fn, reverse);
        };
        Seq2.prototype.__iterator = function __iterator(type, reverse) {
          var cache = this._cache;
          if (cache) {
            var size = cache.length;
            var i = 0;
            return new Iterator(function () {
              if (i === size) {
                return iteratorDone();
              }
              var entry = cache[reverse ? size - ++i : i++];
              return iteratorValue(type, entry[0], entry[1]);
            });
          }
          return this.__iteratorUncached(type, reverse);
        };
        return Seq2;
      })(Collection);
      var KeyedSeq = /*@__PURE__*/(function (Seq2) {
        function KeyedSeq2(value) {
          return value === null || value === void 0 ? emptySequence().toKeyedSeq() : isCollection(value) ? isKeyed(value) ? value.toSeq() : value.fromEntrySeq() : isRecord(value) ? value.toSeq() : keyedSeqFromValue(value);
        }
        if (Seq2) KeyedSeq2.__proto__ = Seq2;
        KeyedSeq2.prototype = Object.create(Seq2 && Seq2.prototype);
        KeyedSeq2.prototype.constructor = KeyedSeq2;
        KeyedSeq2.prototype.toKeyedSeq = function toKeyedSeq() {
          return this;
        };
        return KeyedSeq2;
      })(Seq);
      var IndexedSeq = /*@__PURE__*/(function (Seq2) {
        function IndexedSeq2(value) {
          return value === null || value === void 0 ? emptySequence() : isCollection(value) ? isKeyed(value) ? value.entrySeq() : value.toIndexedSeq() : isRecord(value) ? value.toSeq().entrySeq() : indexedSeqFromValue(value);
        }
        if (Seq2) IndexedSeq2.__proto__ = Seq2;
        IndexedSeq2.prototype = Object.create(Seq2 && Seq2.prototype);
        IndexedSeq2.prototype.constructor = IndexedSeq2;
        IndexedSeq2.of = function of() {
          return IndexedSeq2(arguments);
        };
        IndexedSeq2.prototype.toIndexedSeq = function toIndexedSeq() {
          return this;
        };
        IndexedSeq2.prototype.toString = function toString() {
          return this.__toString("Seq [", "]");
        };
        return IndexedSeq2;
      })(Seq);
      var SetSeq = /*@__PURE__*/(function (Seq2) {
        function SetSeq2(value) {
          return (isCollection(value) && !isAssociative(value) ? value : IndexedSeq(value)).toSetSeq();
        }
        if (Seq2) SetSeq2.__proto__ = Seq2;
        SetSeq2.prototype = Object.create(Seq2 && Seq2.prototype);
        SetSeq2.prototype.constructor = SetSeq2;
        SetSeq2.of = function of() {
          return SetSeq2(arguments);
        };
        SetSeq2.prototype.toSetSeq = function toSetSeq() {
          return this;
        };
        return SetSeq2;
      })(Seq);
      Seq.isSeq = isSeq;
      Seq.Keyed = KeyedSeq;
      Seq.Set = SetSeq;
      Seq.Indexed = IndexedSeq;
      Seq.prototype[IS_SEQ_SYMBOL] = true;
      var ArraySeq = /*@__PURE__*/(function (IndexedSeq2) {
        function ArraySeq2(array) {
          this._array = array;
          this.size = array.length;
        }
        if (IndexedSeq2) ArraySeq2.__proto__ = IndexedSeq2;
        ArraySeq2.prototype = Object.create(IndexedSeq2 && IndexedSeq2.prototype);
        ArraySeq2.prototype.constructor = ArraySeq2;
        ArraySeq2.prototype.get = function get2(index, notSetValue) {
          return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;
        };
        ArraySeq2.prototype.__iterate = function __iterate(fn, reverse) {
          var array = this._array;
          var size = array.length;
          var i = 0;
          while (i !== size) {
            var ii = reverse ? size - ++i : i++;
            if (fn(array[ii], ii, this) === false) {
              break;
            }
          }
          return i;
        };
        ArraySeq2.prototype.__iterator = function __iterator(type, reverse) {
          var array = this._array;
          var size = array.length;
          var i = 0;
          return new Iterator(function () {
            if (i === size) {
              return iteratorDone();
            }
            var ii = reverse ? size - ++i : i++;
            return iteratorValue(type, ii, array[ii]);
          });
        };
        return ArraySeq2;
      })(IndexedSeq);
      var ObjectSeq = /*@__PURE__*/(function (KeyedSeq2) {
        function ObjectSeq2(object) {
          var keys = Object.keys(object);
          this._object = object;
          this._keys = keys;
          this.size = keys.length;
        }
        if (KeyedSeq2) ObjectSeq2.__proto__ = KeyedSeq2;
        ObjectSeq2.prototype = Object.create(KeyedSeq2 && KeyedSeq2.prototype);
        ObjectSeq2.prototype.constructor = ObjectSeq2;
        ObjectSeq2.prototype.get = function get2(key, notSetValue) {
          if (notSetValue !== void 0 && !this.has(key)) {
            return notSetValue;
          }
          return this._object[key];
        };
        ObjectSeq2.prototype.has = function has2(key) {
          return hasOwnProperty.call(this._object, key);
        };
        ObjectSeq2.prototype.__iterate = function __iterate(fn, reverse) {
          var object = this._object;
          var keys = this._keys;
          var size = keys.length;
          var i = 0;
          while (i !== size) {
            var key = keys[reverse ? size - ++i : i++];
            if (fn(object[key], key, this) === false) {
              break;
            }
          }
          return i;
        };
        ObjectSeq2.prototype.__iterator = function __iterator(type, reverse) {
          var object = this._object;
          var keys = this._keys;
          var size = keys.length;
          var i = 0;
          return new Iterator(function () {
            if (i === size) {
              return iteratorDone();
            }
            var key = keys[reverse ? size - ++i : i++];
            return iteratorValue(type, key, object[key]);
          });
        };
        return ObjectSeq2;
      })(KeyedSeq);
      ObjectSeq.prototype[IS_ORDERED_SYMBOL] = true;
      var CollectionSeq = /*@__PURE__*/(function (IndexedSeq2) {
        function CollectionSeq2(collection) {
          this._collection = collection;
          this.size = collection.length || collection.size;
        }
        if (IndexedSeq2) CollectionSeq2.__proto__ = IndexedSeq2;
        CollectionSeq2.prototype = Object.create(IndexedSeq2 && IndexedSeq2.prototype);
        CollectionSeq2.prototype.constructor = CollectionSeq2;
        CollectionSeq2.prototype.__iterateUncached = function __iterateUncached(fn, reverse) {
          if (reverse) {
            return this.cacheResult().__iterate(fn, reverse);
          }
          var collection = this._collection;
          var iterator = getIterator(collection);
          var iterations = 0;
          if (isIterator(iterator)) {
            var step;
            while (!(step = iterator.next()).done) {
              if (fn(step.value, iterations++, this) === false) {
                break;
              }
            }
          }
          return iterations;
        };
        CollectionSeq2.prototype.__iteratorUncached = function __iteratorUncached(type, reverse) {
          if (reverse) {
            return this.cacheResult().__iterator(type, reverse);
          }
          var collection = this._collection;
          var iterator = getIterator(collection);
          if (!isIterator(iterator)) {
            return new Iterator(iteratorDone);
          }
          var iterations = 0;
          return new Iterator(function () {
            var step = iterator.next();
            return step.done ? step : iteratorValue(type, iterations++, step.value);
          });
        };
        return CollectionSeq2;
      })(IndexedSeq);
      var EMPTY_SEQ;
      function emptySequence() {
        return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));
      }
      function keyedSeqFromValue(value) {
        var seq = Array.isArray(value) ? new ArraySeq(value) : hasIterator(value) ? new CollectionSeq(value) : void 0;
        if (seq) {
          return seq.fromEntrySeq();
        }
        if (typeof value === "object") {
          return new ObjectSeq(value);
        }
        throw new TypeError("Expected Array or collection object of [k, v] entries, or keyed object: " + value);
      }
      function indexedSeqFromValue(value) {
        var seq = maybeIndexedSeqFromValue(value);
        if (seq) {
          return seq;
        }
        throw new TypeError("Expected Array or collection object of values: " + value);
      }
      function seqFromValue(value) {
        var seq = maybeIndexedSeqFromValue(value);
        if (seq) {
          return seq;
        }
        if (typeof value === "object") {
          return new ObjectSeq(value);
        }
        throw new TypeError("Expected Array or collection object of values, or keyed object: " + value);
      }
      function maybeIndexedSeqFromValue(value) {
        return isArrayLike(value) ? new ArraySeq(value) : hasIterator(value) ? new CollectionSeq(value) : void 0;
      }
      var IS_MAP_SYMBOL = "@@__IMMUTABLE_MAP__@@";
      function isMap(maybeMap) {
        return Boolean(maybeMap && maybeMap[IS_MAP_SYMBOL]);
      }
      function isOrderedMap(maybeOrderedMap) {
        return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);
      }
      function isValueObject(maybeValue) {
        return Boolean(maybeValue && typeof maybeValue.equals === "function" && typeof maybeValue.hashCode === "function");
      }
      function is(valueA, valueB) {
        if (valueA === valueB || valueA !== valueA && valueB !== valueB) {
          return true;
        }
        if (!valueA || !valueB) {
          return false;
        }
        if (typeof valueA.valueOf === "function" && typeof valueB.valueOf === "function") {
          valueA = valueA.valueOf();
          valueB = valueB.valueOf();
          if (valueA === valueB || valueA !== valueA && valueB !== valueB) {
            return true;
          }
          if (!valueA || !valueB) {
            return false;
          }
        }
        return !!(isValueObject(valueA) && isValueObject(valueB) && valueA.equals(valueB));
      }
      var imul = typeof Math.imul === "function" && Math.imul(4294967295, 2) === -2 ? Math.imul : function imul2(a, b) {
        a |= 0;
        b |= 0;
        var c = a & 65535;
        var d = b & 65535;
        return c * d + ((a >>> 16) * d + c * (b >>> 16) << 16 >>> 0) | 0;
      };
      function smi(i32) {
        return i32 >>> 1 & 1073741824 | i32 & 3221225471;
      }
      var defaultValueOf = Object.prototype.valueOf;
      function hash(o) {
        switch (typeof o) {
          case "boolean":
            return o ? 1108378657 : 1108378656;
          case "number":
            return hashNumber(o);
          case "string":
            return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);
          case "object":
          case "function":
            if (o === null) {
              return 1108378658;
            }
            if (typeof o.hashCode === "function") {
              return smi(o.hashCode(o));
            }
            if (o.valueOf !== defaultValueOf && typeof o.valueOf === "function") {
              o = o.valueOf(o);
            }
            return hashJSObj(o);
          case "undefined":
            return 1108378659;
          default:
            if (typeof o.toString === "function") {
              return hashString(o.toString());
            }
            throw new Error("Value type " + typeof o + " cannot be hashed.");
        }
      }
      function hashNumber(n) {
        if (n !== n || n === Infinity) {
          return 0;
        }
        var hash2 = n | 0;
        if (hash2 !== n) {
          hash2 ^= n * 4294967295;
        }
        while (n > 4294967295) {
          n /= 4294967295;
          hash2 ^= n;
        }
        return smi(hash2);
      }
      function cachedHashString(string) {
        var hashed = stringHashCache[string];
        if (hashed === void 0) {
          hashed = hashString(string);
          if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {
            STRING_HASH_CACHE_SIZE = 0;
            stringHashCache = {};
          }
          STRING_HASH_CACHE_SIZE++;
          stringHashCache[string] = hashed;
        }
        return hashed;
      }
      function hashString(string) {
        var hashed = 0;
        for (var ii = 0; ii < string.length; ii++) {
          hashed = 31 * hashed + string.charCodeAt(ii) | 0;
        }
        return smi(hashed);
      }
      function hashJSObj(obj) {
        var hashed;
        if (usingWeakMap) {
          hashed = weakMap.get(obj);
          if (hashed !== void 0) {
            return hashed;
          }
        }
        hashed = obj[UID_HASH_KEY];
        if (hashed !== void 0) {
          return hashed;
        }
        if (!canDefineProperty) {
          hashed = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];
          if (hashed !== void 0) {
            return hashed;
          }
          hashed = getIENodeHash(obj);
          if (hashed !== void 0) {
            return hashed;
          }
        }
        hashed = ++objHashUID;
        if (objHashUID & 1073741824) {
          objHashUID = 0;
        }
        if (usingWeakMap) {
          weakMap.set(obj, hashed);
        } else if (isExtensible !== void 0 && isExtensible(obj) === false) {
          throw new Error("Non-extensible objects are not allowed as keys.");
        } else if (canDefineProperty) {
          Object.defineProperty(obj, UID_HASH_KEY, {
            enumerable: false,
            configurable: false,
            writable: false,
            value: hashed
          });
        } else if (obj.propertyIsEnumerable !== void 0 && obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {
          obj.propertyIsEnumerable = function () {
            return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);
          };
          obj.propertyIsEnumerable[UID_HASH_KEY] = hashed;
        } else if (obj.nodeType !== void 0) {
          obj[UID_HASH_KEY] = hashed;
        } else {
          throw new Error("Unable to set a non-enumerable property on object.");
        }
        return hashed;
      }
      var isExtensible = Object.isExtensible;
      var canDefineProperty = (function () {
        try {
          Object.defineProperty({}, "@", {});
          return true;
        } catch (e) {
          return false;
        }
      })();
      function getIENodeHash(node) {
        if (node && node.nodeType > 0) {
          switch (node.nodeType) {
            case 1:
              return node.uniqueID;
            case 9:
              return node.documentElement && node.documentElement.uniqueID;
          }
        }
      }
      var usingWeakMap = typeof WeakMap === "function";
      var weakMap;
      if (usingWeakMap) {
        weakMap = new WeakMap();
      }
      var objHashUID = 0;
      var UID_HASH_KEY = "__immutablehash__";
      if (typeof Symbol === "function") {
        UID_HASH_KEY = Symbol(UID_HASH_KEY);
      }
      var STRING_HASH_CACHE_MIN_STRLEN = 16;
      var STRING_HASH_CACHE_MAX_SIZE = 255;
      var STRING_HASH_CACHE_SIZE = 0;
      var stringHashCache = {};
      var ToKeyedSequence = /*@__PURE__*/(function (KeyedSeq$$1) {
        function ToKeyedSequence2(indexed, useKeys) {
          this._iter = indexed;
          this._useKeys = useKeys;
          this.size = indexed.size;
        }
        if (KeyedSeq$$1) ToKeyedSequence2.__proto__ = KeyedSeq$$1;
        ToKeyedSequence2.prototype = Object.create(KeyedSeq$$1 && KeyedSeq$$1.prototype);
        ToKeyedSequence2.prototype.constructor = ToKeyedSequence2;
        ToKeyedSequence2.prototype.get = function get2(key, notSetValue) {
          return this._iter.get(key, notSetValue);
        };
        ToKeyedSequence2.prototype.has = function has2(key) {
          return this._iter.has(key);
        };
        ToKeyedSequence2.prototype.valueSeq = function valueSeq() {
          return this._iter.valueSeq();
        };
        ToKeyedSequence2.prototype.reverse = function reverse() {
          var this$1 = this;
          var reversedSequence = reverseFactory(this, true);
          if (!this._useKeys) {
            reversedSequence.valueSeq = function () {
              return this$1._iter.toSeq().reverse();
            };
          }
          return reversedSequence;
        };
        ToKeyedSequence2.prototype.map = function map(mapper, context) {
          var this$1 = this;
          var mappedSequence = mapFactory(this, mapper, context);
          if (!this._useKeys) {
            mappedSequence.valueSeq = function () {
              return this$1._iter.toSeq().map(mapper, context);
            };
          }
          return mappedSequence;
        };
        ToKeyedSequence2.prototype.__iterate = function __iterate(fn, reverse) {
          var this$1 = this;
          return this._iter.__iterate(function (v, k) {
            return fn(v, k, this$1);
          }, reverse);
        };
        ToKeyedSequence2.prototype.__iterator = function __iterator(type, reverse) {
          return this._iter.__iterator(type, reverse);
        };
        return ToKeyedSequence2;
      })(KeyedSeq);
      ToKeyedSequence.prototype[IS_ORDERED_SYMBOL] = true;
      var ToIndexedSequence = /*@__PURE__*/(function (IndexedSeq$$1) {
        function ToIndexedSequence2(iter) {
          this._iter = iter;
          this.size = iter.size;
        }
        if (IndexedSeq$$1) ToIndexedSequence2.__proto__ = IndexedSeq$$1;
        ToIndexedSequence2.prototype = Object.create(IndexedSeq$$1 && IndexedSeq$$1.prototype);
        ToIndexedSequence2.prototype.constructor = ToIndexedSequence2;
        ToIndexedSequence2.prototype.includes = function includes(value) {
          return this._iter.includes(value);
        };
        ToIndexedSequence2.prototype.__iterate = function __iterate(fn, reverse) {
          var this$1 = this;
          var i = 0;
          reverse && ensureSize(this);
          return this._iter.__iterate(function (v) {
            return fn(v, reverse ? this$1.size - ++i : i++, this$1);
          }, reverse);
        };
        ToIndexedSequence2.prototype.__iterator = function __iterator(type, reverse) {
          var this$1 = this;
          var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
          var i = 0;
          reverse && ensureSize(this);
          return new Iterator(function () {
            var step = iterator.next();
            return step.done ? step : iteratorValue(type, reverse ? this$1.size - ++i : i++, step.value, step);
          });
        };
        return ToIndexedSequence2;
      })(IndexedSeq);
      var ToSetSequence = /*@__PURE__*/(function (SetSeq$$1) {
        function ToSetSequence2(iter) {
          this._iter = iter;
          this.size = iter.size;
        }
        if (SetSeq$$1) ToSetSequence2.__proto__ = SetSeq$$1;
        ToSetSequence2.prototype = Object.create(SetSeq$$1 && SetSeq$$1.prototype);
        ToSetSequence2.prototype.constructor = ToSetSequence2;
        ToSetSequence2.prototype.has = function has2(key) {
          return this._iter.includes(key);
        };
        ToSetSequence2.prototype.__iterate = function __iterate(fn, reverse) {
          var this$1 = this;
          return this._iter.__iterate(function (v) {
            return fn(v, v, this$1);
          }, reverse);
        };
        ToSetSequence2.prototype.__iterator = function __iterator(type, reverse) {
          var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
          return new Iterator(function () {
            var step = iterator.next();
            return step.done ? step : iteratorValue(type, step.value, step.value, step);
          });
        };
        return ToSetSequence2;
      })(SetSeq);
      var FromEntriesSequence = /*@__PURE__*/(function (KeyedSeq$$1) {
        function FromEntriesSequence2(entries) {
          this._iter = entries;
          this.size = entries.size;
        }
        if (KeyedSeq$$1) FromEntriesSequence2.__proto__ = KeyedSeq$$1;
        FromEntriesSequence2.prototype = Object.create(KeyedSeq$$1 && KeyedSeq$$1.prototype);
        FromEntriesSequence2.prototype.constructor = FromEntriesSequence2;
        FromEntriesSequence2.prototype.entrySeq = function entrySeq() {
          return this._iter.toSeq();
        };
        FromEntriesSequence2.prototype.__iterate = function __iterate(fn, reverse) {
          var this$1 = this;
          return this._iter.__iterate(function (entry) {
            if (entry) {
              validateEntry(entry);
              var indexedCollection = isCollection(entry);
              return fn(indexedCollection ? entry.get(1) : entry[1], indexedCollection ? entry.get(0) : entry[0], this$1);
            }
          }, reverse);
        };
        FromEntriesSequence2.prototype.__iterator = function __iterator(type, reverse) {
          var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
          return new Iterator(function () {
            while (true) {
              var step = iterator.next();
              if (step.done) {
                return step;
              }
              var entry = step.value;
              if (entry) {
                validateEntry(entry);
                var indexedCollection = isCollection(entry);
                return iteratorValue(type, indexedCollection ? entry.get(0) : entry[0], indexedCollection ? entry.get(1) : entry[1], step);
              }
            }
          });
        };
        return FromEntriesSequence2;
      })(KeyedSeq);
      ToIndexedSequence.prototype.cacheResult = ToKeyedSequence.prototype.cacheResult = ToSetSequence.prototype.cacheResult = FromEntriesSequence.prototype.cacheResult = cacheResultThrough;
      function flipFactory(collection) {
        var flipSequence = makeSequence(collection);
        flipSequence._iter = collection;
        flipSequence.size = collection.size;
        flipSequence.flip = function () {
          return collection;
        };
        flipSequence.reverse = function () {
          var reversedSequence = collection.reverse.apply(this);
          reversedSequence.flip = function () {
            return collection.reverse();
          };
          return reversedSequence;
        };
        flipSequence.has = function (key) {
          return collection.includes(key);
        };
        flipSequence.includes = function (key) {
          return collection.has(key);
        };
        flipSequence.cacheResult = cacheResultThrough;
        flipSequence.__iterateUncached = function (fn, reverse) {
          var this$1 = this;
          return collection.__iterate(function (v, k) {
            return fn(k, v, this$1) !== false;
          }, reverse);
        };
        flipSequence.__iteratorUncached = function (type, reverse) {
          if (type === ITERATE_ENTRIES) {
            var iterator = collection.__iterator(type, reverse);
            return new Iterator(function () {
              var step = iterator.next();
              if (!step.done) {
                var k = step.value[0];
                step.value[0] = step.value[1];
                step.value[1] = k;
              }
              return step;
            });
          }
          return collection.__iterator(type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES, reverse);
        };
        return flipSequence;
      }
      function mapFactory(collection, mapper, context) {
        var mappedSequence = makeSequence(collection);
        mappedSequence.size = collection.size;
        mappedSequence.has = function (key) {
          return collection.has(key);
        };
        mappedSequence.get = function (key, notSetValue) {
          var v = collection.get(key, NOT_SET);
          return v === NOT_SET ? notSetValue : mapper.call(context, v, key, collection);
        };
        mappedSequence.__iterateUncached = function (fn, reverse) {
          var this$1 = this;
          return collection.__iterate(function (v, k, c) {
            return fn(mapper.call(context, v, k, c), k, this$1) !== false;
          }, reverse);
        };
        mappedSequence.__iteratorUncached = function (type, reverse) {
          var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);
          return new Iterator(function () {
            var step = iterator.next();
            if (step.done) {
              return step;
            }
            var entry = step.value;
            var key = entry[0];
            return iteratorValue(type, key, mapper.call(context, entry[1], key, collection), step);
          });
        };
        return mappedSequence;
      }
      function reverseFactory(collection, useKeys) {
        var this$1 = this;
        var reversedSequence = makeSequence(collection);
        reversedSequence._iter = collection;
        reversedSequence.size = collection.size;
        reversedSequence.reverse = function () {
          return collection;
        };
        if (collection.flip) {
          reversedSequence.flip = function () {
            var flipSequence = flipFactory(collection);
            flipSequence.reverse = function () {
              return collection.flip();
            };
            return flipSequence;
          };
        }
        reversedSequence.get = function (key, notSetValue) {
          return collection.get(useKeys ? key : -1 - key, notSetValue);
        };
        reversedSequence.has = function (key) {
          return collection.has(useKeys ? key : -1 - key);
        };
        reversedSequence.includes = function (value) {
          return collection.includes(value);
        };
        reversedSequence.cacheResult = cacheResultThrough;
        reversedSequence.__iterate = function (fn, reverse) {
          var this$12 = this;
          var i = 0;
          reverse && ensureSize(collection);
          return collection.__iterate(function (v, k) {
            return fn(v, useKeys ? k : reverse ? this$12.size - ++i : i++, this$12);
          }, !reverse);
        };
        reversedSequence.__iterator = function (type, reverse) {
          var i = 0;
          reverse && ensureSize(collection);
          var iterator = collection.__iterator(ITERATE_ENTRIES, !reverse);
          return new Iterator(function () {
            var step = iterator.next();
            if (step.done) {
              return step;
            }
            var entry = step.value;
            return iteratorValue(type, useKeys ? entry[0] : reverse ? this$1.size - ++i : i++, entry[1], step);
          });
        };
        return reversedSequence;
      }
      function filterFactory(collection, predicate, context, useKeys) {
        var filterSequence = makeSequence(collection);
        if (useKeys) {
          filterSequence.has = function (key) {
            var v = collection.get(key, NOT_SET);
            return v !== NOT_SET && !!predicate.call(context, v, key, collection);
          };
          filterSequence.get = function (key, notSetValue) {
            var v = collection.get(key, NOT_SET);
            return v !== NOT_SET && predicate.call(context, v, key, collection) ? v : notSetValue;
          };
        }
        filterSequence.__iterateUncached = function (fn, reverse) {
          var this$1 = this;
          var iterations = 0;
          collection.__iterate(function (v, k, c) {
            if (predicate.call(context, v, k, c)) {
              iterations++;
              return fn(v, useKeys ? k : iterations - 1, this$1);
            }
          }, reverse);
          return iterations;
        };
        filterSequence.__iteratorUncached = function (type, reverse) {
          var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);
          var iterations = 0;
          return new Iterator(function () {
            while (true) {
              var step = iterator.next();
              if (step.done) {
                return step;
              }
              var entry = step.value;
              var key = entry[0];
              var value = entry[1];
              if (predicate.call(context, value, key, collection)) {
                return iteratorValue(type, useKeys ? key : iterations++, value, step);
              }
            }
          });
        };
        return filterSequence;
      }
      function countByFactory(collection, grouper, context) {
        var groups = Map2().asMutable();
        collection.__iterate(function (v, k) {
          groups.update(grouper.call(context, v, k, collection), 0, function (a) {
            return a + 1;
          });
        });
        return groups.asImmutable();
      }
      function groupByFactory(collection, grouper, context) {
        var isKeyedIter = isKeyed(collection);
        var groups = (isOrdered(collection) ? OrderedMap() : Map2()).asMutable();
        collection.__iterate(function (v, k) {
          groups.update(grouper.call(context, v, k, collection), function (a) {
            return (a = a || [], a.push(isKeyedIter ? [k, v] : v), a);
          });
        });
        var coerce = collectionClass(collection);
        return groups.map(function (arr) {
          return reify(collection, coerce(arr));
        }).asImmutable();
      }
      function sliceFactory(collection, begin, end, useKeys) {
        var originalSize = collection.size;
        if (wholeSlice(begin, end, originalSize)) {
          return collection;
        }
        var resolvedBegin = resolveBegin(begin, originalSize);
        var resolvedEnd = resolveEnd(end, originalSize);
        if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {
          return sliceFactory(collection.toSeq().cacheResult(), begin, end, useKeys);
        }
        var resolvedSize = resolvedEnd - resolvedBegin;
        var sliceSize;
        if (resolvedSize === resolvedSize) {
          sliceSize = resolvedSize < 0 ? 0 : resolvedSize;
        }
        var sliceSeq = makeSequence(collection);
        sliceSeq.size = sliceSize === 0 ? sliceSize : collection.size && sliceSize || void 0;
        if (!useKeys && isSeq(collection) && sliceSize >= 0) {
          sliceSeq.get = function (index, notSetValue) {
            index = wrapIndex(this, index);
            return index >= 0 && index < sliceSize ? collection.get(index + resolvedBegin, notSetValue) : notSetValue;
          };
        }
        sliceSeq.__iterateUncached = function (fn, reverse) {
          var this$1 = this;
          if (sliceSize === 0) {
            return 0;
          }
          if (reverse) {
            return this.cacheResult().__iterate(fn, reverse);
          }
          var skipped = 0;
          var isSkipping = true;
          var iterations = 0;
          collection.__iterate(function (v, k) {
            if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {
              iterations++;
              return fn(v, useKeys ? k : iterations - 1, this$1) !== false && iterations !== sliceSize;
            }
          });
          return iterations;
        };
        sliceSeq.__iteratorUncached = function (type, reverse) {
          if (sliceSize !== 0 && reverse) {
            return this.cacheResult().__iterator(type, reverse);
          }
          if (sliceSize === 0) {
            return new Iterator(iteratorDone);
          }
          var iterator = collection.__iterator(type, reverse);
          var skipped = 0;
          var iterations = 0;
          return new Iterator(function () {
            while (skipped++ < resolvedBegin) {
              iterator.next();
            }
            if (++iterations > sliceSize) {
              return iteratorDone();
            }
            var step = iterator.next();
            if (useKeys || type === ITERATE_VALUES || step.done) {
              return step;
            }
            if (type === ITERATE_KEYS) {
              return iteratorValue(type, iterations - 1, void 0, step);
            }
            return iteratorValue(type, iterations - 1, step.value[1], step);
          });
        };
        return sliceSeq;
      }
      function takeWhileFactory(collection, predicate, context) {
        var takeSequence = makeSequence(collection);
        takeSequence.__iterateUncached = function (fn, reverse) {
          var this$1 = this;
          if (reverse) {
            return this.cacheResult().__iterate(fn, reverse);
          }
          var iterations = 0;
          collection.__iterate(function (v, k, c) {
            return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$1);
          });
          return iterations;
        };
        takeSequence.__iteratorUncached = function (type, reverse) {
          var this$1 = this;
          if (reverse) {
            return this.cacheResult().__iterator(type, reverse);
          }
          var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);
          var iterating = true;
          return new Iterator(function () {
            if (!iterating) {
              return iteratorDone();
            }
            var step = iterator.next();
            if (step.done) {
              return step;
            }
            var entry = step.value;
            var k = entry[0];
            var v = entry[1];
            if (!predicate.call(context, v, k, this$1)) {
              iterating = false;
              return iteratorDone();
            }
            return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);
          });
        };
        return takeSequence;
      }
      function skipWhileFactory(collection, predicate, context, useKeys) {
        var skipSequence = makeSequence(collection);
        skipSequence.__iterateUncached = function (fn, reverse) {
          var this$1 = this;
          if (reverse) {
            return this.cacheResult().__iterate(fn, reverse);
          }
          var isSkipping = true;
          var iterations = 0;
          collection.__iterate(function (v, k, c) {
            if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {
              iterations++;
              return fn(v, useKeys ? k : iterations - 1, this$1);
            }
          });
          return iterations;
        };
        skipSequence.__iteratorUncached = function (type, reverse) {
          var this$1 = this;
          if (reverse) {
            return this.cacheResult().__iterator(type, reverse);
          }
          var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);
          var skipping = true;
          var iterations = 0;
          return new Iterator(function () {
            var step;
            var k;
            var v;
            do {
              step = iterator.next();
              if (step.done) {
                if (useKeys || type === ITERATE_VALUES) {
                  return step;
                }
                if (type === ITERATE_KEYS) {
                  return iteratorValue(type, iterations++, void 0, step);
                }
                return iteratorValue(type, iterations++, step.value[1], step);
              }
              var entry = step.value;
              k = entry[0];
              v = entry[1];
              skipping && (skipping = predicate.call(context, v, k, this$1));
            } while (skipping);
            return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);
          });
        };
        return skipSequence;
      }
      function concatFactory(collection, values) {
        var isKeyedCollection = isKeyed(collection);
        var iters = [collection].concat(values).map(function (v) {
          if (!isCollection(v)) {
            v = isKeyedCollection ? keyedSeqFromValue(v) : indexedSeqFromValue(Array.isArray(v) ? v : [v]);
          } else if (isKeyedCollection) {
            v = KeyedCollection(v);
          }
          return v;
        }).filter(function (v) {
          return v.size !== 0;
        });
        if (iters.length === 0) {
          return collection;
        }
        if (iters.length === 1) {
          var singleton = iters[0];
          if (singleton === collection || isKeyedCollection && isKeyed(singleton) || isIndexed(collection) && isIndexed(singleton)) {
            return singleton;
          }
        }
        var concatSeq = new ArraySeq(iters);
        if (isKeyedCollection) {
          concatSeq = concatSeq.toKeyedSeq();
        } else if (!isIndexed(collection)) {
          concatSeq = concatSeq.toSetSeq();
        }
        concatSeq = concatSeq.flatten(true);
        concatSeq.size = iters.reduce(function (sum, seq) {
          if (sum !== void 0) {
            var size = seq.size;
            if (size !== void 0) {
              return sum + size;
            }
          }
        }, 0);
        return concatSeq;
      }
      function flattenFactory(collection, depth, useKeys) {
        var flatSequence = makeSequence(collection);
        flatSequence.__iterateUncached = function (fn, reverse) {
          if (reverse) {
            return this.cacheResult().__iterate(fn, reverse);
          }
          var iterations = 0;
          var stopped = false;
          function flatDeep(iter, currentDepth) {
            iter.__iterate(function (v, k) {
              if ((!depth || currentDepth < depth) && isCollection(v)) {
                flatDeep(v, currentDepth + 1);
              } else {
                iterations++;
                if (fn(v, useKeys ? k : iterations - 1, flatSequence) === false) {
                  stopped = true;
                }
              }
              return !stopped;
            }, reverse);
          }
          flatDeep(collection, 0);
          return iterations;
        };
        flatSequence.__iteratorUncached = function (type, reverse) {
          if (reverse) {
            return this.cacheResult().__iterator(type, reverse);
          }
          var iterator = collection.__iterator(type, reverse);
          var stack = [];
          var iterations = 0;
          return new Iterator(function () {
            while (iterator) {
              var step = iterator.next();
              if (step.done !== false) {
                iterator = stack.pop();
                continue;
              }
              var v = step.value;
              if (type === ITERATE_ENTRIES) {
                v = v[1];
              }
              if ((!depth || stack.length < depth) && isCollection(v)) {
                stack.push(iterator);
                iterator = v.__iterator(type, reverse);
              } else {
                return useKeys ? step : iteratorValue(type, iterations++, v, step);
              }
            }
            return iteratorDone();
          });
        };
        return flatSequence;
      }
      function flatMapFactory(collection, mapper, context) {
        var coerce = collectionClass(collection);
        return collection.toSeq().map(function (v, k) {
          return coerce(mapper.call(context, v, k, collection));
        }).flatten(true);
      }
      function interposeFactory(collection, separator) {
        var interposedSequence = makeSequence(collection);
        interposedSequence.size = collection.size && collection.size * 2 - 1;
        interposedSequence.__iterateUncached = function (fn, reverse) {
          var this$1 = this;
          var iterations = 0;
          collection.__iterate(function (v) {
            return (!iterations || fn(separator, iterations++, this$1) !== false) && fn(v, iterations++, this$1) !== false;
          }, reverse);
          return iterations;
        };
        interposedSequence.__iteratorUncached = function (type, reverse) {
          var iterator = collection.__iterator(ITERATE_VALUES, reverse);
          var iterations = 0;
          var step;
          return new Iterator(function () {
            if (!step || iterations % 2) {
              step = iterator.next();
              if (step.done) {
                return step;
              }
            }
            return iterations % 2 ? iteratorValue(type, iterations++, separator) : iteratorValue(type, iterations++, step.value, step);
          });
        };
        return interposedSequence;
      }
      function sortFactory(collection, comparator, mapper) {
        if (!comparator) {
          comparator = defaultComparator;
        }
        var isKeyedCollection = isKeyed(collection);
        var index = 0;
        var entries = collection.toSeq().map(function (v, k) {
          return [k, v, index++, mapper ? mapper(v, k, collection) : v];
        }).valueSeq().toArray();
        entries.sort(function (a, b) {
          return comparator(a[3], b[3]) || a[2] - b[2];
        }).forEach(isKeyedCollection ? function (v, i) {
          entries[i].length = 2;
        } : function (v, i) {
          entries[i] = v[1];
        });
        return isKeyedCollection ? KeyedSeq(entries) : isIndexed(collection) ? IndexedSeq(entries) : SetSeq(entries);
      }
      function maxFactory(collection, comparator, mapper) {
        if (!comparator) {
          comparator = defaultComparator;
        }
        if (mapper) {
          var entry = collection.toSeq().map(function (v, k) {
            return [v, mapper(v, k, collection)];
          }).reduce(function (a, b) {
            return maxCompare(comparator, a[1], b[1]) ? b : a;
          });
          return entry && entry[0];
        }
        return collection.reduce(function (a, b) {
          return maxCompare(comparator, a, b) ? b : a;
        });
      }
      function maxCompare(comparator, a, b) {
        var comp = comparator(b, a);
        return comp === 0 && b !== a && (b === void 0 || b === null || b !== b) || comp > 0;
      }
      function zipWithFactory(keyIter, zipper, iters, zipAll) {
        var zipSequence = makeSequence(keyIter);
        var sizes = new ArraySeq(iters).map(function (i) {
          return i.size;
        });
        zipSequence.size = zipAll ? sizes.max() : sizes.min();
        zipSequence.__iterate = function (fn, reverse) {
          var iterator = this.__iterator(ITERATE_VALUES, reverse);
          var step;
          var iterations = 0;
          while (!(step = iterator.next()).done) {
            if (fn(step.value, iterations++, this) === false) {
              break;
            }
          }
          return iterations;
        };
        zipSequence.__iteratorUncached = function (type, reverse) {
          var iterators = iters.map(function (i) {
            return (i = Collection(i), getIterator(reverse ? i.reverse() : i));
          });
          var iterations = 0;
          var isDone = false;
          return new Iterator(function () {
            var steps;
            if (!isDone) {
              steps = iterators.map(function (i) {
                return i.next();
              });
              isDone = zipAll ? steps.every(function (s) {
                return s.done;
              }) : steps.some(function (s) {
                return s.done;
              });
            }
            if (isDone) {
              return iteratorDone();
            }
            return iteratorValue(type, iterations++, zipper.apply(null, steps.map(function (s) {
              return s.value;
            })));
          });
        };
        return zipSequence;
      }
      function reify(iter, seq) {
        return iter === seq ? iter : isSeq(iter) ? seq : iter.constructor(seq);
      }
      function validateEntry(entry) {
        if (entry !== Object(entry)) {
          throw new TypeError("Expected [K, V] tuple: " + entry);
        }
      }
      function collectionClass(collection) {
        return isKeyed(collection) ? KeyedCollection : isIndexed(collection) ? IndexedCollection : SetCollection;
      }
      function makeSequence(collection) {
        return Object.create((isKeyed(collection) ? KeyedSeq : isIndexed(collection) ? IndexedSeq : SetSeq).prototype);
      }
      function cacheResultThrough() {
        if (this._iter.cacheResult) {
          this._iter.cacheResult();
          this.size = this._iter.size;
          return this;
        }
        return Seq.prototype.cacheResult.call(this);
      }
      function defaultComparator(a, b) {
        if (a === void 0 && b === void 0) {
          return 0;
        }
        if (a === void 0) {
          return 1;
        }
        if (b === void 0) {
          return -1;
        }
        return a > b ? 1 : a < b ? -1 : 0;
      }
      function arrCopy(arr, offset) {
        offset = offset || 0;
        var len = Math.max(0, arr.length - offset);
        var newArr = new Array(len);
        for (var ii = 0; ii < len; ii++) {
          newArr[ii] = arr[ii + offset];
        }
        return newArr;
      }
      function invariant(condition, error) {
        if (!condition) {
          throw new Error(error);
        }
      }
      function assertNotInfinite(size) {
        invariant(size !== Infinity, "Cannot perform this action with an infinite size.");
      }
      function coerceKeyPath(keyPath) {
        if (isArrayLike(keyPath) && typeof keyPath !== "string") {
          return keyPath;
        }
        if (isOrdered(keyPath)) {
          return keyPath.toArray();
        }
        throw new TypeError("Invalid keyPath: expected Ordered Collection or Array: " + keyPath);
      }
      function isPlainObj(value) {
        return value && (typeof value.constructor !== "function" || value.constructor.name === "Object");
      }
      function isDataStructure(value) {
        return typeof value === "object" && (isImmutable(value) || Array.isArray(value) || isPlainObj(value));
      }
      function quoteString(value) {
        try {
          return typeof value === "string" ? JSON.stringify(value) : String(value);
        } catch (_ignoreError) {
          return JSON.stringify(value);
        }
      }
      function has(collection, key) {
        return isImmutable(collection) ? collection.has(key) : isDataStructure(collection) && hasOwnProperty.call(collection, key);
      }
      function get(collection, key, notSetValue) {
        return isImmutable(collection) ? collection.get(key, notSetValue) : !has(collection, key) ? notSetValue : typeof collection.get === "function" ? collection.get(key) : collection[key];
      }
      function shallowCopy(from) {
        if (Array.isArray(from)) {
          return arrCopy(from);
        }
        var to = {};
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        return to;
      }
      function remove(collection, key) {
        if (!isDataStructure(collection)) {
          throw new TypeError("Cannot update non-data-structure value: " + collection);
        }
        if (isImmutable(collection)) {
          if (!collection.remove) {
            throw new TypeError("Cannot update immutable value without .remove() method: " + collection);
          }
          return collection.remove(key);
        }
        if (!hasOwnProperty.call(collection, key)) {
          return collection;
        }
        var collectionCopy = shallowCopy(collection);
        if (Array.isArray(collectionCopy)) {
          collectionCopy.splice(key, 1);
        } else {
          delete collectionCopy[key];
        }
        return collectionCopy;
      }
      function set(collection, key, value) {
        if (!isDataStructure(collection)) {
          throw new TypeError("Cannot update non-data-structure value: " + collection);
        }
        if (isImmutable(collection)) {
          if (!collection.set) {
            throw new TypeError("Cannot update immutable value without .set() method: " + collection);
          }
          return collection.set(key, value);
        }
        if (hasOwnProperty.call(collection, key) && value === collection[key]) {
          return collection;
        }
        var collectionCopy = shallowCopy(collection);
        collectionCopy[key] = value;
        return collectionCopy;
      }
      function updateIn(collection, keyPath, notSetValue, updater) {
        if (!updater) {
          updater = notSetValue;
          notSetValue = void 0;
        }
        var updatedValue = updateInDeeply(isImmutable(collection), collection, coerceKeyPath(keyPath), 0, notSetValue, updater);
        return updatedValue === NOT_SET ? notSetValue : updatedValue;
      }
      function updateInDeeply(inImmutable, existing, keyPath, i, notSetValue, updater) {
        var wasNotSet = existing === NOT_SET;
        if (i === keyPath.length) {
          var existingValue = wasNotSet ? notSetValue : existing;
          var newValue = updater(existingValue);
          return newValue === existingValue ? existing : newValue;
        }
        if (!wasNotSet && !isDataStructure(existing)) {
          throw new TypeError("Cannot update within non-data-structure value in path [" + keyPath.slice(0, i).map(quoteString) + "]: " + existing);
        }
        var key = keyPath[i];
        var nextExisting = wasNotSet ? NOT_SET : get(existing, key, NOT_SET);
        var nextUpdated = updateInDeeply(nextExisting === NOT_SET ? inImmutable : isImmutable(nextExisting), nextExisting, keyPath, i + 1, notSetValue, updater);
        return nextUpdated === nextExisting ? existing : nextUpdated === NOT_SET ? remove(existing, key) : set(wasNotSet ? inImmutable ? emptyMap() : {} : existing, key, nextUpdated);
      }
      function setIn(collection, keyPath, value) {
        return updateIn(collection, keyPath, NOT_SET, function () {
          return value;
        });
      }
      function setIn$1(keyPath, v) {
        return setIn(this, keyPath, v);
      }
      function removeIn(collection, keyPath) {
        return updateIn(collection, keyPath, function () {
          return NOT_SET;
        });
      }
      function deleteIn(keyPath) {
        return removeIn(this, keyPath);
      }
      function update(collection, key, notSetValue, updater) {
        return updateIn(collection, [key], notSetValue, updater);
      }
      function update$1(key, notSetValue, updater) {
        return arguments.length === 1 ? key(this) : update(this, key, notSetValue, updater);
      }
      function updateIn$1(keyPath, notSetValue, updater) {
        return updateIn(this, keyPath, notSetValue, updater);
      }
      function merge() {
        var iters = [], len = arguments.length;
        while (len--) iters[len] = arguments[len];
        return mergeIntoKeyedWith(this, iters);
      }
      function mergeWith(merger) {
        var iters = [], len = arguments.length - 1;
        while (len-- > 0) iters[len] = arguments[len + 1];
        if (typeof merger !== "function") {
          throw new TypeError("Invalid merger function: " + merger);
        }
        return mergeIntoKeyedWith(this, iters, merger);
      }
      function mergeIntoKeyedWith(collection, collections, merger) {
        var iters = [];
        for (var ii = 0; ii < collections.length; ii++) {
          var collection$1 = KeyedCollection(collections[ii]);
          if (collection$1.size !== 0) {
            iters.push(collection$1);
          }
        }
        if (iters.length === 0) {
          return collection;
        }
        if (collection.toSeq().size === 0 && !collection.__ownerID && iters.length === 1) {
          return collection.constructor(iters[0]);
        }
        return collection.withMutations(function (collection2) {
          var mergeIntoCollection = merger ? function (value, key) {
            update(collection2, key, NOT_SET, function (oldVal) {
              return oldVal === NOT_SET ? value : merger(oldVal, value, key);
            });
          } : function (value, key) {
            collection2.set(key, value);
          };
          for (var ii2 = 0; ii2 < iters.length; ii2++) {
            iters[ii2].forEach(mergeIntoCollection);
          }
        });
      }
      function merge$1(collection) {
        var sources = [], len = arguments.length - 1;
        while (len-- > 0) sources[len] = arguments[len + 1];
        return mergeWithSources(collection, sources);
      }
      function mergeWith$1(merger, collection) {
        var sources = [], len = arguments.length - 2;
        while (len-- > 0) sources[len] = arguments[len + 2];
        return mergeWithSources(collection, sources, merger);
      }
      function mergeDeep(collection) {
        var sources = [], len = arguments.length - 1;
        while (len-- > 0) sources[len] = arguments[len + 1];
        return mergeDeepWithSources(collection, sources);
      }
      function mergeDeepWith(merger, collection) {
        var sources = [], len = arguments.length - 2;
        while (len-- > 0) sources[len] = arguments[len + 2];
        return mergeDeepWithSources(collection, sources, merger);
      }
      function mergeDeepWithSources(collection, sources, merger) {
        return mergeWithSources(collection, sources, deepMergerWith(merger));
      }
      function mergeWithSources(collection, sources, merger) {
        if (!isDataStructure(collection)) {
          throw new TypeError("Cannot merge into non-data-structure value: " + collection);
        }
        if (isImmutable(collection)) {
          return typeof merger === "function" && collection.mergeWith ? collection.mergeWith.apply(collection, [merger].concat(sources)) : collection.merge ? collection.merge.apply(collection, sources) : collection.concat.apply(collection, sources);
        }
        var isArray = Array.isArray(collection);
        var merged = collection;
        var Collection$$1 = isArray ? IndexedCollection : KeyedCollection;
        var mergeItem = isArray ? function (value) {
          if (merged === collection) {
            merged = shallowCopy(merged);
          }
          merged.push(value);
        } : function (value, key) {
          var hasVal = hasOwnProperty.call(merged, key);
          var nextVal = hasVal && merger ? merger(merged[key], value, key) : value;
          if (!hasVal || nextVal !== merged[key]) {
            if (merged === collection) {
              merged = shallowCopy(merged);
            }
            merged[key] = nextVal;
          }
        };
        for (var i = 0; i < sources.length; i++) {
          Collection$$1(sources[i]).forEach(mergeItem);
        }
        return merged;
      }
      function deepMergerWith(merger) {
        function deepMerger(oldValue, newValue, key) {
          return isDataStructure(oldValue) && isDataStructure(newValue) ? mergeWithSources(oldValue, [newValue], deepMerger) : merger ? merger(oldValue, newValue, key) : newValue;
        }
        return deepMerger;
      }
      function mergeDeep$1() {
        var iters = [], len = arguments.length;
        while (len--) iters[len] = arguments[len];
        return mergeDeepWithSources(this, iters);
      }
      function mergeDeepWith$1(merger) {
        var iters = [], len = arguments.length - 1;
        while (len-- > 0) iters[len] = arguments[len + 1];
        return mergeDeepWithSources(this, iters, merger);
      }
      function mergeIn(keyPath) {
        var iters = [], len = arguments.length - 1;
        while (len-- > 0) iters[len] = arguments[len + 1];
        return updateIn(this, keyPath, emptyMap(), function (m) {
          return mergeWithSources(m, iters);
        });
      }
      function mergeDeepIn(keyPath) {
        var iters = [], len = arguments.length - 1;
        while (len-- > 0) iters[len] = arguments[len + 1];
        return updateIn(this, keyPath, emptyMap(), function (m) {
          return mergeDeepWithSources(m, iters);
        });
      }
      function withMutations(fn) {
        var mutable = this.asMutable();
        fn(mutable);
        return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;
      }
      function asMutable() {
        return this.__ownerID ? this : this.__ensureOwner(new OwnerID());
      }
      function asImmutable() {
        return this.__ensureOwner();
      }
      function wasAltered() {
        return this.__altered;
      }
      var Map2 = /*@__PURE__*/(function (KeyedCollection$$1) {
        function Map3(value) {
          return value === null || value === void 0 ? emptyMap() : isMap(value) && !isOrdered(value) ? value : emptyMap().withMutations(function (map) {
            var iter = KeyedCollection$$1(value);
            assertNotInfinite(iter.size);
            iter.forEach(function (v, k) {
              return map.set(k, v);
            });
          });
        }
        if (KeyedCollection$$1) Map3.__proto__ = KeyedCollection$$1;
        Map3.prototype = Object.create(KeyedCollection$$1 && KeyedCollection$$1.prototype);
        Map3.prototype.constructor = Map3;
        Map3.of = function of() {
          var keyValues = [], len = arguments.length;
          while (len--) keyValues[len] = arguments[len];
          return emptyMap().withMutations(function (map) {
            for (var i = 0; i < keyValues.length; i += 2) {
              if (i + 1 >= keyValues.length) {
                throw new Error("Missing value for key: " + keyValues[i]);
              }
              map.set(keyValues[i], keyValues[i + 1]);
            }
          });
        };
        Map3.prototype.toString = function toString() {
          return this.__toString("Map {", "}");
        };
        Map3.prototype.get = function get2(k, notSetValue) {
          return this._root ? this._root.get(0, void 0, k, notSetValue) : notSetValue;
        };
        Map3.prototype.set = function set2(k, v) {
          return updateMap(this, k, v);
        };
        Map3.prototype.remove = function remove2(k) {
          return updateMap(this, k, NOT_SET);
        };
        Map3.prototype.deleteAll = function deleteAll(keys) {
          var collection = Collection(keys);
          if (collection.size === 0) {
            return this;
          }
          return this.withMutations(function (map) {
            collection.forEach(function (key) {
              return map.remove(key);
            });
          });
        };
        Map3.prototype.clear = function clear() {
          if (this.size === 0) {
            return this;
          }
          if (this.__ownerID) {
            this.size = 0;
            this._root = null;
            this.__hash = void 0;
            this.__altered = true;
            return this;
          }
          return emptyMap();
        };
        Map3.prototype.sort = function sort(comparator) {
          return OrderedMap(sortFactory(this, comparator));
        };
        Map3.prototype.sortBy = function sortBy(mapper, comparator) {
          return OrderedMap(sortFactory(this, comparator, mapper));
        };
        Map3.prototype.map = function map(mapper, context) {
          return this.withMutations(function (map2) {
            map2.forEach(function (value, key) {
              map2.set(key, mapper.call(context, value, key, map2));
            });
          });
        };
        Map3.prototype.__iterator = function __iterator(type, reverse) {
          return new MapIterator(this, type, reverse);
        };
        Map3.prototype.__iterate = function __iterate(fn, reverse) {
          var this$1 = this;
          var iterations = 0;
          this._root && this._root.iterate(function (entry) {
            iterations++;
            return fn(entry[1], entry[0], this$1);
          }, reverse);
          return iterations;
        };
        Map3.prototype.__ensureOwner = function __ensureOwner(ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          if (!ownerID) {
            if (this.size === 0) {
              return emptyMap();
            }
            this.__ownerID = ownerID;
            this.__altered = false;
            return this;
          }
          return makeMap(this.size, this._root, ownerID, this.__hash);
        };
        return Map3;
      })(KeyedCollection);
      Map2.isMap = isMap;
      var MapPrototype = Map2.prototype;
      MapPrototype[IS_MAP_SYMBOL] = true;
      MapPrototype[DELETE] = MapPrototype.remove;
      MapPrototype.removeAll = MapPrototype.deleteAll;
      MapPrototype.setIn = setIn$1;
      MapPrototype.removeIn = MapPrototype.deleteIn = deleteIn;
      MapPrototype.update = update$1;
      MapPrototype.updateIn = updateIn$1;
      MapPrototype.merge = MapPrototype.concat = merge;
      MapPrototype.mergeWith = mergeWith;
      MapPrototype.mergeDeep = mergeDeep$1;
      MapPrototype.mergeDeepWith = mergeDeepWith$1;
      MapPrototype.mergeIn = mergeIn;
      MapPrototype.mergeDeepIn = mergeDeepIn;
      MapPrototype.withMutations = withMutations;
      MapPrototype.wasAltered = wasAltered;
      MapPrototype.asImmutable = asImmutable;
      MapPrototype["@@transducer/init"] = MapPrototype.asMutable = asMutable;
      MapPrototype["@@transducer/step"] = function (result, arr) {
        return result.set(arr[0], arr[1]);
      };
      MapPrototype["@@transducer/result"] = function (obj) {
        return obj.asImmutable();
      };
      var ArrayMapNode = function ArrayMapNode2(ownerID, entries) {
        this.ownerID = ownerID;
        this.entries = entries;
      };
      ArrayMapNode.prototype.get = function get2(shift, keyHash, key, notSetValue) {
        var entries = this.entries;
        for (var ii = 0, len = entries.length; ii < len; ii++) {
          if (is(key, entries[ii][0])) {
            return entries[ii][1];
          }
        }
        return notSetValue;
      };
      ArrayMapNode.prototype.update = function update2(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
        var removed = value === NOT_SET;
        var entries = this.entries;
        var idx = 0;
        var len = entries.length;
        for (; idx < len; idx++) {
          if (is(key, entries[idx][0])) {
            break;
          }
        }
        var exists = idx < len;
        if (exists ? entries[idx][1] === value : removed) {
          return this;
        }
        SetRef(didAlter);
        (removed || !exists) && SetRef(didChangeSize);
        if (removed && entries.length === 1) {
          return;
        }
        if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {
          return createNodes(ownerID, entries, key, value);
        }
        var isEditable = ownerID && ownerID === this.ownerID;
        var newEntries = isEditable ? entries : arrCopy(entries);
        if (exists) {
          if (removed) {
            idx === len - 1 ? newEntries.pop() : newEntries[idx] = newEntries.pop();
          } else {
            newEntries[idx] = [key, value];
          }
        } else {
          newEntries.push([key, value]);
        }
        if (isEditable) {
          this.entries = newEntries;
          return this;
        }
        return new ArrayMapNode(ownerID, newEntries);
      };
      var BitmapIndexedNode = function BitmapIndexedNode2(ownerID, bitmap, nodes) {
        this.ownerID = ownerID;
        this.bitmap = bitmap;
        this.nodes = nodes;
      };
      BitmapIndexedNode.prototype.get = function get2(shift, keyHash, key, notSetValue) {
        if (keyHash === void 0) {
          keyHash = hash(key);
        }
        var bit = 1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK);
        var bitmap = this.bitmap;
        return (bitmap & bit) === 0 ? notSetValue : this.nodes[popCount(bitmap & bit - 1)].get(shift + SHIFT, keyHash, key, notSetValue);
      };
      BitmapIndexedNode.prototype.update = function update2(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
        if (keyHash === void 0) {
          keyHash = hash(key);
        }
        var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
        var bit = 1 << keyHashFrag;
        var bitmap = this.bitmap;
        var exists = (bitmap & bit) !== 0;
        if (!exists && value === NOT_SET) {
          return this;
        }
        var idx = popCount(bitmap & bit - 1);
        var nodes = this.nodes;
        var node = exists ? nodes[idx] : void 0;
        var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);
        if (newNode === node) {
          return this;
        }
        if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {
          return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);
        }
        if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {
          return nodes[idx ^ 1];
        }
        if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {
          return newNode;
        }
        var isEditable = ownerID && ownerID === this.ownerID;
        var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;
        var newNodes = exists ? newNode ? setAt(nodes, idx, newNode, isEditable) : spliceOut(nodes, idx, isEditable) : spliceIn(nodes, idx, newNode, isEditable);
        if (isEditable) {
          this.bitmap = newBitmap;
          this.nodes = newNodes;
          return this;
        }
        return new BitmapIndexedNode(ownerID, newBitmap, newNodes);
      };
      var HashArrayMapNode = function HashArrayMapNode2(ownerID, count, nodes) {
        this.ownerID = ownerID;
        this.count = count;
        this.nodes = nodes;
      };
      HashArrayMapNode.prototype.get = function get2(shift, keyHash, key, notSetValue) {
        if (keyHash === void 0) {
          keyHash = hash(key);
        }
        var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
        var node = this.nodes[idx];
        return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;
      };
      HashArrayMapNode.prototype.update = function update2(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
        if (keyHash === void 0) {
          keyHash = hash(key);
        }
        var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
        var removed = value === NOT_SET;
        var nodes = this.nodes;
        var node = nodes[idx];
        if (removed && !node) {
          return this;
        }
        var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);
        if (newNode === node) {
          return this;
        }
        var newCount = this.count;
        if (!node) {
          newCount++;
        } else if (!newNode) {
          newCount--;
          if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {
            return packNodes(ownerID, nodes, newCount, idx);
          }
        }
        var isEditable = ownerID && ownerID === this.ownerID;
        var newNodes = setAt(nodes, idx, newNode, isEditable);
        if (isEditable) {
          this.count = newCount;
          this.nodes = newNodes;
          return this;
        }
        return new HashArrayMapNode(ownerID, newCount, newNodes);
      };
      var HashCollisionNode = function HashCollisionNode2(ownerID, keyHash, entries) {
        this.ownerID = ownerID;
        this.keyHash = keyHash;
        this.entries = entries;
      };
      HashCollisionNode.prototype.get = function get2(shift, keyHash, key, notSetValue) {
        var entries = this.entries;
        for (var ii = 0, len = entries.length; ii < len; ii++) {
          if (is(key, entries[ii][0])) {
            return entries[ii][1];
          }
        }
        return notSetValue;
      };
      HashCollisionNode.prototype.update = function update2(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
        if (keyHash === void 0) {
          keyHash = hash(key);
        }
        var removed = value === NOT_SET;
        if (keyHash !== this.keyHash) {
          if (removed) {
            return this;
          }
          SetRef(didAlter);
          SetRef(didChangeSize);
          return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);
        }
        var entries = this.entries;
        var idx = 0;
        var len = entries.length;
        for (; idx < len; idx++) {
          if (is(key, entries[idx][0])) {
            break;
          }
        }
        var exists = idx < len;
        if (exists ? entries[idx][1] === value : removed) {
          return this;
        }
        SetRef(didAlter);
        (removed || !exists) && SetRef(didChangeSize);
        if (removed && len === 2) {
          return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);
        }
        var isEditable = ownerID && ownerID === this.ownerID;
        var newEntries = isEditable ? entries : arrCopy(entries);
        if (exists) {
          if (removed) {
            idx === len - 1 ? newEntries.pop() : newEntries[idx] = newEntries.pop();
          } else {
            newEntries[idx] = [key, value];
          }
        } else {
          newEntries.push([key, value]);
        }
        if (isEditable) {
          this.entries = newEntries;
          return this;
        }
        return new HashCollisionNode(ownerID, this.keyHash, newEntries);
      };
      var ValueNode = function ValueNode2(ownerID, keyHash, entry) {
        this.ownerID = ownerID;
        this.keyHash = keyHash;
        this.entry = entry;
      };
      ValueNode.prototype.get = function get2(shift, keyHash, key, notSetValue) {
        return is(key, this.entry[0]) ? this.entry[1] : notSetValue;
      };
      ValueNode.prototype.update = function update2(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
        var removed = value === NOT_SET;
        var keyMatch = is(key, this.entry[0]);
        if (keyMatch ? value === this.entry[1] : removed) {
          return this;
        }
        SetRef(didAlter);
        if (removed) {
          SetRef(didChangeSize);
          return;
        }
        if (keyMatch) {
          if (ownerID && ownerID === this.ownerID) {
            this.entry[1] = value;
            return this;
          }
          return new ValueNode(ownerID, this.keyHash, [key, value]);
        }
        SetRef(didChangeSize);
        return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);
      };
      ArrayMapNode.prototype.iterate = HashCollisionNode.prototype.iterate = function (fn, reverse) {
        var entries = this.entries;
        for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {
          if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {
            return false;
          }
        }
      };
      BitmapIndexedNode.prototype.iterate = HashArrayMapNode.prototype.iterate = function (fn, reverse) {
        var nodes = this.nodes;
        for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {
          var node = nodes[reverse ? maxIndex - ii : ii];
          if (node && node.iterate(fn, reverse) === false) {
            return false;
          }
        }
      };
      ValueNode.prototype.iterate = function (fn, reverse) {
        return fn(this.entry);
      };
      var MapIterator = /*@__PURE__*/(function (Iterator$$1) {
        function MapIterator2(map, type, reverse) {
          this._type = type;
          this._reverse = reverse;
          this._stack = map._root && mapIteratorFrame(map._root);
        }
        if (Iterator$$1) MapIterator2.__proto__ = Iterator$$1;
        MapIterator2.prototype = Object.create(Iterator$$1 && Iterator$$1.prototype);
        MapIterator2.prototype.constructor = MapIterator2;
        MapIterator2.prototype.next = function next() {
          var type = this._type;
          var stack = this._stack;
          while (stack) {
            var node = stack.node;
            var index = stack.index++;
            var maxIndex = void 0;
            if (node.entry) {
              if (index === 0) {
                return mapIteratorValue(type, node.entry);
              }
            } else if (node.entries) {
              maxIndex = node.entries.length - 1;
              if (index <= maxIndex) {
                return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);
              }
            } else {
              maxIndex = node.nodes.length - 1;
              if (index <= maxIndex) {
                var subNode = node.nodes[this._reverse ? maxIndex - index : index];
                if (subNode) {
                  if (subNode.entry) {
                    return mapIteratorValue(type, subNode.entry);
                  }
                  stack = this._stack = mapIteratorFrame(subNode, stack);
                }
                continue;
              }
            }
            stack = this._stack = this._stack.__prev;
          }
          return iteratorDone();
        };
        return MapIterator2;
      })(Iterator);
      function mapIteratorValue(type, entry) {
        return iteratorValue(type, entry[0], entry[1]);
      }
      function mapIteratorFrame(node, prev) {
        return {
          node,
          index: 0,
          __prev: prev
        };
      }
      function makeMap(size, root, ownerID, hash$$1) {
        var map = Object.create(MapPrototype);
        map.size = size;
        map._root = root;
        map.__ownerID = ownerID;
        map.__hash = hash$$1;
        map.__altered = false;
        return map;
      }
      var EMPTY_MAP;
      function emptyMap() {
        return EMPTY_MAP || (EMPTY_MAP = makeMap(0));
      }
      function updateMap(map, k, v) {
        var newRoot;
        var newSize;
        if (!map._root) {
          if (v === NOT_SET) {
            return map;
          }
          newSize = 1;
          newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);
        } else {
          var didChangeSize = MakeRef();
          var didAlter = MakeRef();
          newRoot = updateNode(map._root, map.__ownerID, 0, void 0, k, v, didChangeSize, didAlter);
          if (!didAlter.value) {
            return map;
          }
          newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);
        }
        if (map.__ownerID) {
          map.size = newSize;
          map._root = newRoot;
          map.__hash = void 0;
          map.__altered = true;
          return map;
        }
        return newRoot ? makeMap(newSize, newRoot) : emptyMap();
      }
      function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
        if (!node) {
          if (value === NOT_SET) {
            return node;
          }
          SetRef(didAlter);
          SetRef(didChangeSize);
          return new ValueNode(ownerID, keyHash, [key, value]);
        }
        return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);
      }
      function isLeafNode(node) {
        return node.constructor === ValueNode || node.constructor === HashCollisionNode;
      }
      function mergeIntoNode(node, ownerID, shift, keyHash, entry) {
        if (node.keyHash === keyHash) {
          return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);
        }
        var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;
        var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
        var newNode;
        var nodes = idx1 === idx2 ? [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] : (newNode = new ValueNode(ownerID, keyHash, entry), idx1 < idx2 ? [node, newNode] : [newNode, node]);
        return new BitmapIndexedNode(ownerID, 1 << idx1 | 1 << idx2, nodes);
      }
      function createNodes(ownerID, entries, key, value) {
        if (!ownerID) {
          ownerID = new OwnerID();
        }
        var node = new ValueNode(ownerID, hash(key), [key, value]);
        for (var ii = 0; ii < entries.length; ii++) {
          var entry = entries[ii];
          node = node.update(ownerID, 0, void 0, entry[0], entry[1]);
        }
        return node;
      }
      function packNodes(ownerID, nodes, count, excluding) {
        var bitmap = 0;
        var packedII = 0;
        var packedNodes = new Array(count);
        for (var ii = 0, bit = 1, len = nodes.length; ii < len; (ii++, bit <<= 1)) {
          var node = nodes[ii];
          if (node !== void 0 && ii !== excluding) {
            bitmap |= bit;
            packedNodes[packedII++] = node;
          }
        }
        return new BitmapIndexedNode(ownerID, bitmap, packedNodes);
      }
      function expandNodes(ownerID, nodes, bitmap, including, node) {
        var count = 0;
        var expandedNodes = new Array(SIZE);
        for (var ii = 0; bitmap !== 0; (ii++, bitmap >>>= 1)) {
          expandedNodes[ii] = bitmap & 1 ? nodes[count++] : void 0;
        }
        expandedNodes[including] = node;
        return new HashArrayMapNode(ownerID, count + 1, expandedNodes);
      }
      function popCount(x) {
        x -= x >> 1 & 1431655765;
        x = (x & 858993459) + (x >> 2 & 858993459);
        x = x + (x >> 4) & 252645135;
        x += x >> 8;
        x += x >> 16;
        return x & 127;
      }
      function setAt(array, idx, val, canEdit) {
        var newArray = canEdit ? array : arrCopy(array);
        newArray[idx] = val;
        return newArray;
      }
      function spliceIn(array, idx, val, canEdit) {
        var newLen = array.length + 1;
        if (canEdit && idx + 1 === newLen) {
          array[idx] = val;
          return array;
        }
        var newArray = new Array(newLen);
        var after = 0;
        for (var ii = 0; ii < newLen; ii++) {
          if (ii === idx) {
            newArray[ii] = val;
            after = -1;
          } else {
            newArray[ii] = array[ii + after];
          }
        }
        return newArray;
      }
      function spliceOut(array, idx, canEdit) {
        var newLen = array.length - 1;
        if (canEdit && idx === newLen) {
          array.pop();
          return array;
        }
        var newArray = new Array(newLen);
        var after = 0;
        for (var ii = 0; ii < newLen; ii++) {
          if (ii === idx) {
            after = 1;
          }
          newArray[ii] = array[ii + after];
        }
        return newArray;
      }
      var MAX_ARRAY_MAP_SIZE = SIZE / 4;
      var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;
      var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;
      var IS_LIST_SYMBOL = "@@__IMMUTABLE_LIST__@@";
      function isList(maybeList) {
        return Boolean(maybeList && maybeList[IS_LIST_SYMBOL]);
      }
      var List = /*@__PURE__*/(function (IndexedCollection$$1) {
        function List2(value) {
          var empty = emptyList();
          if (value === null || value === void 0) {
            return empty;
          }
          if (isList(value)) {
            return value;
          }
          var iter = IndexedCollection$$1(value);
          var size = iter.size;
          if (size === 0) {
            return empty;
          }
          assertNotInfinite(size);
          if (size > 0 && size < SIZE) {
            return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));
          }
          return empty.withMutations(function (list) {
            list.setSize(size);
            iter.forEach(function (v, i) {
              return list.set(i, v);
            });
          });
        }
        if (IndexedCollection$$1) List2.__proto__ = IndexedCollection$$1;
        List2.prototype = Object.create(IndexedCollection$$1 && IndexedCollection$$1.prototype);
        List2.prototype.constructor = List2;
        List2.of = function of() {
          return this(arguments);
        };
        List2.prototype.toString = function toString() {
          return this.__toString("List [", "]");
        };
        List2.prototype.get = function get2(index, notSetValue) {
          index = wrapIndex(this, index);
          if (index >= 0 && index < this.size) {
            index += this._origin;
            var node = listNodeFor(this, index);
            return node && node.array[index & MASK];
          }
          return notSetValue;
        };
        List2.prototype.set = function set2(index, value) {
          return updateList(this, index, value);
        };
        List2.prototype.remove = function remove2(index) {
          return !this.has(index) ? this : index === 0 ? this.shift() : index === this.size - 1 ? this.pop() : this.splice(index, 1);
        };
        List2.prototype.insert = function insert(index, value) {
          return this.splice(index, 0, value);
        };
        List2.prototype.clear = function clear() {
          if (this.size === 0) {
            return this;
          }
          if (this.__ownerID) {
            this.size = this._origin = this._capacity = 0;
            this._level = SHIFT;
            this._root = this._tail = null;
            this.__hash = void 0;
            this.__altered = true;
            return this;
          }
          return emptyList();
        };
        List2.prototype.push = function push() {
          var values = arguments;
          var oldSize = this.size;
          return this.withMutations(function (list) {
            setListBounds(list, 0, oldSize + values.length);
            for (var ii = 0; ii < values.length; ii++) {
              list.set(oldSize + ii, values[ii]);
            }
          });
        };
        List2.prototype.pop = function pop() {
          return setListBounds(this, 0, -1);
        };
        List2.prototype.unshift = function unshift() {
          var values = arguments;
          return this.withMutations(function (list) {
            setListBounds(list, -values.length);
            for (var ii = 0; ii < values.length; ii++) {
              list.set(ii, values[ii]);
            }
          });
        };
        List2.prototype.shift = function shift() {
          return setListBounds(this, 1);
        };
        List2.prototype.concat = function concat() {
          var arguments$1 = arguments;
          var seqs = [];
          for (var i = 0; i < arguments.length; i++) {
            var argument = arguments$1[i];
            var seq = IndexedCollection$$1(typeof argument !== "string" && hasIterator(argument) ? argument : [argument]);
            if (seq.size !== 0) {
              seqs.push(seq);
            }
          }
          if (seqs.length === 0) {
            return this;
          }
          if (this.size === 0 && !this.__ownerID && seqs.length === 1) {
            return this.constructor(seqs[0]);
          }
          return this.withMutations(function (list) {
            seqs.forEach(function (seq2) {
              return seq2.forEach(function (value) {
                return list.push(value);
              });
            });
          });
        };
        List2.prototype.setSize = function setSize(size) {
          return setListBounds(this, 0, size);
        };
        List2.prototype.map = function map(mapper, context) {
          var this$1 = this;
          return this.withMutations(function (list) {
            for (var i = 0; i < this$1.size; i++) {
              list.set(i, mapper.call(context, list.get(i), i, list));
            }
          });
        };
        List2.prototype.slice = function slice(begin, end) {
          var size = this.size;
          if (wholeSlice(begin, end, size)) {
            return this;
          }
          return setListBounds(this, resolveBegin(begin, size), resolveEnd(end, size));
        };
        List2.prototype.__iterator = function __iterator(type, reverse) {
          var index = reverse ? this.size : 0;
          var values = iterateList(this, reverse);
          return new Iterator(function () {
            var value = values();
            return value === DONE ? iteratorDone() : iteratorValue(type, reverse ? --index : index++, value);
          });
        };
        List2.prototype.__iterate = function __iterate(fn, reverse) {
          var index = reverse ? this.size : 0;
          var values = iterateList(this, reverse);
          var value;
          while ((value = values()) !== DONE) {
            if (fn(value, reverse ? --index : index++, this) === false) {
              break;
            }
          }
          return index;
        };
        List2.prototype.__ensureOwner = function __ensureOwner(ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          if (!ownerID) {
            if (this.size === 0) {
              return emptyList();
            }
            this.__ownerID = ownerID;
            this.__altered = false;
            return this;
          }
          return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);
        };
        return List2;
      })(IndexedCollection);
      List.isList = isList;
      var ListPrototype = List.prototype;
      ListPrototype[IS_LIST_SYMBOL] = true;
      ListPrototype[DELETE] = ListPrototype.remove;
      ListPrototype.merge = ListPrototype.concat;
      ListPrototype.setIn = setIn$1;
      ListPrototype.deleteIn = ListPrototype.removeIn = deleteIn;
      ListPrototype.update = update$1;
      ListPrototype.updateIn = updateIn$1;
      ListPrototype.mergeIn = mergeIn;
      ListPrototype.mergeDeepIn = mergeDeepIn;
      ListPrototype.withMutations = withMutations;
      ListPrototype.wasAltered = wasAltered;
      ListPrototype.asImmutable = asImmutable;
      ListPrototype["@@transducer/init"] = ListPrototype.asMutable = asMutable;
      ListPrototype["@@transducer/step"] = function (result, arr) {
        return result.push(arr);
      };
      ListPrototype["@@transducer/result"] = function (obj) {
        return obj.asImmutable();
      };
      var VNode = function VNode2(array, ownerID) {
        this.array = array;
        this.ownerID = ownerID;
      };
      VNode.prototype.removeBefore = function removeBefore(ownerID, level, index) {
        if (index === level ? 1 << level : this.array.length === 0) {
          return this;
        }
        var originIndex = index >>> level & MASK;
        if (originIndex >= this.array.length) {
          return new VNode([], ownerID);
        }
        var removingFirst = originIndex === 0;
        var newChild;
        if (level > 0) {
          var oldChild = this.array[originIndex];
          newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);
          if (newChild === oldChild && removingFirst) {
            return this;
          }
        }
        if (removingFirst && !newChild) {
          return this;
        }
        var editable = editableVNode(this, ownerID);
        if (!removingFirst) {
          for (var ii = 0; ii < originIndex; ii++) {
            editable.array[ii] = void 0;
          }
        }
        if (newChild) {
          editable.array[originIndex] = newChild;
        }
        return editable;
      };
      VNode.prototype.removeAfter = function removeAfter(ownerID, level, index) {
        if (index === (level ? 1 << level : 0) || this.array.length === 0) {
          return this;
        }
        var sizeIndex = index - 1 >>> level & MASK;
        if (sizeIndex >= this.array.length) {
          return this;
        }
        var newChild;
        if (level > 0) {
          var oldChild = this.array[sizeIndex];
          newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);
          if (newChild === oldChild && sizeIndex === this.array.length - 1) {
            return this;
          }
        }
        var editable = editableVNode(this, ownerID);
        editable.array.splice(sizeIndex + 1);
        if (newChild) {
          editable.array[sizeIndex] = newChild;
        }
        return editable;
      };
      var DONE = {};
      function iterateList(list, reverse) {
        var left = list._origin;
        var right = list._capacity;
        var tailPos = getTailOffset(right);
        var tail = list._tail;
        return iterateNodeOrLeaf(list._root, list._level, 0);
        function iterateNodeOrLeaf(node, level, offset) {
          return level === 0 ? iterateLeaf(node, offset) : iterateNode(node, level, offset);
        }
        function iterateLeaf(node, offset) {
          var array = offset === tailPos ? tail && tail.array : node && node.array;
          var from = offset > left ? 0 : left - offset;
          var to = right - offset;
          if (to > SIZE) {
            to = SIZE;
          }
          return function () {
            if (from === to) {
              return DONE;
            }
            var idx = reverse ? --to : from++;
            return array && array[idx];
          };
        }
        function iterateNode(node, level, offset) {
          var values;
          var array = node && node.array;
          var from = offset > left ? 0 : left - offset >> level;
          var to = (right - offset >> level) + 1;
          if (to > SIZE) {
            to = SIZE;
          }
          return function () {
            while (true) {
              if (values) {
                var value = values();
                if (value !== DONE) {
                  return value;
                }
                values = null;
              }
              if (from === to) {
                return DONE;
              }
              var idx = reverse ? --to : from++;
              values = iterateNodeOrLeaf(array && array[idx], level - SHIFT, offset + (idx << level));
            }
          };
        }
      }
      function makeList(origin, capacity, level, root, tail, ownerID, hash2) {
        var list = Object.create(ListPrototype);
        list.size = capacity - origin;
        list._origin = origin;
        list._capacity = capacity;
        list._level = level;
        list._root = root;
        list._tail = tail;
        list.__ownerID = ownerID;
        list.__hash = hash2;
        list.__altered = false;
        return list;
      }
      var EMPTY_LIST;
      function emptyList() {
        return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));
      }
      function updateList(list, index, value) {
        index = wrapIndex(list, index);
        if (index !== index) {
          return list;
        }
        if (index >= list.size || index < 0) {
          return list.withMutations(function (list2) {
            index < 0 ? setListBounds(list2, index).set(0, value) : setListBounds(list2, 0, index + 1).set(index, value);
          });
        }
        index += list._origin;
        var newTail = list._tail;
        var newRoot = list._root;
        var didAlter = MakeRef();
        if (index >= getTailOffset(list._capacity)) {
          newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);
        } else {
          newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);
        }
        if (!didAlter.value) {
          return list;
        }
        if (list.__ownerID) {
          list._root = newRoot;
          list._tail = newTail;
          list.__hash = void 0;
          list.__altered = true;
          return list;
        }
        return makeList(list._origin, list._capacity, list._level, newRoot, newTail);
      }
      function updateVNode(node, ownerID, level, index, value, didAlter) {
        var idx = index >>> level & MASK;
        var nodeHas = node && idx < node.array.length;
        if (!nodeHas && value === void 0) {
          return node;
        }
        var newNode;
        if (level > 0) {
          var lowerNode = node && node.array[idx];
          var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);
          if (newLowerNode === lowerNode) {
            return node;
          }
          newNode = editableVNode(node, ownerID);
          newNode.array[idx] = newLowerNode;
          return newNode;
        }
        if (nodeHas && node.array[idx] === value) {
          return node;
        }
        if (didAlter) {
          SetRef(didAlter);
        }
        newNode = editableVNode(node, ownerID);
        if (value === void 0 && idx === newNode.array.length - 1) {
          newNode.array.pop();
        } else {
          newNode.array[idx] = value;
        }
        return newNode;
      }
      function editableVNode(node, ownerID) {
        if (ownerID && node && ownerID === node.ownerID) {
          return node;
        }
        return new VNode(node ? node.array.slice() : [], ownerID);
      }
      function listNodeFor(list, rawIndex) {
        if (rawIndex >= getTailOffset(list._capacity)) {
          return list._tail;
        }
        if (rawIndex < 1 << list._level + SHIFT) {
          var node = list._root;
          var level = list._level;
          while (node && level > 0) {
            node = node.array[rawIndex >>> level & MASK];
            level -= SHIFT;
          }
          return node;
        }
      }
      function setListBounds(list, begin, end) {
        if (begin !== void 0) {
          begin |= 0;
        }
        if (end !== void 0) {
          end |= 0;
        }
        var owner = list.__ownerID || new OwnerID();
        var oldOrigin = list._origin;
        var oldCapacity = list._capacity;
        var newOrigin = oldOrigin + begin;
        var newCapacity = end === void 0 ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;
        if (newOrigin === oldOrigin && newCapacity === oldCapacity) {
          return list;
        }
        if (newOrigin >= newCapacity) {
          return list.clear();
        }
        var newLevel = list._level;
        var newRoot = list._root;
        var offsetShift = 0;
        while (newOrigin + offsetShift < 0) {
          newRoot = new VNode(newRoot && newRoot.array.length ? [void 0, newRoot] : [], owner);
          newLevel += SHIFT;
          offsetShift += 1 << newLevel;
        }
        if (offsetShift) {
          newOrigin += offsetShift;
          oldOrigin += offsetShift;
          newCapacity += offsetShift;
          oldCapacity += offsetShift;
        }
        var oldTailOffset = getTailOffset(oldCapacity);
        var newTailOffset = getTailOffset(newCapacity);
        while (newTailOffset >= 1 << newLevel + SHIFT) {
          newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);
          newLevel += SHIFT;
        }
        var oldTail = list._tail;
        var newTail = newTailOffset < oldTailOffset ? listNodeFor(list, newCapacity - 1) : newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;
        if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {
          newRoot = editableVNode(newRoot, owner);
          var node = newRoot;
          for (var level = newLevel; level > SHIFT; level -= SHIFT) {
            var idx = oldTailOffset >>> level & MASK;
            node = node.array[idx] = editableVNode(node.array[idx], owner);
          }
          node.array[oldTailOffset >>> SHIFT & MASK] = oldTail;
        }
        if (newCapacity < oldCapacity) {
          newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);
        }
        if (newOrigin >= newTailOffset) {
          newOrigin -= newTailOffset;
          newCapacity -= newTailOffset;
          newLevel = SHIFT;
          newRoot = null;
          newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);
        } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {
          offsetShift = 0;
          while (newRoot) {
            var beginIndex = newOrigin >>> newLevel & MASK;
            if (beginIndex !== newTailOffset >>> newLevel & MASK) {
              break;
            }
            if (beginIndex) {
              offsetShift += (1 << newLevel) * beginIndex;
            }
            newLevel -= SHIFT;
            newRoot = newRoot.array[beginIndex];
          }
          if (newRoot && newOrigin > oldOrigin) {
            newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);
          }
          if (newRoot && newTailOffset < oldTailOffset) {
            newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);
          }
          if (offsetShift) {
            newOrigin -= offsetShift;
            newCapacity -= offsetShift;
          }
        }
        if (list.__ownerID) {
          list.size = newCapacity - newOrigin;
          list._origin = newOrigin;
          list._capacity = newCapacity;
          list._level = newLevel;
          list._root = newRoot;
          list._tail = newTail;
          list.__hash = void 0;
          list.__altered = true;
          return list;
        }
        return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);
      }
      function getTailOffset(size) {
        return size < SIZE ? 0 : size - 1 >>> SHIFT << SHIFT;
      }
      var OrderedMap = /*@__PURE__*/(function (Map$$1) {
        function OrderedMap2(value) {
          return value === null || value === void 0 ? emptyOrderedMap() : isOrderedMap(value) ? value : emptyOrderedMap().withMutations(function (map) {
            var iter = KeyedCollection(value);
            assertNotInfinite(iter.size);
            iter.forEach(function (v, k) {
              return map.set(k, v);
            });
          });
        }
        if (Map$$1) OrderedMap2.__proto__ = Map$$1;
        OrderedMap2.prototype = Object.create(Map$$1 && Map$$1.prototype);
        OrderedMap2.prototype.constructor = OrderedMap2;
        OrderedMap2.of = function of() {
          return this(arguments);
        };
        OrderedMap2.prototype.toString = function toString() {
          return this.__toString("OrderedMap {", "}");
        };
        OrderedMap2.prototype.get = function get2(k, notSetValue) {
          var index = this._map.get(k);
          return index !== void 0 ? this._list.get(index)[1] : notSetValue;
        };
        OrderedMap2.prototype.clear = function clear() {
          if (this.size === 0) {
            return this;
          }
          if (this.__ownerID) {
            this.size = 0;
            this._map.clear();
            this._list.clear();
            return this;
          }
          return emptyOrderedMap();
        };
        OrderedMap2.prototype.set = function set2(k, v) {
          return updateOrderedMap(this, k, v);
        };
        OrderedMap2.prototype.remove = function remove2(k) {
          return updateOrderedMap(this, k, NOT_SET);
        };
        OrderedMap2.prototype.wasAltered = function wasAltered2() {
          return this._map.wasAltered() || this._list.wasAltered();
        };
        OrderedMap2.prototype.__iterate = function __iterate(fn, reverse) {
          var this$1 = this;
          return this._list.__iterate(function (entry) {
            return entry && fn(entry[1], entry[0], this$1);
          }, reverse);
        };
        OrderedMap2.prototype.__iterator = function __iterator(type, reverse) {
          return this._list.fromEntrySeq().__iterator(type, reverse);
        };
        OrderedMap2.prototype.__ensureOwner = function __ensureOwner(ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          var newMap = this._map.__ensureOwner(ownerID);
          var newList = this._list.__ensureOwner(ownerID);
          if (!ownerID) {
            if (this.size === 0) {
              return emptyOrderedMap();
            }
            this.__ownerID = ownerID;
            this._map = newMap;
            this._list = newList;
            return this;
          }
          return makeOrderedMap(newMap, newList, ownerID, this.__hash);
        };
        return OrderedMap2;
      })(Map2);
      OrderedMap.isOrderedMap = isOrderedMap;
      OrderedMap.prototype[IS_ORDERED_SYMBOL] = true;
      OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;
      function makeOrderedMap(map, list, ownerID, hash2) {
        var omap = Object.create(OrderedMap.prototype);
        omap.size = map ? map.size : 0;
        omap._map = map;
        omap._list = list;
        omap.__ownerID = ownerID;
        omap.__hash = hash2;
        return omap;
      }
      var EMPTY_ORDERED_MAP;
      function emptyOrderedMap() {
        return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));
      }
      function updateOrderedMap(omap, k, v) {
        var map = omap._map;
        var list = omap._list;
        var i = map.get(k);
        var has2 = i !== void 0;
        var newMap;
        var newList;
        if (v === NOT_SET) {
          if (!has2) {
            return omap;
          }
          if (list.size >= SIZE && list.size >= map.size * 2) {
            newList = list.filter(function (entry, idx) {
              return entry !== void 0 && i !== idx;
            });
            newMap = newList.toKeyedSeq().map(function (entry) {
              return entry[0];
            }).flip().toMap();
            if (omap.__ownerID) {
              newMap.__ownerID = newList.__ownerID = omap.__ownerID;
            }
          } else {
            newMap = map.remove(k);
            newList = i === list.size - 1 ? list.pop() : list.set(i, void 0);
          }
        } else if (has2) {
          if (v === list.get(i)[1]) {
            return omap;
          }
          newMap = map;
          newList = list.set(i, [k, v]);
        } else {
          newMap = map.set(k, list.size);
          newList = list.set(list.size, [k, v]);
        }
        if (omap.__ownerID) {
          omap.size = newMap.size;
          omap._map = newMap;
          omap._list = newList;
          omap.__hash = void 0;
          return omap;
        }
        return makeOrderedMap(newMap, newList);
      }
      var IS_STACK_SYMBOL = "@@__IMMUTABLE_STACK__@@";
      function isStack(maybeStack) {
        return Boolean(maybeStack && maybeStack[IS_STACK_SYMBOL]);
      }
      var Stack = /*@__PURE__*/(function (IndexedCollection$$1) {
        function Stack2(value) {
          return value === null || value === void 0 ? emptyStack() : isStack(value) ? value : emptyStack().pushAll(value);
        }
        if (IndexedCollection$$1) Stack2.__proto__ = IndexedCollection$$1;
        Stack2.prototype = Object.create(IndexedCollection$$1 && IndexedCollection$$1.prototype);
        Stack2.prototype.constructor = Stack2;
        Stack2.of = function of() {
          return this(arguments);
        };
        Stack2.prototype.toString = function toString() {
          return this.__toString("Stack [", "]");
        };
        Stack2.prototype.get = function get2(index, notSetValue) {
          var head = this._head;
          index = wrapIndex(this, index);
          while (head && index--) {
            head = head.next;
          }
          return head ? head.value : notSetValue;
        };
        Stack2.prototype.peek = function peek() {
          return this._head && this._head.value;
        };
        Stack2.prototype.push = function push() {
          var arguments$1 = arguments;
          if (arguments.length === 0) {
            return this;
          }
          var newSize = this.size + arguments.length;
          var head = this._head;
          for (var ii = arguments.length - 1; ii >= 0; ii--) {
            head = {
              value: arguments$1[ii],
              next: head
            };
          }
          if (this.__ownerID) {
            this.size = newSize;
            this._head = head;
            this.__hash = void 0;
            this.__altered = true;
            return this;
          }
          return makeStack(newSize, head);
        };
        Stack2.prototype.pushAll = function pushAll(iter) {
          iter = IndexedCollection$$1(iter);
          if (iter.size === 0) {
            return this;
          }
          if (this.size === 0 && isStack(iter)) {
            return iter;
          }
          assertNotInfinite(iter.size);
          var newSize = this.size;
          var head = this._head;
          iter.__iterate(function (value) {
            newSize++;
            head = {
              value,
              next: head
            };
          }, true);
          if (this.__ownerID) {
            this.size = newSize;
            this._head = head;
            this.__hash = void 0;
            this.__altered = true;
            return this;
          }
          return makeStack(newSize, head);
        };
        Stack2.prototype.pop = function pop() {
          return this.slice(1);
        };
        Stack2.prototype.clear = function clear() {
          if (this.size === 0) {
            return this;
          }
          if (this.__ownerID) {
            this.size = 0;
            this._head = void 0;
            this.__hash = void 0;
            this.__altered = true;
            return this;
          }
          return emptyStack();
        };
        Stack2.prototype.slice = function slice(begin, end) {
          if (wholeSlice(begin, end, this.size)) {
            return this;
          }
          var resolvedBegin = resolveBegin(begin, this.size);
          var resolvedEnd = resolveEnd(end, this.size);
          if (resolvedEnd !== this.size) {
            return IndexedCollection$$1.prototype.slice.call(this, begin, end);
          }
          var newSize = this.size - resolvedBegin;
          var head = this._head;
          while (resolvedBegin--) {
            head = head.next;
          }
          if (this.__ownerID) {
            this.size = newSize;
            this._head = head;
            this.__hash = void 0;
            this.__altered = true;
            return this;
          }
          return makeStack(newSize, head);
        };
        Stack2.prototype.__ensureOwner = function __ensureOwner(ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          if (!ownerID) {
            if (this.size === 0) {
              return emptyStack();
            }
            this.__ownerID = ownerID;
            this.__altered = false;
            return this;
          }
          return makeStack(this.size, this._head, ownerID, this.__hash);
        };
        Stack2.prototype.__iterate = function __iterate(fn, reverse) {
          var this$1 = this;
          if (reverse) {
            return new ArraySeq(this.toArray()).__iterate(function (v, k) {
              return fn(v, k, this$1);
            }, reverse);
          }
          var iterations = 0;
          var node = this._head;
          while (node) {
            if (fn(node.value, iterations++, this) === false) {
              break;
            }
            node = node.next;
          }
          return iterations;
        };
        Stack2.prototype.__iterator = function __iterator(type, reverse) {
          if (reverse) {
            return new ArraySeq(this.toArray()).__iterator(type, reverse);
          }
          var iterations = 0;
          var node = this._head;
          return new Iterator(function () {
            if (node) {
              var value = node.value;
              node = node.next;
              return iteratorValue(type, iterations++, value);
            }
            return iteratorDone();
          });
        };
        return Stack2;
      })(IndexedCollection);
      Stack.isStack = isStack;
      var StackPrototype = Stack.prototype;
      StackPrototype[IS_STACK_SYMBOL] = true;
      StackPrototype.shift = StackPrototype.pop;
      StackPrototype.unshift = StackPrototype.push;
      StackPrototype.unshiftAll = StackPrototype.pushAll;
      StackPrototype.withMutations = withMutations;
      StackPrototype.wasAltered = wasAltered;
      StackPrototype.asImmutable = asImmutable;
      StackPrototype["@@transducer/init"] = StackPrototype.asMutable = asMutable;
      StackPrototype["@@transducer/step"] = function (result, arr) {
        return result.unshift(arr);
      };
      StackPrototype["@@transducer/result"] = function (obj) {
        return obj.asImmutable();
      };
      function makeStack(size, head, ownerID, hash2) {
        var map = Object.create(StackPrototype);
        map.size = size;
        map._head = head;
        map.__ownerID = ownerID;
        map.__hash = hash2;
        map.__altered = false;
        return map;
      }
      var EMPTY_STACK;
      function emptyStack() {
        return EMPTY_STACK || (EMPTY_STACK = makeStack(0));
      }
      var IS_SET_SYMBOL = "@@__IMMUTABLE_SET__@@";
      function isSet(maybeSet) {
        return Boolean(maybeSet && maybeSet[IS_SET_SYMBOL]);
      }
      function isOrderedSet(maybeOrderedSet) {
        return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);
      }
      function deepEqual(a, b) {
        if (a === b) {
          return true;
        }
        if (!isCollection(b) || a.size !== void 0 && b.size !== void 0 && a.size !== b.size || a.__hash !== void 0 && b.__hash !== void 0 && a.__hash !== b.__hash || isKeyed(a) !== isKeyed(b) || isIndexed(a) !== isIndexed(b) || isOrdered(a) !== isOrdered(b)) {
          return false;
        }
        if (a.size === 0 && b.size === 0) {
          return true;
        }
        var notAssociative = !isAssociative(a);
        if (isOrdered(a)) {
          var entries = a.entries();
          return b.every(function (v, k) {
            var entry = entries.next().value;
            return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));
          }) && entries.next().done;
        }
        var flipped = false;
        if (a.size === void 0) {
          if (b.size === void 0) {
            if (typeof a.cacheResult === "function") {
              a.cacheResult();
            }
          } else {
            flipped = true;
            var _ = a;
            a = b;
            b = _;
          }
        }
        var allEqual = true;
        var bSize = b.__iterate(function (v, k) {
          if (notAssociative ? !a.has(v) : flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {
            allEqual = false;
            return false;
          }
        });
        return allEqual && a.size === bSize;
      }
      function mixin(ctor, methods) {
        var keyCopier = function (key) {
          ctor.prototype[key] = methods[key];
        };
        Object.keys(methods).forEach(keyCopier);
        Object.getOwnPropertySymbols && Object.getOwnPropertySymbols(methods).forEach(keyCopier);
        return ctor;
      }
      function toJS(value) {
        if (!value || typeof value !== "object") {
          return value;
        }
        if (!isCollection(value)) {
          if (!isDataStructure(value)) {
            return value;
          }
          value = Seq(value);
        }
        if (isKeyed(value)) {
          var result$1 = {};
          value.__iterate(function (v, k) {
            result$1[k] = toJS(v);
          });
          return result$1;
        }
        var result = [];
        value.__iterate(function (v) {
          result.push(toJS(v));
        });
        return result;
      }
      var Set2 = /*@__PURE__*/(function (SetCollection$$1) {
        function Set3(value) {
          return value === null || value === void 0 ? emptySet() : isSet(value) && !isOrdered(value) ? value : emptySet().withMutations(function (set2) {
            var iter = SetCollection$$1(value);
            assertNotInfinite(iter.size);
            iter.forEach(function (v) {
              return set2.add(v);
            });
          });
        }
        if (SetCollection$$1) Set3.__proto__ = SetCollection$$1;
        Set3.prototype = Object.create(SetCollection$$1 && SetCollection$$1.prototype);
        Set3.prototype.constructor = Set3;
        Set3.of = function of() {
          return this(arguments);
        };
        Set3.fromKeys = function fromKeys(value) {
          return this(KeyedCollection(value).keySeq());
        };
        Set3.intersect = function intersect(sets) {
          sets = Collection(sets).toArray();
          return sets.length ? SetPrototype.intersect.apply(Set3(sets.pop()), sets) : emptySet();
        };
        Set3.union = function union(sets) {
          sets = Collection(sets).toArray();
          return sets.length ? SetPrototype.union.apply(Set3(sets.pop()), sets) : emptySet();
        };
        Set3.prototype.toString = function toString() {
          return this.__toString("Set {", "}");
        };
        Set3.prototype.has = function has2(value) {
          return this._map.has(value);
        };
        Set3.prototype.add = function add(value) {
          return updateSet(this, this._map.set(value, value));
        };
        Set3.prototype.remove = function remove2(value) {
          return updateSet(this, this._map.remove(value));
        };
        Set3.prototype.clear = function clear() {
          return updateSet(this, this._map.clear());
        };
        Set3.prototype.map = function map(mapper, context) {
          var this$1 = this;
          var removes = [];
          var adds = [];
          this.forEach(function (value) {
            var mapped = mapper.call(context, value, value, this$1);
            if (mapped !== value) {
              removes.push(value);
              adds.push(mapped);
            }
          });
          return this.withMutations(function (set2) {
            removes.forEach(function (value) {
              return set2.remove(value);
            });
            adds.forEach(function (value) {
              return set2.add(value);
            });
          });
        };
        Set3.prototype.union = function union() {
          var iters = [], len = arguments.length;
          while (len--) iters[len] = arguments[len];
          iters = iters.filter(function (x) {
            return x.size !== 0;
          });
          if (iters.length === 0) {
            return this;
          }
          if (this.size === 0 && !this.__ownerID && iters.length === 1) {
            return this.constructor(iters[0]);
          }
          return this.withMutations(function (set2) {
            for (var ii = 0; ii < iters.length; ii++) {
              SetCollection$$1(iters[ii]).forEach(function (value) {
                return set2.add(value);
              });
            }
          });
        };
        Set3.prototype.intersect = function intersect() {
          var iters = [], len = arguments.length;
          while (len--) iters[len] = arguments[len];
          if (iters.length === 0) {
            return this;
          }
          iters = iters.map(function (iter) {
            return SetCollection$$1(iter);
          });
          var toRemove = [];
          this.forEach(function (value) {
            if (!iters.every(function (iter) {
              return iter.includes(value);
            })) {
              toRemove.push(value);
            }
          });
          return this.withMutations(function (set2) {
            toRemove.forEach(function (value) {
              set2.remove(value);
            });
          });
        };
        Set3.prototype.subtract = function subtract() {
          var iters = [], len = arguments.length;
          while (len--) iters[len] = arguments[len];
          if (iters.length === 0) {
            return this;
          }
          iters = iters.map(function (iter) {
            return SetCollection$$1(iter);
          });
          var toRemove = [];
          this.forEach(function (value) {
            if (iters.some(function (iter) {
              return iter.includes(value);
            })) {
              toRemove.push(value);
            }
          });
          return this.withMutations(function (set2) {
            toRemove.forEach(function (value) {
              set2.remove(value);
            });
          });
        };
        Set3.prototype.sort = function sort(comparator) {
          return OrderedSet(sortFactory(this, comparator));
        };
        Set3.prototype.sortBy = function sortBy(mapper, comparator) {
          return OrderedSet(sortFactory(this, comparator, mapper));
        };
        Set3.prototype.wasAltered = function wasAltered2() {
          return this._map.wasAltered();
        };
        Set3.prototype.__iterate = function __iterate(fn, reverse) {
          var this$1 = this;
          return this._map.__iterate(function (k) {
            return fn(k, k, this$1);
          }, reverse);
        };
        Set3.prototype.__iterator = function __iterator(type, reverse) {
          return this._map.__iterator(type, reverse);
        };
        Set3.prototype.__ensureOwner = function __ensureOwner(ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          var newMap = this._map.__ensureOwner(ownerID);
          if (!ownerID) {
            if (this.size === 0) {
              return this.__empty();
            }
            this.__ownerID = ownerID;
            this._map = newMap;
            return this;
          }
          return this.__make(newMap, ownerID);
        };
        return Set3;
      })(SetCollection);
      Set2.isSet = isSet;
      var SetPrototype = Set2.prototype;
      SetPrototype[IS_SET_SYMBOL] = true;
      SetPrototype[DELETE] = SetPrototype.remove;
      SetPrototype.merge = SetPrototype.concat = SetPrototype.union;
      SetPrototype.withMutations = withMutations;
      SetPrototype.asImmutable = asImmutable;
      SetPrototype["@@transducer/init"] = SetPrototype.asMutable = asMutable;
      SetPrototype["@@transducer/step"] = function (result, arr) {
        return result.add(arr);
      };
      SetPrototype["@@transducer/result"] = function (obj) {
        return obj.asImmutable();
      };
      SetPrototype.__empty = emptySet;
      SetPrototype.__make = makeSet;
      function updateSet(set2, newMap) {
        if (set2.__ownerID) {
          set2.size = newMap.size;
          set2._map = newMap;
          return set2;
        }
        return newMap === set2._map ? set2 : newMap.size === 0 ? set2.__empty() : set2.__make(newMap);
      }
      function makeSet(map, ownerID) {
        var set2 = Object.create(SetPrototype);
        set2.size = map ? map.size : 0;
        set2._map = map;
        set2.__ownerID = ownerID;
        return set2;
      }
      var EMPTY_SET;
      function emptySet() {
        return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));
      }
      var Range = /*@__PURE__*/(function (IndexedSeq$$1) {
        function Range2(start, end, step) {
          if (!(this instanceof Range2)) {
            return new Range2(start, end, step);
          }
          invariant(step !== 0, "Cannot step a Range by 0");
          start = start || 0;
          if (end === void 0) {
            end = Infinity;
          }
          step = step === void 0 ? 1 : Math.abs(step);
          if (end < start) {
            step = -step;
          }
          this._start = start;
          this._end = end;
          this._step = step;
          this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);
          if (this.size === 0) {
            if (EMPTY_RANGE) {
              return EMPTY_RANGE;
            }
            EMPTY_RANGE = this;
          }
        }
        if (IndexedSeq$$1) Range2.__proto__ = IndexedSeq$$1;
        Range2.prototype = Object.create(IndexedSeq$$1 && IndexedSeq$$1.prototype);
        Range2.prototype.constructor = Range2;
        Range2.prototype.toString = function toString() {
          if (this.size === 0) {
            return "Range []";
          }
          return "Range [ " + this._start + "..." + this._end + (this._step !== 1 ? " by " + this._step : "") + " ]";
        };
        Range2.prototype.get = function get2(index, notSetValue) {
          return this.has(index) ? this._start + wrapIndex(this, index) * this._step : notSetValue;
        };
        Range2.prototype.includes = function includes(searchValue) {
          var possibleIndex = (searchValue - this._start) / this._step;
          return possibleIndex >= 0 && possibleIndex < this.size && possibleIndex === Math.floor(possibleIndex);
        };
        Range2.prototype.slice = function slice(begin, end) {
          if (wholeSlice(begin, end, this.size)) {
            return this;
          }
          begin = resolveBegin(begin, this.size);
          end = resolveEnd(end, this.size);
          if (end <= begin) {
            return new Range2(0, 0);
          }
          return new Range2(this.get(begin, this._end), this.get(end, this._end), this._step);
        };
        Range2.prototype.indexOf = function indexOf(searchValue) {
          var offsetValue = searchValue - this._start;
          if (offsetValue % this._step === 0) {
            var index = offsetValue / this._step;
            if (index >= 0 && index < this.size) {
              return index;
            }
          }
          return -1;
        };
        Range2.prototype.lastIndexOf = function lastIndexOf(searchValue) {
          return this.indexOf(searchValue);
        };
        Range2.prototype.__iterate = function __iterate(fn, reverse) {
          var size = this.size;
          var step = this._step;
          var value = reverse ? this._start + (size - 1) * step : this._start;
          var i = 0;
          while (i !== size) {
            if (fn(value, reverse ? size - ++i : i++, this) === false) {
              break;
            }
            value += reverse ? -step : step;
          }
          return i;
        };
        Range2.prototype.__iterator = function __iterator(type, reverse) {
          var size = this.size;
          var step = this._step;
          var value = reverse ? this._start + (size - 1) * step : this._start;
          var i = 0;
          return new Iterator(function () {
            if (i === size) {
              return iteratorDone();
            }
            var v = value;
            value += reverse ? -step : step;
            return iteratorValue(type, reverse ? size - ++i : i++, v);
          });
        };
        Range2.prototype.equals = function equals(other) {
          return other instanceof Range2 ? this._start === other._start && this._end === other._end && this._step === other._step : deepEqual(this, other);
        };
        return Range2;
      })(IndexedSeq);
      var EMPTY_RANGE;
      function getIn(collection, searchKeyPath, notSetValue) {
        var keyPath = coerceKeyPath(searchKeyPath);
        var i = 0;
        while (i !== keyPath.length) {
          collection = get(collection, keyPath[i++], NOT_SET);
          if (collection === NOT_SET) {
            return notSetValue;
          }
        }
        return collection;
      }
      function getIn$1(searchKeyPath, notSetValue) {
        return getIn(this, searchKeyPath, notSetValue);
      }
      function hasIn(collection, keyPath) {
        return getIn(collection, keyPath, NOT_SET) !== NOT_SET;
      }
      function hasIn$1(searchKeyPath) {
        return hasIn(this, searchKeyPath);
      }
      function toObject() {
        assertNotInfinite(this.size);
        var object = {};
        this.__iterate(function (v, k) {
          object[k] = v;
        });
        return object;
      }
      Collection.isIterable = isCollection;
      Collection.isKeyed = isKeyed;
      Collection.isIndexed = isIndexed;
      Collection.isAssociative = isAssociative;
      Collection.isOrdered = isOrdered;
      Collection.Iterator = Iterator;
      mixin(Collection, {
        toArray: function toArray() {
          assertNotInfinite(this.size);
          var array = new Array(this.size || 0);
          var useTuples = isKeyed(this);
          var i = 0;
          this.__iterate(function (v, k) {
            array[i++] = useTuples ? [k, v] : v;
          });
          return array;
        },
        toIndexedSeq: function toIndexedSeq() {
          return new ToIndexedSequence(this);
        },
        toJS: function toJS$1() {
          return toJS(this);
        },
        toKeyedSeq: function toKeyedSeq() {
          return new ToKeyedSequence(this, true);
        },
        toMap: function toMap() {
          return Map2(this.toKeyedSeq());
        },
        toObject,
        toOrderedMap: function toOrderedMap() {
          return OrderedMap(this.toKeyedSeq());
        },
        toOrderedSet: function toOrderedSet() {
          return OrderedSet(isKeyed(this) ? this.valueSeq() : this);
        },
        toSet: function toSet() {
          return Set2(isKeyed(this) ? this.valueSeq() : this);
        },
        toSetSeq: function toSetSeq() {
          return new ToSetSequence(this);
        },
        toSeq: function toSeq() {
          return isIndexed(this) ? this.toIndexedSeq() : isKeyed(this) ? this.toKeyedSeq() : this.toSetSeq();
        },
        toStack: function toStack() {
          return Stack(isKeyed(this) ? this.valueSeq() : this);
        },
        toList: function toList() {
          return List(isKeyed(this) ? this.valueSeq() : this);
        },
        toString: function toString() {
          return "[Collection]";
        },
        __toString: function __toString(head, tail) {
          if (this.size === 0) {
            return head + tail;
          }
          return head + " " + this.toSeq().map(this.__toStringMapper).join(", ") + " " + tail;
        },
        concat: function concat() {
          var values = [], len = arguments.length;
          while (len--) values[len] = arguments[len];
          return reify(this, concatFactory(this, values));
        },
        includes: function includes(searchValue) {
          return this.some(function (value) {
            return is(value, searchValue);
          });
        },
        entries: function entries() {
          return this.__iterator(ITERATE_ENTRIES);
        },
        every: function every(predicate, context) {
          assertNotInfinite(this.size);
          var returnValue = true;
          this.__iterate(function (v, k, c) {
            if (!predicate.call(context, v, k, c)) {
              returnValue = false;
              return false;
            }
          });
          return returnValue;
        },
        filter: function filter(predicate, context) {
          return reify(this, filterFactory(this, predicate, context, true));
        },
        find: function find(predicate, context, notSetValue) {
          var entry = this.findEntry(predicate, context);
          return entry ? entry[1] : notSetValue;
        },
        forEach: function forEach(sideEffect, context) {
          assertNotInfinite(this.size);
          return this.__iterate(context ? sideEffect.bind(context) : sideEffect);
        },
        join: function join(separator) {
          assertNotInfinite(this.size);
          separator = separator !== void 0 ? "" + separator : ",";
          var joined = "";
          var isFirst = true;
          this.__iterate(function (v) {
            isFirst ? isFirst = false : joined += separator;
            joined += v !== null && v !== void 0 ? v.toString() : "";
          });
          return joined;
        },
        keys: function keys() {
          return this.__iterator(ITERATE_KEYS);
        },
        map: function map(mapper, context) {
          return reify(this, mapFactory(this, mapper, context));
        },
        reduce: function reduce$1(reducer, initialReduction, context) {
          return reduce(this, reducer, initialReduction, context, arguments.length < 2, false);
        },
        reduceRight: function reduceRight(reducer, initialReduction, context) {
          return reduce(this, reducer, initialReduction, context, arguments.length < 2, true);
        },
        reverse: function reverse() {
          return reify(this, reverseFactory(this, true));
        },
        slice: function slice(begin, end) {
          return reify(this, sliceFactory(this, begin, end, true));
        },
        some: function some(predicate, context) {
          return !this.every(not(predicate), context);
        },
        sort: function sort(comparator) {
          return reify(this, sortFactory(this, comparator));
        },
        values: function values() {
          return this.__iterator(ITERATE_VALUES);
        },
        butLast: function butLast() {
          return this.slice(0, -1);
        },
        isEmpty: function isEmpty() {
          return this.size !== void 0 ? this.size === 0 : !this.some(function () {
            return true;
          });
        },
        count: function count(predicate, context) {
          return ensureSize(predicate ? this.toSeq().filter(predicate, context) : this);
        },
        countBy: function countBy(grouper, context) {
          return countByFactory(this, grouper, context);
        },
        equals: function equals(other) {
          return deepEqual(this, other);
        },
        entrySeq: function entrySeq() {
          var collection = this;
          if (collection._cache) {
            return new ArraySeq(collection._cache);
          }
          var entriesSequence = collection.toSeq().map(entryMapper).toIndexedSeq();
          entriesSequence.fromEntrySeq = function () {
            return collection.toSeq();
          };
          return entriesSequence;
        },
        filterNot: function filterNot(predicate, context) {
          return this.filter(not(predicate), context);
        },
        findEntry: function findEntry(predicate, context, notSetValue) {
          var found = notSetValue;
          this.__iterate(function (v, k, c) {
            if (predicate.call(context, v, k, c)) {
              found = [k, v];
              return false;
            }
          });
          return found;
        },
        findKey: function findKey(predicate, context) {
          var entry = this.findEntry(predicate, context);
          return entry && entry[0];
        },
        findLast: function findLast(predicate, context, notSetValue) {
          return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);
        },
        findLastEntry: function findLastEntry(predicate, context, notSetValue) {
          return this.toKeyedSeq().reverse().findEntry(predicate, context, notSetValue);
        },
        findLastKey: function findLastKey(predicate, context) {
          return this.toKeyedSeq().reverse().findKey(predicate, context);
        },
        first: function first(notSetValue) {
          return this.find(returnTrue, null, notSetValue);
        },
        flatMap: function flatMap(mapper, context) {
          return reify(this, flatMapFactory(this, mapper, context));
        },
        flatten: function flatten(depth) {
          return reify(this, flattenFactory(this, depth, true));
        },
        fromEntrySeq: function fromEntrySeq() {
          return new FromEntriesSequence(this);
        },
        get: function get2(searchKey, notSetValue) {
          return this.find(function (_, key) {
            return is(key, searchKey);
          }, void 0, notSetValue);
        },
        getIn: getIn$1,
        groupBy: function groupBy(grouper, context) {
          return groupByFactory(this, grouper, context);
        },
        has: function has2(searchKey) {
          return this.get(searchKey, NOT_SET) !== NOT_SET;
        },
        hasIn: hasIn$1,
        isSubset: function isSubset(iter) {
          iter = typeof iter.includes === "function" ? iter : Collection(iter);
          return this.every(function (value) {
            return iter.includes(value);
          });
        },
        isSuperset: function isSuperset(iter) {
          iter = typeof iter.isSubset === "function" ? iter : Collection(iter);
          return iter.isSubset(this);
        },
        keyOf: function keyOf(searchValue) {
          return this.findKey(function (value) {
            return is(value, searchValue);
          });
        },
        keySeq: function keySeq() {
          return this.toSeq().map(keyMapper).toIndexedSeq();
        },
        last: function last(notSetValue) {
          return this.toSeq().reverse().first(notSetValue);
        },
        lastKeyOf: function lastKeyOf(searchValue) {
          return this.toKeyedSeq().reverse().keyOf(searchValue);
        },
        max: function max(comparator) {
          return maxFactory(this, comparator);
        },
        maxBy: function maxBy(mapper, comparator) {
          return maxFactory(this, comparator, mapper);
        },
        min: function min(comparator) {
          return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);
        },
        minBy: function minBy(mapper, comparator) {
          return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);
        },
        rest: function rest() {
          return this.slice(1);
        },
        skip: function skip(amount) {
          return amount === 0 ? this : this.slice(Math.max(0, amount));
        },
        skipLast: function skipLast(amount) {
          return amount === 0 ? this : this.slice(0, -Math.max(0, amount));
        },
        skipWhile: function skipWhile(predicate, context) {
          return reify(this, skipWhileFactory(this, predicate, context, true));
        },
        skipUntil: function skipUntil(predicate, context) {
          return this.skipWhile(not(predicate), context);
        },
        sortBy: function sortBy(mapper, comparator) {
          return reify(this, sortFactory(this, comparator, mapper));
        },
        take: function take(amount) {
          return this.slice(0, Math.max(0, amount));
        },
        takeLast: function takeLast(amount) {
          return this.slice(-Math.max(0, amount));
        },
        takeWhile: function takeWhile(predicate, context) {
          return reify(this, takeWhileFactory(this, predicate, context));
        },
        takeUntil: function takeUntil(predicate, context) {
          return this.takeWhile(not(predicate), context);
        },
        update: function update2(fn) {
          return fn(this);
        },
        valueSeq: function valueSeq() {
          return this.toIndexedSeq();
        },
        hashCode: function hashCode() {
          return this.__hash || (this.__hash = hashCollection(this));
        }
      });
      var CollectionPrototype = Collection.prototype;
      CollectionPrototype[IS_COLLECTION_SYMBOL] = true;
      CollectionPrototype[ITERATOR_SYMBOL] = CollectionPrototype.values;
      CollectionPrototype.toJSON = CollectionPrototype.toArray;
      CollectionPrototype.__toStringMapper = quoteString;
      CollectionPrototype.inspect = CollectionPrototype.toSource = function () {
        return this.toString();
      };
      CollectionPrototype.chain = CollectionPrototype.flatMap;
      CollectionPrototype.contains = CollectionPrototype.includes;
      mixin(KeyedCollection, {
        flip: function flip() {
          return reify(this, flipFactory(this));
        },
        mapEntries: function mapEntries(mapper, context) {
          var this$1 = this;
          var iterations = 0;
          return reify(this, this.toSeq().map(function (v, k) {
            return mapper.call(context, [k, v], iterations++, this$1);
          }).fromEntrySeq());
        },
        mapKeys: function mapKeys(mapper, context) {
          var this$1 = this;
          return reify(this, this.toSeq().flip().map(function (k, v) {
            return mapper.call(context, k, v, this$1);
          }).flip());
        }
      });
      var KeyedCollectionPrototype = KeyedCollection.prototype;
      KeyedCollectionPrototype[IS_KEYED_SYMBOL] = true;
      KeyedCollectionPrototype[ITERATOR_SYMBOL] = CollectionPrototype.entries;
      KeyedCollectionPrototype.toJSON = toObject;
      KeyedCollectionPrototype.__toStringMapper = function (v, k) {
        return quoteString(k) + ": " + quoteString(v);
      };
      mixin(IndexedCollection, {
        toKeyedSeq: function toKeyedSeq() {
          return new ToKeyedSequence(this, false);
        },
        filter: function filter(predicate, context) {
          return reify(this, filterFactory(this, predicate, context, false));
        },
        findIndex: function findIndex(predicate, context) {
          var entry = this.findEntry(predicate, context);
          return entry ? entry[0] : -1;
        },
        indexOf: function indexOf(searchValue) {
          var key = this.keyOf(searchValue);
          return key === void 0 ? -1 : key;
        },
        lastIndexOf: function lastIndexOf(searchValue) {
          var key = this.lastKeyOf(searchValue);
          return key === void 0 ? -1 : key;
        },
        reverse: function reverse() {
          return reify(this, reverseFactory(this, false));
        },
        slice: function slice(begin, end) {
          return reify(this, sliceFactory(this, begin, end, false));
        },
        splice: function splice(index, removeNum) {
          var numArgs = arguments.length;
          removeNum = Math.max(removeNum || 0, 0);
          if (numArgs === 0 || numArgs === 2 && !removeNum) {
            return this;
          }
          index = resolveBegin(index, index < 0 ? this.count() : this.size);
          var spliced = this.slice(0, index);
          return reify(this, numArgs === 1 ? spliced : spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum)));
        },
        findLastIndex: function findLastIndex(predicate, context) {
          var entry = this.findLastEntry(predicate, context);
          return entry ? entry[0] : -1;
        },
        first: function first(notSetValue) {
          return this.get(0, notSetValue);
        },
        flatten: function flatten(depth) {
          return reify(this, flattenFactory(this, depth, false));
        },
        get: function get2(index, notSetValue) {
          index = wrapIndex(this, index);
          return index < 0 || (this.size === Infinity || this.size !== void 0 && index > this.size) ? notSetValue : this.find(function (_, key) {
            return key === index;
          }, void 0, notSetValue);
        },
        has: function has2(index) {
          index = wrapIndex(this, index);
          return index >= 0 && (this.size !== void 0 ? this.size === Infinity || index < this.size : this.indexOf(index) !== -1);
        },
        interpose: function interpose(separator) {
          return reify(this, interposeFactory(this, separator));
        },
        interleave: function interleave() {
          var collections = [this].concat(arrCopy(arguments));
          var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, collections);
          var interleaved = zipped.flatten(true);
          if (zipped.size) {
            interleaved.size = zipped.size * collections.length;
          }
          return reify(this, interleaved);
        },
        keySeq: function keySeq() {
          return Range(0, this.size);
        },
        last: function last(notSetValue) {
          return this.get(-1, notSetValue);
        },
        skipWhile: function skipWhile(predicate, context) {
          return reify(this, skipWhileFactory(this, predicate, context, false));
        },
        zip: function zip() {
          var collections = [this].concat(arrCopy(arguments));
          return reify(this, zipWithFactory(this, defaultZipper, collections));
        },
        zipAll: function zipAll() {
          var collections = [this].concat(arrCopy(arguments));
          return reify(this, zipWithFactory(this, defaultZipper, collections, true));
        },
        zipWith: function zipWith(zipper) {
          var collections = arrCopy(arguments);
          collections[0] = this;
          return reify(this, zipWithFactory(this, zipper, collections));
        }
      });
      var IndexedCollectionPrototype = IndexedCollection.prototype;
      IndexedCollectionPrototype[IS_INDEXED_SYMBOL] = true;
      IndexedCollectionPrototype[IS_ORDERED_SYMBOL] = true;
      mixin(SetCollection, {
        get: function get2(value, notSetValue) {
          return this.has(value) ? value : notSetValue;
        },
        includes: function includes(value) {
          return this.has(value);
        },
        keySeq: function keySeq() {
          return this.valueSeq();
        }
      });
      SetCollection.prototype.has = CollectionPrototype.includes;
      SetCollection.prototype.contains = SetCollection.prototype.includes;
      mixin(KeyedSeq, KeyedCollection.prototype);
      mixin(IndexedSeq, IndexedCollection.prototype);
      mixin(SetSeq, SetCollection.prototype);
      function reduce(collection, reducer, reduction, context, useFirst, reverse) {
        assertNotInfinite(collection.size);
        collection.__iterate(function (v, k, c) {
          if (useFirst) {
            useFirst = false;
            reduction = v;
          } else {
            reduction = reducer.call(context, reduction, v, k, c);
          }
        }, reverse);
        return reduction;
      }
      function keyMapper(v, k) {
        return k;
      }
      function entryMapper(v, k) {
        return [k, v];
      }
      function not(predicate) {
        return function () {
          return !predicate.apply(this, arguments);
        };
      }
      function neg(predicate) {
        return function () {
          return -predicate.apply(this, arguments);
        };
      }
      function defaultZipper() {
        return arrCopy(arguments);
      }
      function defaultNegComparator(a, b) {
        return a < b ? 1 : a > b ? -1 : 0;
      }
      function hashCollection(collection) {
        if (collection.size === Infinity) {
          return 0;
        }
        var ordered = isOrdered(collection);
        var keyed = isKeyed(collection);
        var h = ordered ? 1 : 0;
        var size = collection.__iterate(keyed ? ordered ? function (v, k) {
          h = 31 * h + hashMerge(hash(v), hash(k)) | 0;
        } : function (v, k) {
          h = h + hashMerge(hash(v), hash(k)) | 0;
        } : ordered ? function (v) {
          h = 31 * h + hash(v) | 0;
        } : function (v) {
          h = h + hash(v) | 0;
        });
        return murmurHashOfSize(size, h);
      }
      function murmurHashOfSize(size, h) {
        h = imul(h, 3432918353);
        h = imul(h << 15 | h >>> -15, 461845907);
        h = imul(h << 13 | h >>> -13, 5);
        h = (h + 3864292196 | 0) ^ size;
        h = imul(h ^ h >>> 16, 2246822507);
        h = imul(h ^ h >>> 13, 3266489909);
        h = smi(h ^ h >>> 16);
        return h;
      }
      function hashMerge(a, b) {
        return a ^ b + 2654435769 + (a << 6) + (a >> 2) | 0;
      }
      var OrderedSet = /*@__PURE__*/(function (Set$$1) {
        function OrderedSet2(value) {
          return value === null || value === void 0 ? emptyOrderedSet() : isOrderedSet(value) ? value : emptyOrderedSet().withMutations(function (set2) {
            var iter = SetCollection(value);
            assertNotInfinite(iter.size);
            iter.forEach(function (v) {
              return set2.add(v);
            });
          });
        }
        if (Set$$1) OrderedSet2.__proto__ = Set$$1;
        OrderedSet2.prototype = Object.create(Set$$1 && Set$$1.prototype);
        OrderedSet2.prototype.constructor = OrderedSet2;
        OrderedSet2.of = function of() {
          return this(arguments);
        };
        OrderedSet2.fromKeys = function fromKeys(value) {
          return this(KeyedCollection(value).keySeq());
        };
        OrderedSet2.prototype.toString = function toString() {
          return this.__toString("OrderedSet {", "}");
        };
        return OrderedSet2;
      })(Set2);
      OrderedSet.isOrderedSet = isOrderedSet;
      var OrderedSetPrototype = OrderedSet.prototype;
      OrderedSetPrototype[IS_ORDERED_SYMBOL] = true;
      OrderedSetPrototype.zip = IndexedCollectionPrototype.zip;
      OrderedSetPrototype.zipWith = IndexedCollectionPrototype.zipWith;
      OrderedSetPrototype.__empty = emptyOrderedSet;
      OrderedSetPrototype.__make = makeOrderedSet;
      function makeOrderedSet(map, ownerID) {
        var set2 = Object.create(OrderedSetPrototype);
        set2.size = map ? map.size : 0;
        set2._map = map;
        set2.__ownerID = ownerID;
        return set2;
      }
      var EMPTY_ORDERED_SET;
      function emptyOrderedSet() {
        return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));
      }
      var Record = function Record2(defaultValues, name) {
        var hasInitialized;
        var RecordType = function Record3(values) {
          var this$1 = this;
          if (values instanceof RecordType) {
            return values;
          }
          if (!(this instanceof RecordType)) {
            return new RecordType(values);
          }
          if (!hasInitialized) {
            hasInitialized = true;
            var keys = Object.keys(defaultValues);
            var indices = RecordTypePrototype._indices = {};
            RecordTypePrototype._name = name;
            RecordTypePrototype._keys = keys;
            RecordTypePrototype._defaultValues = defaultValues;
            for (var i = 0; i < keys.length; i++) {
              var propName = keys[i];
              indices[propName] = i;
              if (RecordTypePrototype[propName]) {
                typeof console === "object" && console.warn && console.warn("Cannot define " + recordName(this) + ' with property "' + propName + '" since that property name is part of the Record API.');
              } else {
                setProp(RecordTypePrototype, propName);
              }
            }
          }
          this.__ownerID = void 0;
          this._values = List().withMutations(function (l) {
            l.setSize(this$1._keys.length);
            KeyedCollection(values).forEach(function (v, k) {
              l.set(this$1._indices[k], v === this$1._defaultValues[k] ? void 0 : v);
            });
          });
        };
        var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);
        RecordTypePrototype.constructor = RecordType;
        if (name) {
          RecordType.displayName = name;
        }
        return RecordType;
      };
      Record.prototype.toString = function toString() {
        var str = recordName(this) + " { ";
        var keys = this._keys;
        var k;
        for (var i = 0, l = keys.length; i !== l; i++) {
          k = keys[i];
          str += (i ? ", " : "") + k + ": " + quoteString(this.get(k));
        }
        return str + " }";
      };
      Record.prototype.equals = function equals(other) {
        return this === other || other && this._keys === other._keys && recordSeq(this).equals(recordSeq(other));
      };
      Record.prototype.hashCode = function hashCode() {
        return recordSeq(this).hashCode();
      };
      Record.prototype.has = function has2(k) {
        return this._indices.hasOwnProperty(k);
      };
      Record.prototype.get = function get2(k, notSetValue) {
        if (!this.has(k)) {
          return notSetValue;
        }
        var index = this._indices[k];
        var value = this._values.get(index);
        return value === void 0 ? this._defaultValues[k] : value;
      };
      Record.prototype.set = function set2(k, v) {
        if (this.has(k)) {
          var newValues = this._values.set(this._indices[k], v === this._defaultValues[k] ? void 0 : v);
          if (newValues !== this._values && !this.__ownerID) {
            return makeRecord(this, newValues);
          }
        }
        return this;
      };
      Record.prototype.remove = function remove2(k) {
        return this.set(k);
      };
      Record.prototype.clear = function clear() {
        var newValues = this._values.clear().setSize(this._keys.length);
        return this.__ownerID ? this : makeRecord(this, newValues);
      };
      Record.prototype.wasAltered = function wasAltered2() {
        return this._values.wasAltered();
      };
      Record.prototype.toSeq = function toSeq() {
        return recordSeq(this);
      };
      Record.prototype.toJS = function toJS$1() {
        return toJS(this);
      };
      Record.prototype.entries = function entries() {
        return this.__iterator(ITERATE_ENTRIES);
      };
      Record.prototype.__iterator = function __iterator(type, reverse) {
        return recordSeq(this).__iterator(type, reverse);
      };
      Record.prototype.__iterate = function __iterate(fn, reverse) {
        return recordSeq(this).__iterate(fn, reverse);
      };
      Record.prototype.__ensureOwner = function __ensureOwner(ownerID) {
        if (ownerID === this.__ownerID) {
          return this;
        }
        var newValues = this._values.__ensureOwner(ownerID);
        if (!ownerID) {
          this.__ownerID = ownerID;
          this._values = newValues;
          return this;
        }
        return makeRecord(this, newValues, ownerID);
      };
      Record.isRecord = isRecord;
      Record.getDescriptiveName = recordName;
      var RecordPrototype = Record.prototype;
      RecordPrototype[IS_RECORD_SYMBOL] = true;
      RecordPrototype[DELETE] = RecordPrototype.remove;
      RecordPrototype.deleteIn = RecordPrototype.removeIn = deleteIn;
      RecordPrototype.getIn = getIn$1;
      RecordPrototype.hasIn = CollectionPrototype.hasIn;
      RecordPrototype.merge = merge;
      RecordPrototype.mergeWith = mergeWith;
      RecordPrototype.mergeIn = mergeIn;
      RecordPrototype.mergeDeep = mergeDeep$1;
      RecordPrototype.mergeDeepWith = mergeDeepWith$1;
      RecordPrototype.mergeDeepIn = mergeDeepIn;
      RecordPrototype.setIn = setIn$1;
      RecordPrototype.update = update$1;
      RecordPrototype.updateIn = updateIn$1;
      RecordPrototype.withMutations = withMutations;
      RecordPrototype.asMutable = asMutable;
      RecordPrototype.asImmutable = asImmutable;
      RecordPrototype[ITERATOR_SYMBOL] = RecordPrototype.entries;
      RecordPrototype.toJSON = RecordPrototype.toObject = CollectionPrototype.toObject;
      RecordPrototype.inspect = RecordPrototype.toSource = function () {
        return this.toString();
      };
      function makeRecord(likeRecord, values, ownerID) {
        var record = Object.create(Object.getPrototypeOf(likeRecord));
        record._values = values;
        record.__ownerID = ownerID;
        return record;
      }
      function recordName(record) {
        return record.constructor.displayName || record.constructor.name || "Record";
      }
      function recordSeq(record) {
        return keyedSeqFromValue(record._keys.map(function (k) {
          return [k, record.get(k)];
        }));
      }
      function setProp(prototype, name) {
        try {
          Object.defineProperty(prototype, name, {
            get: function () {
              return this.get(name);
            },
            set: function (value) {
              invariant(this.__ownerID, "Cannot set on an immutable record.");
              this.set(name, value);
            }
          });
        } catch (error) {}
      }
      var Repeat = /*@__PURE__*/(function (IndexedSeq$$1) {
        function Repeat2(value, times) {
          if (!(this instanceof Repeat2)) {
            return new Repeat2(value, times);
          }
          this._value = value;
          this.size = times === void 0 ? Infinity : Math.max(0, times);
          if (this.size === 0) {
            if (EMPTY_REPEAT) {
              return EMPTY_REPEAT;
            }
            EMPTY_REPEAT = this;
          }
        }
        if (IndexedSeq$$1) Repeat2.__proto__ = IndexedSeq$$1;
        Repeat2.prototype = Object.create(IndexedSeq$$1 && IndexedSeq$$1.prototype);
        Repeat2.prototype.constructor = Repeat2;
        Repeat2.prototype.toString = function toString() {
          if (this.size === 0) {
            return "Repeat []";
          }
          return "Repeat [ " + this._value + " " + this.size + " times ]";
        };
        Repeat2.prototype.get = function get2(index, notSetValue) {
          return this.has(index) ? this._value : notSetValue;
        };
        Repeat2.prototype.includes = function includes(searchValue) {
          return is(this._value, searchValue);
        };
        Repeat2.prototype.slice = function slice(begin, end) {
          var size = this.size;
          return wholeSlice(begin, end, size) ? this : new Repeat2(this._value, resolveEnd(end, size) - resolveBegin(begin, size));
        };
        Repeat2.prototype.reverse = function reverse() {
          return this;
        };
        Repeat2.prototype.indexOf = function indexOf(searchValue) {
          if (is(this._value, searchValue)) {
            return 0;
          }
          return -1;
        };
        Repeat2.prototype.lastIndexOf = function lastIndexOf(searchValue) {
          if (is(this._value, searchValue)) {
            return this.size;
          }
          return -1;
        };
        Repeat2.prototype.__iterate = function __iterate(fn, reverse) {
          var size = this.size;
          var i = 0;
          while (i !== size) {
            if (fn(this._value, reverse ? size - ++i : i++, this) === false) {
              break;
            }
          }
          return i;
        };
        Repeat2.prototype.__iterator = function __iterator(type, reverse) {
          var this$1 = this;
          var size = this.size;
          var i = 0;
          return new Iterator(function () {
            return i === size ? iteratorDone() : iteratorValue(type, reverse ? size - ++i : i++, this$1._value);
          });
        };
        Repeat2.prototype.equals = function equals(other) {
          return other instanceof Repeat2 ? is(this._value, other._value) : deepEqual(other);
        };
        return Repeat2;
      })(IndexedSeq);
      var EMPTY_REPEAT;
      function fromJS(value, converter) {
        return fromJSWith([], converter || defaultConverter, value, "", converter && converter.length > 2 ? [] : void 0, {
          "": value
        });
      }
      function fromJSWith(stack, converter, value, key, keyPath, parentValue) {
        var toSeq = Array.isArray(value) ? IndexedSeq : isPlainObj(value) ? KeyedSeq : null;
        if (toSeq) {
          if (~stack.indexOf(value)) {
            throw new TypeError("Cannot convert circular structure to Immutable");
          }
          stack.push(value);
          keyPath && key !== "" && keyPath.push(key);
          var converted = converter.call(parentValue, key, toSeq(value).map(function (v, k) {
            return fromJSWith(stack, converter, v, k, keyPath, value);
          }), keyPath && keyPath.slice());
          stack.pop();
          keyPath && keyPath.pop();
          return converted;
        }
        return value;
      }
      function defaultConverter(k, v) {
        return isKeyed(v) ? v.toMap() : v.toList();
      }
      var version = "4.0.0-rc.11";
      var Immutable = {
        version,
        Collection,
        Iterable: Collection,
        Seq,
        Map: Map2,
        OrderedMap,
        List,
        Stack,
        Set: Set2,
        OrderedSet,
        Record,
        Range,
        Repeat,
        is,
        fromJS,
        hash,
        isImmutable,
        isCollection,
        isKeyed,
        isIndexed,
        isAssociative,
        isOrdered,
        isValueObject,
        isSeq,
        isList,
        isMap,
        isOrderedMap,
        isStack,
        isSet,
        isOrderedSet,
        isRecord,
        get,
        getIn,
        has,
        hasIn,
        merge: merge$1,
        mergeDeep,
        mergeWith: mergeWith$1,
        mergeDeepWith,
        remove,
        removeIn,
        set,
        setIn,
        update,
        updateIn
      };
      var Iterable = Collection;
      exports2.default = Immutable;
      exports2.version = version;
      exports2.Collection = Collection;
      exports2.Iterable = Iterable;
      exports2.Seq = Seq;
      exports2.Map = Map2;
      exports2.OrderedMap = OrderedMap;
      exports2.List = List;
      exports2.Stack = Stack;
      exports2.Set = Set2;
      exports2.OrderedSet = OrderedSet;
      exports2.Record = Record;
      exports2.Range = Range;
      exports2.Repeat = Repeat;
      exports2.is = is;
      exports2.fromJS = fromJS;
      exports2.hash = hash;
      exports2.isImmutable = isImmutable;
      exports2.isCollection = isCollection;
      exports2.isKeyed = isKeyed;
      exports2.isIndexed = isIndexed;
      exports2.isAssociative = isAssociative;
      exports2.isOrdered = isOrdered;
      exports2.isValueObject = isValueObject;
      exports2.get = get;
      exports2.getIn = getIn;
      exports2.has = has;
      exports2.hasIn = hasIn;
      exports2.merge = merge$1;
      exports2.mergeDeep = mergeDeep;
      exports2.mergeWith = mergeWith$1;
      exports2.mergeDeepWith = mergeDeepWith;
      exports2.remove = remove;
      exports2.removeIn = removeIn;
      exports2.set = set;
      exports2.setIn = setIn;
      exports2.update = update;
      exports2.updateIn = updateIn;
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
    });
  });
  // _build/default/src/Suites.bs.js
  var require_Suites_bs = __commonJS(exports => {
    "use strict";
    var Mori = require_mori();
    var Vector = require_Vector_bs();
    var Immutable = require_immutable();
    var Belt_Array = require_belt_Array();
    var benchmarks = [{
      name: "Vector.fromArray",
      code: "A.range(1, n)->Vector.fromArray",
      f: function () {
        return Vector.fromArray(Belt_Array.range(1, 1e3));
      }
    }, {
      name: "ImmutableJs.List.fromArray",
      code: "A.range(1, n)->ImmutableJs.List.fromArray",
      f: function () {
        return Immutable.List(Belt_Array.range(1, 1e3));
      }
    }, {
      name: "Mori.into",
      code: "A.range(1, n) |> Mori.into(Mori.vector())",
      f: function () {
        return Mori.into(Mori.vector(), Belt_Array.range(1, 1e3));
      }
    }];
    var suite_name = "Creation";
    var suite = {
      name: suite_name,
      setup: "",
      benchmarks
    };
    function vectorCase(n) {
      return {
        name: "Vector.push",
        code: "A.range(1, n)\n->A.reduce(Vector.make(), (v, i) => Vector.push(v, i))",
        f: function () {
          return Belt_Array.reduce(Belt_Array.range(1, n), Vector.make(void 0), Vector.push);
        }
      };
    }
    function immutableJsCase(n) {
      return {
        name: "ImmutableJs.List.push",
        code: "A.range(1, n)\n->A.reduce(ImmutableJs.List.fromArray([||]), (l, i) => ImmutableJs.List.push(l, i))",
        f: function () {
          return Belt_Array.reduce(Belt_Array.range(1, n), Immutable.List([]), function (l, i) {
            return l.push(i);
          });
        }
      };
    }
    function moriCase(n) {
      return {
        name: "mori.conj",
        code: "A.range(1, n)\n->A.reduce(Mori.vector(), (v, i) => Mori.conj(v, i))",
        f: function () {
          return Belt_Array.reduce(Belt_Array.range(1, n), Mori.vector(), function (v, i) {
            return Mori.conj(v, i);
          });
        }
      };
    }
    var smallSuite_name = "Append last (n=" + 1e3 + ")";
    var smallSuite_setup = "let n = " + 1e3 + ";";
    var smallSuite_benchmarks = [vectorCase(1e3), immutableJsCase(1e3), moriCase(1e3), {
      name: "Belt.Array.concat",
      code: "A.range(1, n)\n->A.reduce(A.make(0, 0), (ar, v) => ar->A.concat([|v|]))",
      f: function () {
        return Belt_Array.reduce(Belt_Array.range(1, 1e3), Belt_Array.make(0, 0), function (ar, v) {
          return Belt_Array.concat(ar, [v]);
        });
      }
    }, {
      name: "Js.Array2.concat",
      code: "A.range(1, n)\n->A.reduce(A.make(0, 0), (ar, v) => ar->Js.Array2.concat([|v|]))",
      f: function () {
        return Belt_Array.reduce(Belt_Array.range(1, 1e3), Belt_Array.make(0, 0), function (ar, v) {
          return ar.concat([v]);
        });
      }
    }];
    var smallSuite = {
      name: smallSuite_name,
      setup: smallSuite_setup,
      benchmarks: smallSuite_benchmarks
    };
    var largeSuite_name = "Append last (n=" + 1e5 + ")";
    var largeSuite_setup = "let n = " + 1e5 + ";";
    var largeSuite_benchmarks = [vectorCase(1e5), immutableJsCase(1e5), moriCase(1e5)];
    var largeSuite = {
      name: largeSuite_name,
      setup: largeSuite_setup,
      benchmarks: largeSuite_benchmarks
    };
    var v0 = Belt_Array.range(1, 1e4);
    var v1 = Vector.fromArray(Belt_Array.range(1, 1e4));
    var v2 = Immutable.List(Belt_Array.range(1, 1e4));
    var v3 = Mori.into(Mori.vector(), Belt_Array.range(1, 1e4));
    var setup = "let n = 10000;\nlet v0 = A.range(1, n);\nlet v1 = Vector.fromArray(A.range(1, n));\nlet v2 = ImmutableJs.List.fromArray(A.range(1, n));\nlet v3 = Mori.into(Mori.vector(), A.range(1, n));";
    var indices = Belt_Array.shuffle(Belt_Array.range(0, 9999));
    var setup$1 = setup + "\nlet indices = A.range(0, n - 1)->A.shuffle;";
    var accessSuite_name = "Random Access";
    var accessSuite_benchmarks = [{
      name: "Vector.getExn",
      code: "indices->A.forEach(i => Vector.get(v1, i)->ignore)",
      f: function () {
        return Belt_Array.forEach(indices, function (i) {
          Vector.getExn(v1, i);
        });
      }
    }, {
      name: "ImmutableJs.List.get",
      code: "indices->A.forEach(i => ImmutableJs.List.get(v2, i)->ignore)",
      f: function () {
        return Belt_Array.forEach(indices, function (i) {
          v2.get(i);
        });
      }
    }, {
      name: "Mori.nth",
      code: "indices->A.forEach(i => Mori.nth(v3, i)->ignore)",
      f: function () {
        return Belt_Array.forEach(indices, function (i) {
          Mori.nth(v3, i);
        });
      }
    }];
    var accessSuite = {
      name: accessSuite_name,
      setup: setup$1,
      benchmarks: accessSuite_benchmarks
    };
    var updateSuite_name = "Random Update";
    var updateSuite_benchmarks = [{
      name: "Vector.setExn",
      code: "indices->A.reduce(v1, (v, i) => Vector.setExn(v, i, -1))",
      f: function () {
        return Belt_Array.reduce(indices, v1, function (v, i) {
          return Vector.setExn(v, i, -1);
        });
      }
    }, {
      name: "ImmutableJs.List.set",
      code: "indices\n->A.reduce(v2, (v, i) => ImmutableJs.List.set(v, i, -1))",
      f: function () {
        return Belt_Array.reduce(indices, v2, function (v, i) {
          return v.set(i, -1);
        });
      }
    }, {
      name: "Mori.assoc",
      code: "indices->A.reduce(v3, (v, i) => Mori.assoc(v, i, -1))",
      f: function () {
        return Belt_Array.reduce(indices, v3, function (v, i) {
          return Mori.assoc(v, i, -1);
        });
      }
    }];
    var updateSuite = {
      name: updateSuite_name,
      setup: setup$1,
      benchmarks: updateSuite_benchmarks
    };
    var suite_name$1 = "Reduce";
    var suite_benchmarks = [{
      name: "Vector.reduce",
      code: "v1->Vector.reduce(0, (+))",
      f: function () {
        return Vector.reduce(v1, 0, function (prim0, prim1) {
          return prim0 + prim1 | 0;
        });
      }
    }, {
      name: "ImmutableJs.List.reduce",
      code: "v2->ImmutableJs.List.reduce((+), 0)",
      f: function () {
        return v2.reduce(function (prim0, prim1) {
          return prim0 + prim1 | 0;
        }, 0);
      }
    }, {
      name: "Mori.reduce",
      code: "v3->Mori.reduce((+), 0, _)",
      f: function () {
        return Mori.reduce(function (prim0, prim1) {
          return prim0 + prim1 | 0;
        }, 0, v3);
      }
    }];
    var suite$1 = {
      name: suite_name$1,
      setup,
      benchmarks: suite_benchmarks
    };
    var suite2_name = "Reduce (vs. mutable)";
    var suite2_benchmarks = [{
      name: "Js.Array2.reduce (built-in)",
      code: "v0->Js.Array2.reduce((+), 0)",
      f: function () {
        return v0.reduce(function (prim0, prim1) {
          return prim0 + prim1 | 0;
        }, 0);
      }
    }, {
      name: "Belt.Array.reduce",
      code: "v0->Belt.Array.reduce(0, (+))",
      f: function () {
        return Belt_Array.reduce(v0, 0, function (prim0, prim1) {
          return prim0 + prim1 | 0;
        });
      }
    }, {
      name: "Vector.reduce",
      code: "v1->Vector.reduce(0, (+))",
      f: function () {
        return Vector.reduce(v1, 0, function (prim0, prim1) {
          return prim0 + prim1 | 0;
        });
      }
    }];
    var suite2 = {
      name: suite2_name,
      setup,
      benchmarks: suite2_benchmarks
    };
    function map(param) {
      switch (param) {
        case 0:
          return {
            suite,
            url: "create"
          };
        case 1:
          return {
            suite: smallSuite,
            url: "append-last-small"
          };
        case 2:
          return {
            suite: largeSuite,
            url: "append-last-large"
          };
        case 3:
          return {
            suite: accessSuite,
            url: "random-access"
          };
        case 4:
          return {
            suite: updateSuite,
            url: "random-update"
          };
        case 5:
          return {
            suite: suite$1,
            url: "reduce"
          };
        case 6:
          return {
            suite: suite2,
            url: "reduce-mutable"
          };
      }
    }
    function fromUrl(param) {
      switch (param) {
        case "append-last-large":
          return 2;
        case "append-last-small":
          return 1;
        case "create":
          return 0;
        case "random-access":
          return 3;
        case "random-update":
          return 4;
        case "reduce":
          return 5;
        case "reduce-mutable":
          return 6;
        default:
          return;
      }
    }
    var routes = [0, 1, 2, 3, 4, 5, 6];
    var Routes = {
      map,
      fromUrl,
      routes
    };
    exports.Routes = Routes;
  });
  // _build/default/src/Router.bs.js
  var require_Router_bs = __commonJS(exports => {
    "use strict";
    var _s24 = $RefreshSig$();
    var React2 = require_react();
    var Belt_Array = require_belt_Array();
    var Caml_option = require_caml_option();
    var ReasonReactRouter = require_ReasonReactRouter_bs();
    var Suites$MelangeParcelBenchmark = require_Suites_bs();
    function toString(suite) {
      if (suite) {
        return Suites$MelangeParcelBenchmark.Routes.map(suite._0).url;
      } else {
        return "";
      }
    }
    function fromString(s) {
      var suite = Suites$MelangeParcelBenchmark.Routes.fromUrl(s);
      if (suite !== void 0) {
        return {
          _0: Caml_option.valFromOption(suite)
        };
      } else {
        return 0;
      }
    }
    function name(suite) {
      if (suite) {
        return Suites$MelangeParcelBenchmark.Routes.map(suite._0).suite.name;
      } else {
        return "Index";
      }
    }
    var menu = Belt_Array.map(Suites$MelangeParcelBenchmark.Routes.routes, function (a) {
      return {
        _0: a
      };
    });
    function useUrl(param) {
      _s24();
      return fromString(ReasonReactRouter.useUrl(void 0, void 0).hash);
    }
    _s24(useUrl, "nSNTZEfKC+VsEzIna4YCf5+knV0=", false, function () {
      return [ReasonReactRouter.useUrl];
    });
    function Router$HashLink(Props) {
      var children = Props.children;
      var to_ = Props.to_;
      var className = Props.className;
      var href = toString(to_);
      var tmp = {
        href: "#" + href
      };
      if (className !== void 0) {
        tmp.className = Caml_option.valFromOption(className);
      }
      return React2.createElement("a", tmp, children);
    }
    var HashLink = {
      make: Router$HashLink
    };
    exports.fromString = fromString;
    exports.toString = toString;
    exports.name = name;
    exports.menu = menu;
    exports.useUrl = useUrl;
    exports.HashLink = HashLink;
  });
  // _build/default/src/App.bs.js
  var require_App_bs = __commonJS(exports => {
    "use strict";
    var _s25 = $RefreshSig$(), _s26 = $RefreshSig$(), _s27 = $RefreshSig$(), _s28 = $RefreshSig$();
    var Sys = require_sys();
    var Caml = require_caml();
    var Curry = require_curry();
    var React2 = require_react();
    var Js_dict = require_js_dict();
    var Belt_List = require_belt_List();
    var Benchmark = require_benchmark();
    var Belt_Array = require_belt_Array();
    var Router$MelangeParcelBenchmark = require_Router_bs();
    var Suites$MelangeParcelBenchmark = require_Suites_bs();
    var prefix = "rescript-vector";
    function set(title) {
      document.setTitle = prefix + (" - " + title);
    }
    function reset(param) {
      document.setTitle = prefix;
    }
    function reducer(_oldState, newState) {
      return newState;
    }
    function useState(initialState) {
      _s25();
      var match = React2.useReducer(reducer, initialState);
      var dispatch = match[1];
      return [match[0], Curry.__1(dispatch)];
    }
    _s25(useState, "tL09aJows6DOAPX9pCUvCYz/zRA=");
    function percentDiff(a, b) {
      return Math.floor((b - a) / b * 100);
    }
    function speedRank(name, fastest, slowest, hz) {
      if (name === fastest) {
        return 0;
      } else if (name === slowest) {
        return {
          TAG: 1,
          _0: hz
        };
      } else {
        return {
          TAG: 0,
          _0: hz
        };
      }
    }
    function App$Results(Props) {
      var hz = Props.hz;
      var rme = Props.rme;
      var sample = Props.sample;
      var speedRank2 = Props.speedRank;
      var tmp;
      tmp = typeof speedRank2 === "number" ? React2.createElement("p", {
        className: "fastest speedRank"
      }, "fastest") : speedRank2.TAG === 0 ? React2.createElement("p", {
        className: "speedRank"
      }, window.Benchmark.formatNumber(percentDiff(hz, speedRank2._0)) + "% slower") : React2.createElement(React2.Fragment, void 0, React2.createElement("p", {
        className: "slowest speedRank"
      }, "slowest"), React2.createElement("p", {
        className: "speedRank"
      }, window.Benchmark.formatNumber(percentDiff(hz, speedRank2._0)) + "% slower"));
      return React2.createElement("div", void 0, tmp, React2.createElement("dl", void 0, React2.createElement("dt", void 0, "operations per second"), React2.createElement("dd", void 0, window.Benchmark.formatNumber(Math.round(hz))), React2.createElement("dt", void 0, "relative margin of error"), React2.createElement("dd", void 0, "\xB1", window.Benchmark.formatNumber(Math.round(rme)), "%"), React2.createElement("dt", void 0, "samples"), React2.createElement("dd", void 0, String(sample.length))));
    }
    function App$Item(Props) {
      _s26();
      var name = Props.name;
      var code = Props.code;
      var f = Props.f;
      var suite = Props.suite;
      var suiteRunning = Props.suiteRunning;
      var match = useState(0);
      var setResult = match[1];
      var result = match[0];
      React2.useEffect(function () {
        window.Prism.highlightAll();
        suite.add(name, f, {
          onComplete: function (param) {
            var currentTarget = param.currentTarget;
            if (!currentTarget.aborted) {
              return setResult({
                time: Date.now(),
                benchmark: currentTarget
              });
            }
          },
          onStart: function (param) {
            if (!param.currentTarget.aborted) {
              return setResult(1);
            }
          }
        });
      }, [suite]);
      var tmp;
      var exit = 0;
      if (typeof suiteRunning === "number") {
        exit = 2;
      } else if (suiteRunning.TAG === 0) {
        var exit$1 = 0;
        if (typeof result === "number") {
          if (result) {
            exit = 1;
          } else {
            exit$1 = 3;
          }
        } else if (suiteRunning.time < result.time) {
          tmp = React2.createElement("p", {
            className: "subtle"
          }, "Done. Waiting for the other tests.");
        } else {
          exit$1 = 3;
        }
        if (exit$1 === 3) {
          tmp = React2.createElement("p", {
            className: "subtle"
          }, "Waiting");
        }
      } else if (typeof result === "number") {
        exit = result ? 1 : 2;
      } else {
        var match$1 = result.benchmark;
        var match$2 = match$1.stats;
        tmp = React2.createElement(App$Results, {
          hz: match$1.hz,
          rme: match$2.rme,
          sample: match$2.sample,
          speedRank: speedRank(match$1.name, suiteRunning.fastest, suiteRunning.slowest, suiteRunning.fastestHz)
        });
      }
      switch (exit) {
        case 1:
          tmp = React2.createElement("p", {
            className: "subtle"
          }, "Running...");
          break;
        case 2:
          tmp = React2.createElement("p", {
            className: "subtle"
          }, "Not started");
          break;
      }
      return React2.createElement("div", {
        className: "item"
      }, React2.createElement("div", {
        className: "item__body"
      }, React2.createElement("header", {
        className: "item__header"
      }, React2.createElement("h2", {
        className: "item__header_h"
      }, React2.createElement("code", void 0, name))), React2.createElement("div", {
        className: "code item__code"
      }, React2.createElement("pre", void 0, React2.createElement("code", {
        className: "language-reason"
      }, code)))), React2.createElement("div", {
        className: "item__results"
      }, React2.createElement("h3", void 0, "Results"), tmp));
    }
    _s26(App$Item, "WMnuC34lp6ctSXBANRLk61dS9Ec=");
    function App$SuiteComponent(Props) {
      var benchmarks = Props.benchmarks;
      var suite = Props.suite;
      var suiteRunning = Props.suiteRunning;
      return React2.createElement("div", void 0, Belt_Array.map(benchmarks, function (param) {
        var name = param.name;
        return React2.createElement(App$Item, {
          name,
          code: param.code,
          f: param.f,
          suite,
          suiteRunning,
          key: name
        });
      }));
    }
    function getStats(param) {
      var currentTarget = param.currentTarget;
      var results = Belt_List.sort(Belt_List.keepMap(Belt_List.makeBy(currentTarget.length, function (prim) {
        return String(prim);
      }), function (param2) {
        return Js_dict.get(currentTarget, param2);
      }), function (a, b) {
        return Caml.caml_float_compare(b.hz, a.hz);
      });
      if (!results) {
        return 0;
      }
      var match = results.hd;
      if (results.tl) {
        var match$1 = Belt_List.reverse(results.tl);
        if (match$1) {
          return {
            TAG: 1,
            fastest: match.name,
            slowest: match$1.hd.name,
            fastestHz: match.hz
          };
        } else {
          return 0;
        }
      }
      var name = match.name;
      return {
        TAG: 1,
        fastest: name,
        slowest: name,
        fastestHz: match.hz
      };
    }
    function App$Wrapper(Props) {
      _s27();
      var benchmarks = Props.benchmarks;
      var setup = Props.setup;
      var suite = Props.suite;
      var match = useState(0);
      var setRunning = match[1];
      var suiteRunning = match[0];
      React2.useEffect(function () {
        suite.on("start", function (param) {
          if (!param.currentTarget.aborted) {
            return setRunning({
              TAG: 0,
              time: Date.now()
            });
          }
        }).on("complete", function (e) {
          if (!e.currentTarget.aborted) {
            return setRunning(getStats(e));
          }
        });
        return function (param) {
          suite.abort();
        };
      }, [suite]);
      React2.useEffect(function () {
        set(suite.name);
        return reset;
      }, []);
      var name = window.Benchmark.platform.name;
      var tmp;
      if (name == null) {
        tmp = React2.createElement("dd", void 0, "Unknown");
      } else {
        var version = window.Benchmark.platform.version;
        tmp = React2.createElement("dd", void 0, name, version == null ? null : " " + version);
      }
      var os = window.Benchmark.platform.os;
      var tmp$1;
      tmp$1 = typeof suiteRunning === "number" || suiteRunning.TAG !== 0 ? false : true;
      var tmp$2;
      tmp$2 = typeof suiteRunning === "number" || suiteRunning.TAG !== 0 ? "Run" : "Running...";
      return React2.createElement("section", void 0, React2.createElement("header", void 0, React2.createElement("h1", void 0, suite.name)), React2.createElement("div", {
        className: "setup"
      }, React2.createElement("div", {
        className: "setup__body"
      }, React2.createElement("h2", void 0, "Setup"), React2.createElement("div", {
        className: "code"
      }, React2.createElement("pre", void 0, React2.createElement("code", {
        className: "language-reason"
      }, setup)))), React2.createElement("dl", {
        className: "setup__platform"
      }, React2.createElement("dt", void 0, "OCaml"), React2.createElement("dd", void 0, Sys.ocaml_version), React2.createElement("dt", void 0, "Browser"), tmp, React2.createElement("dt", void 0, "Operating system"), os == null ? React2.createElement("dd", void 0, "Unknown") : React2.createElement("dd", void 0, os.toString()))), React2.createElement("div", {
        className: "run"
      }, React2.createElement("button", {
        className: "run__button",
        disabled: tmp$1,
        onClick: function (param) {
          suite.run({
            async: true
          });
        }
      }, tmp$2)), React2.createElement(App$SuiteComponent, {
        benchmarks,
        suite,
        suiteRunning
      }));
    }
    _s27(App$Wrapper, "tDlN9W8nNWbzUVB5V5tUB+LJqD8=");
    function App(Props) {
      _s28();
      var url = Router$MelangeParcelBenchmark.useUrl(void 0);
      React2.useEffect(function () {
        document.setTitle = prefix;
      }, []);
      var tmp;
      if (url) {
        var match = Suites$MelangeParcelBenchmark.Routes.map(url._0).suite;
        var suite = new Benchmark.Suite(match.name);
        tmp = React2.createElement(React2.Fragment, void 0, React2.createElement(Router$MelangeParcelBenchmark.HashLink.make, {
          children: null,
          to_: 0,
          className: "go-home"
        }, "\u2190", Router$MelangeParcelBenchmark.name(0)), React2.createElement(App$Wrapper, {
          benchmarks: match.benchmarks,
          setup: match.setup,
          suite
        }));
      } else {
        tmp = React2.createElement(React2.Fragment, void 0, React2.createElement("h2", {
          className: "index-header"
        }, "The benchmarks"), React2.createElement("ul", {
          className: "menu"
        }, Belt_Array.map(Router$MelangeParcelBenchmark.menu, function (route) {
          return React2.createElement("li", {
            key: Router$MelangeParcelBenchmark.toString(route),
            className: "menu__item"
          }, React2.createElement(Router$MelangeParcelBenchmark.HashLink.make, {
            children: Router$MelangeParcelBenchmark.name(route),
            to_: route
          }));
        })));
      }
      return React2.createElement("div", {
        className: "smallscreen-padding"
      }, React2.createElement("main", {
        className: "main "
      }, React2.createElement("header", void 0, React2.createElement("p", {
        className: "site-title"
      }, React2.createElement(Router$MelangeParcelBenchmark.HashLink.make, {
        children: "rescript-vector",
        to_: 0,
        className: "site-title__link"
      }))), tmp));
    }
    _s28(App, "7WyW16lzld4hyOofTOtU99s1wAY=", false, function () {
      return [Router$MelangeParcelBenchmark.useUrl];
    });
    var make = App;
    exports.make = make;
  });
  // _build/default/src/Index.bs.js
  "use strict";
  var React = require_react();
  var ReactDOMRe = require_ReactDOMRe_bs();
  var App$MelangeParcelBenchmark = require_App_bs();
  ReactDOMRe.renderToElementWithId(React.createElement(App$MelangeParcelBenchmark.make, {}), "root");
})();

},{"process":"7AgFc"}],"7AgFc":[function(require,module,exports) {
// shim for using process in browser
var process = module.exports = {};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}
(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }
  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();
function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    // normal enviroments in sane situations
    return setTimeout(fun, 0);
  }
  // if setTimeout wasn't available but was latter defined
  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }
  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}
function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    // normal enviroments in sane situations
    return clearTimeout(marker);
  }
  // if clearTimeout wasn't available but was latter defined
  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }
  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }
  draining = false;
  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }
  if (queue.length) {
    drainQueue();
  }
}
function drainQueue() {
  if (draining) {
    return;
  }
  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;
  while (len) {
    currentQueue = queue;
    queue = [];
    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }
    queueIndex = -1;
    len = queue.length;
  }
  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}
process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);
  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }
  queue.push(new Item(fun, args));
  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
};
// v8 likes predictible objects
function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}
Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = '';
// empty string to avoid regexp issues
process.versions = {};
function noop() {}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function (name) {
  return [];
};
process.binding = function (name) {
  throw new Error('process.binding is not supported');
};
process.cwd = function () {
  return '/';
};
process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};
process.umask = function () {
  return 0;
};

},{}]},["1j6wU","3Imd1","5rkFb"], "5rkFb", "parcelRequire14fb")

//# sourceMappingURL=index.3fafb3e2.js.map
